
CBC_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  24000000  08004bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004cc  24000020  08004bf4  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00003400  240004ec  08004bf4  000204ec  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002af08  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000040bb  00000000  00000000  0004af52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012153  00000000  00000000  0004f00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ea8  00000000  00000000  00061160  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002848  00000000  00000000  00062008  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c9a1  00000000  00000000  00064850  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000758b  00000000  00000000  000711f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007877c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000033f0  00000000  00000000  000787f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004ba8 	.word	0x08004ba8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	08004ba8 	.word	0x08004ba8

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <HAL_InitTick+0x44>)
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80002ec:	b510      	push	{r4, lr}
 80002ee:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002f0:	6808      	ldr	r0, [r1, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 fd85 	bl	8000e04 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d80a      	bhi.n	8000314 <HAL_InitTick+0x3c>
 80002fe:	b948      	cbnz	r0, 8000314 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000300:	2200      	movs	r2, #0
 8000302:	4621      	mov	r1, r4
 8000304:	f04f 30ff 	mov.w	r0, #4294967295
 8000308:	f000 fd34 	bl	8000d74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <HAL_InitTick+0x48>)
 800030e:	2000      	movs	r0, #0
 8000310:	601c      	str	r4, [r3, #0]
}
 8000312:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000314:	2001      	movs	r0, #1
 8000316:	bd10      	pop	{r4, pc}
 8000318:	24000000 	.word	0x24000000
 800031c:	24000014 	.word	0x24000014
 8000320:	24000004 	.word	0x24000004

08000324 <HAL_Init>:
{
 8000324:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
{
 8000328:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 fd0f 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4c12      	ldr	r4, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f001 fb02 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4912      	ldr	r1, [pc, #72]	; (8000380 <HAL_Init+0x5c>)
 8000338:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8000340:	4d10      	ldr	r5, [pc, #64]	; (8000384 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800034e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000356:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000358:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800035c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x48>
    return HAL_ERROR;
 8000366:	2001      	movs	r0, #1
}
 8000368:	b003      	add	sp, #12
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800036e:	f004 fa8f 	bl	8004890 <HAL_MspInit>
  return HAL_OK;
 8000372:	9801      	ldr	r0, [sp, #4]
}
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	24000018 	.word	0x24000018
 800037c:	58024400 	.word	0x58024400
 8000380:	08004bc0 	.word	0x08004bc0
 8000384:	24000014 	.word	0x24000014

08000388 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x10>)
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_IncTick+0x14>)
 800038c:	6811      	ldr	r1, [r2, #0]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	440b      	add	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	24000090 	.word	0x24000090
 800039c:	24000000 	.word	0x24000000

080003a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <HAL_GetTick+0x8>)
 80003a2:	6818      	ldr	r0, [r3, #0]
}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	24000090 	.word	0x24000090

080003ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003ac:	b538      	push	{r3, r4, r5, lr}
 80003ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003b0:	f7ff fff6 	bl	80003a0 <HAL_GetTick>
 80003b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b6:	1c63      	adds	r3, r4, #1
 80003b8:	d002      	beq.n	80003c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x20>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c0:	f7ff ffee 	bl	80003a0 <HAL_GetTick>
 80003c4:	1b40      	subs	r0, r0, r5
 80003c6:	4284      	cmp	r4, r0
 80003c8:	d8fa      	bhi.n	80003c0 <HAL_Delay+0x14>
  {
  }
}
 80003ca:	bd38      	pop	{r3, r4, r5, pc}
 80003cc:	24000000 	.word	0x24000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80003de:	6853      	ldr	r3, [r2, #4]
 80003e0:	ea23 0000 	bic.w	r0, r3, r0
 80003e4:	4308      	orrs	r0, r1
 80003e6:	6050      	str	r0, [r2, #4]
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	58000400 	.word	0x58000400

080003f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80003f0:	4602      	mov	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80003f2:	2000      	movs	r0, #0
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80003f4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
{
 80003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80003fa:	2b01      	cmp	r3, #1
{
 80003fc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80003fe:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000400:	f000 80b0 	beq.w	8000564 <HAL_ADC_ConfigChannel+0x174>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000404:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(hadc);
 8000406:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000408:	68a0      	ldr	r0, [r4, #8]
 800040a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 800040e:	0747      	lsls	r7, r0, #29
 8000410:	d509      	bpl.n	8000426 <HAL_ADC_ConfigChannel+0x36>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000412:	6d51      	ldr	r1, [r2, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000414:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000416:	f041 0120 	orr.w	r1, r1, #32
 800041a:	6551      	str	r1, [r2, #84]	; 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800041c:	2300      	movs	r3, #0
 800041e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8000422:	b003      	add	sp, #12
 8000424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000426:	680d      	ldr	r5, [r1, #0]
 8000428:	f3c5 0013 	ubfx	r0, r5, #0, #20
 800042c:	2800      	cmp	r0, #0
 800042e:	f000 809c 	beq.w	800056a <HAL_ADC_ConfigChannel+0x17a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000432:	fa95 f0a5 	rbit	r0, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000436:	b110      	cbz	r0, 800043e <HAL_ADC_ConfigChannel+0x4e>
 8000438:	fab0 f080 	clz	r0, r0
 800043c:	4083      	lsls	r3, r0
 800043e:	f3c5 6584 	ubfx	r5, r5, #26, #5
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000442:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(*preg,
 8000444:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000448:	69e0      	ldr	r0, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800044a:	09b7      	lsrs	r7, r6, #6
  MODIFY_REG(*preg,
 800044c:	ea06 060e 	and.w	r6, r6, lr
 8000450:	4303      	orrs	r3, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000452:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000456:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 800045a:	fa0e fe06 	lsl.w	lr, lr, r6
 800045e:	61e3      	str	r3, [r4, #28]
 8000460:	40b5      	lsls	r5, r6
 8000462:	583b      	ldr	r3, [r7, r0]
 8000464:	ea23 030e 	bic.w	r3, r3, lr
 8000468:	431d      	orrs	r5, r3
 800046a:	503d      	str	r5, [r7, r0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800046c:	68a3      	ldr	r3, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800046e:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000470:	f003 0304 	and.w	r3, r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000474:	0706      	lsls	r6, r0, #28
 8000476:	d459      	bmi.n	800052c <HAL_ADC_ConfigChannel+0x13c>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000478:	2b00      	cmp	r3, #0
 800047a:	d157      	bne.n	800052c <HAL_ADC_ConfigChannel+0x13c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800047c:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800047e:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8000482:	2007      	movs	r0, #7
 8000484:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000486:	ea4f 5ed5 	mov.w	lr, r5, lsr #23
  MODIFY_REG(*preg,
 800048a:	f3c5 5504 	ubfx	r5, r5, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800048e:	f00e 0e04 	and.w	lr, lr, #4
  MODIFY_REG(*preg,
 8000492:	fa00 fc05 	lsl.w	ip, r0, r5
 8000496:	fa07 f505 	lsl.w	r5, r7, r5
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800049a:	4fbd      	ldr	r7, [pc, #756]	; (8000790 <HAL_ADC_ConfigChannel+0x3a0>)
 800049c:	f85e 0006 	ldr.w	r0, [lr, r6]
 80004a0:	ea20 000c 	bic.w	r0, r0, ip
 80004a4:	4328      	orrs	r0, r5
 80004a6:	f84e 0006 	str.w	r0, [lr, r6]
 80004aa:	6838      	ldr	r0, [r7, #0]
 80004ac:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80004b0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80004b4:	68e0      	ldr	r0, [r4, #12]
 80004b6:	d061      	beq.n	800057c <HAL_ADC_ConfigChannel+0x18c>
 80004b8:	f010 0f10 	tst.w	r0, #16
 80004bc:	694d      	ldr	r5, [r1, #20]
 80004be:	68e0      	ldr	r0, [r4, #12]
 80004c0:	d157      	bne.n	8000572 <HAL_ADC_ConfigChannel+0x182>
 80004c2:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80004c6:	0040      	lsls	r0, r0, #1
 80004c8:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80004ca:	690f      	ldr	r7, [r1, #16]
 80004cc:	2f04      	cmp	r7, #4
 80004ce:	f000 8083 	beq.w	80005d8 <HAL_ADC_ConfigChannel+0x1e8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004d2:	f104 0660 	add.w	r6, r4, #96	; 0x60
    MODIFY_REG(*preg,
 80004d6:	6808      	ldr	r0, [r1, #0]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80004d8:	f891 e019 	ldrb.w	lr, [r1, #25]
 80004dc:	f856 c027 	ldr.w	ip, [r6, r7, lsl #2]
 80004e0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80004e4:	f1be 0f01 	cmp.w	lr, #1
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80004e8:	f891 e018 	ldrb.w	lr, [r1, #24]
 80004ec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004f0:	ea40 000c 	orr.w	r0, r0, ip
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80004f4:	bf14      	ite	ne
 80004f6:	f04f 0c00 	movne.w	ip, #0
 80004fa:	f04f 4c00 	moveq.w	ip, #2147483648	; 0x80000000
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80004fe:	f1be 0f01 	cmp.w	lr, #1
 8000502:	ea40 0005 	orr.w	r0, r0, r5
 8000506:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800050a:	690d      	ldr	r5, [r1, #16]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800050c:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8000510:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000514:	ea40 000c 	orr.w	r0, r0, ip
 8000518:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800051c:	6908      	ldr	r0, [r1, #16]
 800051e:	f000 80a4 	beq.w	800066a <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000522:	6920      	ldr	r0, [r4, #16]
 8000524:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8000528:	4303      	orrs	r3, r0
 800052a:	6123      	str	r3, [r4, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800052c:	68a3      	ldr	r3, [r4, #8]
 800052e:	07dd      	lsls	r5, r3, #31
 8000530:	d416      	bmi.n	8000560 <HAL_ADC_ConfigChannel+0x170>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000532:	68ce      	ldr	r6, [r1, #12]
 8000534:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000536:	f006 0718 	and.w	r7, r6, #24
 800053a:	4896      	ldr	r0, [pc, #600]	; (8000794 <HAL_ADC_ConfigChannel+0x3a4>)
 800053c:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8000540:	40f8      	lsrs	r0, r7
 8000542:	f3c3 0713 	ubfx	r7, r3, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000546:	f8df e270 	ldr.w	lr, [pc, #624]	; 80007b8 <HAL_ADC_ConfigChannel+0x3c8>
 800054a:	4018      	ands	r0, r3
 800054c:	ea25 0507 	bic.w	r5, r5, r7
 8000550:	4576      	cmp	r6, lr
 8000552:	ea40 0005 	orr.w	r0, r0, r5
 8000556:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 800055a:	d015      	beq.n	8000588 <HAL_ADC_ConfigChannel+0x198>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800055c:	2b00      	cmp	r3, #0
 800055e:	db59      	blt.n	8000614 <HAL_ADC_ConfigChannel+0x224>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000560:	2000      	movs	r0, #0
 8000562:	e75b      	b.n	800041c <HAL_ADC_ConfigChannel+0x2c>
  __HAL_LOCK(hadc);
 8000564:	2002      	movs	r0, #2
}
 8000566:	b003      	add	sp, #12
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800056a:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800056e:	40ab      	lsls	r3, r5
 8000570:	e767      	b.n	8000442 <HAL_ADC_ConfigChannel+0x52>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000572:	0840      	lsrs	r0, r0, #1
 8000574:	f000 0008 	and.w	r0, r0, #8
 8000578:	4085      	lsls	r5, r0
 800057a:	e7a6      	b.n	80004ca <HAL_ADC_ConfigChannel+0xda>
 800057c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8000580:	694d      	ldr	r5, [r1, #20]
 8000582:	0040      	lsls	r0, r0, #1
 8000584:	4085      	lsls	r5, r0
 8000586:	e7a0      	b.n	80004ca <HAL_ADC_ConfigChannel+0xda>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000588:	2f00      	cmp	r7, #0
 800058a:	d174      	bne.n	8000676 <HAL_ADC_ConfigChannel+0x286>
 800058c:	0e9b      	lsrs	r3, r3, #26
 800058e:	1c58      	adds	r0, r3, #1
 8000590:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000594:	2e09      	cmp	r6, #9
 8000596:	f200 80c9 	bhi.w	800072c <HAL_ADC_ConfigChannel+0x33c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800059a:	0680      	lsls	r0, r0, #26
 800059c:	2501      	movs	r5, #1
 800059e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80005a2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80005a6:	fa05 f606 	lsl.w	r6, r5, r6
 80005aa:	051b      	lsls	r3, r3, #20
 80005ac:	4330      	orrs	r0, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80005ae:	4303      	orrs	r3, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005b0:	0ddf      	lsrs	r7, r3, #23
 80005b2:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 80005b6:	f3c3 5304 	ubfx	r3, r3, #20, #5
 80005ba:	f04f 0e07 	mov.w	lr, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005be:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 80005c2:	688e      	ldr	r6, [r1, #8]
 80005c4:	fa0e fe03 	lsl.w	lr, lr, r3
 80005c8:	5978      	ldr	r0, [r7, r5]
 80005ca:	409e      	lsls	r6, r3
 80005cc:	ea20 030e 	bic.w	r3, r0, lr
 80005d0:	4333      	orrs	r3, r6
 80005d2:	517b      	str	r3, [r7, r5]
 80005d4:	680b      	ldr	r3, [r1, #0]
 80005d6:	e7c1      	b.n	800055c <HAL_ADC_ConfigChannel+0x16c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80005d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80005da:	680b      	ldr	r3, [r1, #0]
 80005dc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80005e0:	069b      	lsls	r3, r3, #26
 80005e2:	4298      	cmp	r0, r3
 80005e4:	f000 8098 	beq.w	8000718 <HAL_ADC_ConfigChannel+0x328>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80005e8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80005ea:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80005ee:	4283      	cmp	r3, r0
 80005f0:	f000 808d 	beq.w	800070e <HAL_ADC_ConfigChannel+0x31e>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80005f4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80005f6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80005fa:	4283      	cmp	r3, r0
 80005fc:	f000 8091 	beq.w	8000722 <HAL_ADC_ConfigChannel+0x332>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000600:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000602:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000606:	4283      	cmp	r3, r0
 8000608:	d190      	bne.n	800052c <HAL_ADC_ConfigChannel+0x13c>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800060a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800060c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000610:	66e3      	str	r3, [r4, #108]	; 0x6c
 8000612:	e78b      	b.n	800052c <HAL_ADC_ConfigChannel+0x13c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000614:	4960      	ldr	r1, [pc, #384]	; (8000798 <HAL_ADC_ConfigChannel+0x3a8>)
 8000616:	428c      	cmp	r4, r1
 8000618:	d064      	beq.n	80006e4 <HAL_ADC_ConfigChannel+0x2f4>
 800061a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800061e:	428c      	cmp	r4, r1
 8000620:	d060      	beq.n	80006e4 <HAL_ADC_ConfigChannel+0x2f4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000622:	4e5e      	ldr	r6, [pc, #376]	; (800079c <HAL_ADC_ConfigChannel+0x3ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000624:	4d5e      	ldr	r5, [pc, #376]	; (80007a0 <HAL_ADC_ConfigChannel+0x3b0>)
 8000626:	68a8      	ldr	r0, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000628:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800062a:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800062e:	43c9      	mvns	r1, r1
 8000630:	f001 0101 	and.w	r1, r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000634:	2900      	cmp	r1, #0
 8000636:	d064      	beq.n	8000702 <HAL_ADC_ConfigChannel+0x312>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000638:	495a      	ldr	r1, [pc, #360]	; (80007a4 <HAL_ADC_ConfigChannel+0x3b4>)
 800063a:	428b      	cmp	r3, r1
 800063c:	f000 80be 	beq.w	80007bc <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000640:	4959      	ldr	r1, [pc, #356]	; (80007a8 <HAL_ADC_ConfigChannel+0x3b8>)
 8000642:	428b      	cmp	r3, r1
 8000644:	f000 80ea 	beq.w	800081c <HAL_ADC_ConfigChannel+0x42c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000648:	4958      	ldr	r1, [pc, #352]	; (80007ac <HAL_ADC_ConfigChannel+0x3bc>)
 800064a:	428b      	cmp	r3, r1
 800064c:	d188      	bne.n	8000560 <HAL_ADC_ConfigChannel+0x170>
            if (ADC_VREFINT_INSTANCE(hadc))
 800064e:	0243      	lsls	r3, r0, #9
 8000650:	d486      	bmi.n	8000560 <HAL_ADC_ConfigChannel+0x170>
 8000652:	4b52      	ldr	r3, [pc, #328]	; (800079c <HAL_ADC_ConfigChannel+0x3ac>)
 8000654:	429c      	cmp	r4, r3
 8000656:	d183      	bne.n	8000560 <HAL_ADC_ConfigChannel+0x170>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000658:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800065a:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800065e:	2000      	movs	r0, #0
 8000660:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000664:	430b      	orrs	r3, r1
 8000666:	60ab      	str	r3, [r5, #8]
 8000668:	e6d8      	b.n	800041c <HAL_ADC_ConfigChannel+0x2c>
 800066a:	f000 001f 	and.w	r0, r0, #31
 800066e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000672:	4083      	lsls	r3, r0
 8000674:	e755      	b.n	8000522 <HAL_ADC_ConfigChannel+0x132>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000676:	fa93 f0a3 	rbit	r0, r3
  if (value == 0U)
 800067a:	2800      	cmp	r0, #0
 800067c:	d064      	beq.n	8000748 <HAL_ADC_ConfigChannel+0x358>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800067e:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000682:	3001      	adds	r0, #1
 8000684:	f000 001f 	and.w	r0, r0, #31
 8000688:	2809      	cmp	r0, #9
 800068a:	d95d      	bls.n	8000748 <HAL_ADC_ConfigChannel+0x358>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800068c:	fa93 f5a3 	rbit	r5, r3
  if (value == 0U)
 8000690:	2d00      	cmp	r5, #0
 8000692:	f000 80b4 	beq.w	80007fe <HAL_ADC_ConfigChannel+0x40e>
  return __builtin_clz(value);
 8000696:	fab5 f585 	clz	r5, r5
 800069a:	3501      	adds	r5, #1
 800069c:	06ad      	lsls	r5, r5, #26
 800069e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a2:	fa93 f0a3 	rbit	r0, r3
  if (value == 0U)
 80006a6:	2800      	cmp	r0, #0
 80006a8:	f000 80ae 	beq.w	8000808 <HAL_ADC_ConfigChannel+0x418>
 80006ac:	2601      	movs	r6, #1
  return __builtin_clz(value);
 80006ae:	fab0 f080 	clz	r0, r0
 80006b2:	4430      	add	r0, r6
 80006b4:	f000 001f 	and.w	r0, r0, #31
 80006b8:	fa06 f000 	lsl.w	r0, r6, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006bc:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006be:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 809e 	beq.w	8000804 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80006c8:	fab3 f083 	clz	r0, r3
 80006cc:	3001      	adds	r0, #1
 80006ce:	f000 001f 	and.w	r0, r0, #31
 80006d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80006d6:	f1a0 031e 	sub.w	r3, r0, #30
 80006da:	051b      	lsls	r3, r3, #20
 80006dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006e0:	432b      	orrs	r3, r5
 80006e2:	e765      	b.n	80005b0 <HAL_ADC_ConfigChannel+0x1c0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006e4:	4932      	ldr	r1, [pc, #200]	; (80007b0 <HAL_ADC_ConfigChannel+0x3c0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006e6:	4e33      	ldr	r6, [pc, #204]	; (80007b4 <HAL_ADC_ConfigChannel+0x3c4>)
 80006e8:	4f2b      	ldr	r7, [pc, #172]	; (8000798 <HAL_ADC_ConfigChannel+0x3a8>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80006ea:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006ec:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006ee:	68bf      	ldr	r7, [r7, #8]
 80006f0:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006f2:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80006f6:	4339      	orrs	r1, r7
 80006f8:	f001 0101 	and.w	r1, r1, #1
 80006fc:	f081 0101 	eor.w	r1, r1, #1
 8000700:	e798      	b.n	8000634 <HAL_ADC_ConfigChannel+0x244>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000702:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000704:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000706:	f043 0320 	orr.w	r3, r3, #32
 800070a:	6553      	str	r3, [r2, #84]	; 0x54
 800070c:	e686      	b.n	800041c <HAL_ADC_ConfigChannel+0x2c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800070e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000710:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000714:	6660      	str	r0, [r4, #100]	; 0x64
 8000716:	e76d      	b.n	80005f4 <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000718:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800071a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800071e:	6620      	str	r0, [r4, #96]	; 0x60
 8000720:	e762      	b.n	80005e8 <HAL_ADC_ConfigChannel+0x1f8>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000722:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000724:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000728:	66a0      	str	r0, [r4, #104]	; 0x68
 800072a:	e769      	b.n	8000600 <HAL_ADC_ConfigChannel+0x210>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800072c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000730:	2701      	movs	r7, #1
 8000732:	0685      	lsls	r5, r0, #26
 8000734:	3b1e      	subs	r3, #30
 8000736:	fa07 f606 	lsl.w	r6, r7, r6
 800073a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800073e:	051b      	lsls	r3, r3, #20
 8000740:	4335      	orrs	r5, r6
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	e7cb      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x2f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000748:	fa93 f0a3 	rbit	r0, r3
  if (value == 0U)
 800074c:	2800      	cmp	r0, #0
 800074e:	d062      	beq.n	8000816 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8000750:	fab0 f080 	clz	r0, r0
 8000754:	3001      	adds	r0, #1
 8000756:	0680      	lsls	r0, r0, #26
 8000758:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800075c:	fa93 f5a3 	rbit	r5, r3
  if (value == 0U)
 8000760:	2d00      	cmp	r5, #0
 8000762:	d056      	beq.n	8000812 <HAL_ADC_ConfigChannel+0x422>
 8000764:	2601      	movs	r6, #1
  return __builtin_clz(value);
 8000766:	fab5 f585 	clz	r5, r5
 800076a:	4435      	add	r5, r6
 800076c:	f005 051f 	and.w	r5, r5, #31
 8000770:	fa06 f505 	lsl.w	r5, r6, r5
 8000774:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000776:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800077a:	2b00      	cmp	r3, #0
 800077c:	d046      	beq.n	800080c <HAL_ADC_ConfigChannel+0x41c>
  return __builtin_clz(value);
 800077e:	fab3 f383 	clz	r3, r3
 8000782:	3301      	adds	r3, #1
 8000784:	f003 031f 	and.w	r3, r3, #31
 8000788:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800078c:	051b      	lsls	r3, r3, #20
 800078e:	e70e      	b.n	80005ae <HAL_ADC_ConfigChannel+0x1be>
 8000790:	5c001000 	.word	0x5c001000
 8000794:	000fffff 	.word	0x000fffff
 8000798:	40022000 	.word	0x40022000
 800079c:	58026000 	.word	0x58026000
 80007a0:	58026300 	.word	0x58026300
 80007a4:	cb840000 	.word	0xcb840000
 80007a8:	c7520000 	.word	0xc7520000
 80007ac:	cfb80000 	.word	0xcfb80000
 80007b0:	40022300 	.word	0x40022300
 80007b4:	40022100 	.word	0x40022100
 80007b8:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80007bc:	0200      	lsls	r0, r0, #8
 80007be:	f53f aecf 	bmi.w	8000560 <HAL_ADC_ConfigChannel+0x170>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <HAL_ADC_ConfigChannel+0x44c>)
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f47f aecb 	bne.w	8000560 <HAL_ADC_ConfigChannel+0x170>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <HAL_ADC_ConfigChannel+0x450>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80007cc:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80007d0:	4c1c      	ldr	r4, [pc, #112]	; (8000844 <HAL_ADC_ConfigChannel+0x454>)
 80007d2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007d4:	68a8      	ldr	r0, [r5, #8]
 80007d6:	fbb3 f3f4 	udiv	r3, r3, r4
 80007da:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 80007de:	3301      	adds	r3, #1
 80007e0:	4301      	orrs	r1, r0
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	60a9      	str	r1, [r5, #8]
 80007e6:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 80007e8:	9b01      	ldr	r3, [sp, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f43f aeb8 	beq.w	8000560 <HAL_ADC_ConfigChannel+0x170>
                wait_loop_index--;
 80007f0:	9b01      	ldr	r3, [sp, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 80007f6:	9b01      	ldr	r3, [sp, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f9      	bne.n	80007f0 <HAL_ADC_ConfigChannel+0x400>
 80007fc:	e6b0      	b.n	8000560 <HAL_ADC_ConfigChannel+0x170>
  if (value == 0U)
 80007fe:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8000802:	e74e      	b.n	80006a2 <HAL_ADC_ConfigChannel+0x2b2>
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_ADC_ConfigChannel+0x458>)
 8000806:	e76b      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x2f0>
 8000808:	2002      	movs	r0, #2
 800080a:	e757      	b.n	80006bc <HAL_ADC_ConfigChannel+0x2cc>
 800080c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000810:	e6cd      	b.n	80005ae <HAL_ADC_ConfigChannel+0x1be>
 8000812:	2502      	movs	r5, #2
 8000814:	e7ae      	b.n	8000774 <HAL_ADC_ConfigChannel+0x384>
 8000816:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800081a:	e79f      	b.n	800075c <HAL_ADC_ConfigChannel+0x36c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800081c:	01c1      	lsls	r1, r0, #7
 800081e:	f53f ae9f 	bmi.w	8000560 <HAL_ADC_ConfigChannel+0x170>
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_ADC_ConfigChannel+0x44c>)
 8000824:	429c      	cmp	r4, r3
 8000826:	f47f ae9b 	bne.w	8000560 <HAL_ADC_ConfigChannel+0x170>
 800082a:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800082c:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000830:	2000      	movs	r0, #0
 8000832:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000836:	430b      	orrs	r3, r1
 8000838:	60ab      	str	r3, [r5, #8]
 800083a:	e5ef      	b.n	800041c <HAL_ADC_ConfigChannel+0x2c>
 800083c:	58026000 	.word	0x58026000
 8000840:	24000014 	.word	0x24000014
 8000844:	00030d40 	.word	0x00030d40
 8000848:	fe500000 	.word	0xfe500000

0800084c <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800084c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800084e:	6891      	ldr	r1, [r2, #8]
 8000850:	07cb      	lsls	r3, r1, #31
 8000852:	d501      	bpl.n	8000858 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000854:	2000      	movs	r0, #0
}
 8000856:	4770      	bx	lr
{
 8000858:	b570      	push	{r4, r5, r6, lr}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800085a:	4924      	ldr	r1, [pc, #144]	; (80008ec <ADC_Enable+0xa0>)
 800085c:	4604      	mov	r4, r0
 800085e:	6890      	ldr	r0, [r2, #8]
 8000860:	4208      	tst	r0, r1
 8000862:	d008      	beq.n	8000876 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000864:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR;
 8000866:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000868:	f042 0210 	orr.w	r2, r2, #16
 800086c:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800086e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000870:	4302      	orrs	r2, r0
 8000872:	65a2      	str	r2, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000874:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8000876:	6891      	ldr	r1, [r2, #8]
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <ADC_Enable+0xa4>)
 800087a:	400b      	ands	r3, r1
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8000882:	f7ff fd8d 	bl	80003a0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <ADC_Enable+0xa8>)
    tickstart = HAL_GetTick();
 800088a:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800088c:	4293      	cmp	r3, r2
 800088e:	d00c      	beq.n	80008aa <ADC_Enable+0x5e>
 8000890:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000894:	4293      	cmp	r3, r2
 8000896:	d008      	beq.n	80008aa <ADC_Enable+0x5e>
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <ADC_Enable+0xac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800089a:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800089c:	06d6      	lsls	r6, r2, #27
 800089e:	d006      	beq.n	80008ae <ADC_Enable+0x62>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80008a0:	4a16      	ldr	r2, [pc, #88]	; (80008fc <ADC_Enable+0xb0>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d103      	bne.n	80008ae <ADC_Enable+0x62>
  return HAL_OK;
 80008a6:	2000      	movs	r0, #0
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <ADC_Enable+0xb4>)
 80008ac:	e7f5      	b.n	800089a <ADC_Enable+0x4e>
  MODIFY_REG(ADCx->CR,
 80008ae:	4e10      	ldr	r6, [pc, #64]	; (80008f0 <ADC_Enable+0xa4>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	07d2      	lsls	r2, r2, #31
 80008b4:	d4f7      	bmi.n	80008a6 <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	07d0      	lsls	r0, r2, #31
 80008ba:	d404      	bmi.n	80008c6 <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	4032      	ands	r2, r6
 80008c0:	f042 0201 	orr.w	r2, r2, #1
 80008c4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80008c6:	f7ff fd6b 	bl	80003a0 <HAL_GetTick>
 80008ca:	1b40      	subs	r0, r0, r5
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80008cc:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80008ce:	2802      	cmp	r0, #2
 80008d0:	d9ee      	bls.n	80008b0 <ADC_Enable+0x64>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	07d1      	lsls	r1, r2, #31
 80008d6:	d4eb      	bmi.n	80008b0 <ADC_Enable+0x64>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80008da:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008e4:	4303      	orrs	r3, r0
 80008e6:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
 80008ea:	bf00      	nop
 80008ec:	8000003f 	.word	0x8000003f
 80008f0:	7fffffc0 	.word	0x7fffffc0
 80008f4:	40022000 	.word	0x40022000
 80008f8:	58026300 	.word	0x58026300
 80008fc:	40022100 	.word	0x40022100
 8000900:	40022300 	.word	0x40022300

08000904 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8000904:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000906:	4a53      	ldr	r2, [pc, #332]	; (8000a54 <ADC_ConfigureBoostMode+0x150>)
{
 8000908:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800090a:	6803      	ldr	r3, [r0, #0]
 800090c:	4293      	cmp	r3, r2
 800090e:	d027      	beq.n	8000960 <ADC_ConfigureBoostMode+0x5c>
 8000910:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000914:	4293      	cmp	r3, r2
 8000916:	d023      	beq.n	8000960 <ADC_ConfigureBoostMode+0x5c>
 8000918:	4b4f      	ldr	r3, [pc, #316]	; (8000a58 <ADC_ConfigureBoostMode+0x154>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000920:	bf14      	ite	ne
 8000922:	2301      	movne	r3, #1
 8000924:	2300      	moveq	r3, #0
 8000926:	b323      	cbz	r3, 8000972 <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000928:	f001 f9ce 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800092c:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 800092e:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8000930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000934:	d05e      	beq.n	80009f4 <ADC_ConfigureBoostMode+0xf0>
 8000936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800093a:	d074      	beq.n	8000a26 <ADC_ConfigureBoostMode+0x122>
 800093c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000940:	d058      	beq.n	80009f4 <ADC_ConfigureBoostMode+0xf0>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000942:	f7ff fd45 	bl	80003d0 <HAL_GetREVID>
 8000946:	f241 0303 	movw	r3, #4099	; 0x1003
 800094a:	4298      	cmp	r0, r3
 800094c:	d832      	bhi.n	80009b4 <ADC_ConfigureBoostMode+0xb0>
  {
    if (freq > 20000000UL)
 800094e:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <ADC_ConfigureBoostMode+0x158>)
 8000950:	429c      	cmp	r4, r3
 8000952:	d928      	bls.n	80009a6 <ADC_ConfigureBoostMode+0xa2>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000954:	682a      	ldr	r2, [r5, #0]
 8000956:	6893      	ldr	r3, [r2, #8]
 8000958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095c:	6093      	str	r3, [r2, #8]
 800095e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000960:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <ADC_ConfigureBoostMode+0x15c>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000968:	bf14      	ite	ne
 800096a:	2301      	movne	r3, #1
 800096c:	2300      	moveq	r3, #0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1da      	bne.n	8000928 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000972:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000976:	f002 fa43 	bl	8002e00 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800097a:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800097c:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 800097e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000982:	d045      	beq.n	8000a10 <ADC_ConfigureBoostMode+0x10c>
 8000984:	d93a      	bls.n	80009fc <ADC_ConfigureBoostMode+0xf8>
 8000986:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800098a:	d058      	beq.n	8000a3e <ADC_ConfigureBoostMode+0x13a>
 800098c:	d922      	bls.n	80009d4 <ADC_ConfigureBoostMode+0xd0>
 800098e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000992:	d052      	beq.n	8000a3a <ADC_ConfigureBoostMode+0x136>
 8000994:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000998:	d1d3      	bne.n	8000942 <ADC_ConfigureBoostMode+0x3e>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800099a:	f7ff fd19 	bl	80003d0 <HAL_GetREVID>
 800099e:	f241 0303 	movw	r3, #4099	; 0x1003
 80009a2:	4298      	cmp	r0, r3
 80009a4:	d805      	bhi.n	80009b2 <ADC_ConfigureBoostMode+0xae>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80009a6:	682a      	ldr	r2, [r5, #0]
 80009a8:	6893      	ldr	r3, [r2, #8]
 80009aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009ae:	6093      	str	r3, [r2, #8]
 80009b0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 80009b2:	0a24      	lsrs	r4, r4, #8
    }
  }
  else /* STM32H7 silicon Rev.V */
  {
    freq /= 2U; /* divider by 2 for Rev.V */
 80009b4:	0864      	lsrs	r4, r4, #1

    if (freq <= 6250000UL)
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <ADC_ConfigureBoostMode+0x160>)
 80009b8:	429c      	cmp	r4, r3
 80009ba:	d92e      	bls.n	8000a1a <ADC_ConfigureBoostMode+0x116>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <ADC_ConfigureBoostMode+0x164>)
 80009be:	429c      	cmp	r4, r3
 80009c0:	d910      	bls.n	80009e4 <ADC_ConfigureBoostMode+0xe0>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
    }
    else if (freq <= 25000000UL)
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <ADC_ConfigureBoostMode+0x168>)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80009c4:	682a      	ldr	r2, [r5, #0]
    else if (freq <= 25000000UL)
 80009c6:	429c      	cmp	r4, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80009c8:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 80009ca:	d92e      	bls.n	8000a2a <ADC_ConfigureBoostMode+0x126>
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80009cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80009d0:	6093      	str	r3, [r2, #8]
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80009d4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80009d8:	d02d      	beq.n	8000a36 <ADC_ConfigureBoostMode+0x132>
 80009da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80009de:	d1b0      	bne.n	8000942 <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 80009e0:	0944      	lsrs	r4, r0, #5
        break;
 80009e2:	e7ae      	b.n	8000942 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80009e4:	682a      	ldr	r2, [r5, #0]
 80009e6:	6893      	ldr	r3, [r2, #8]
 80009e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f0:	6093      	str	r3, [r2, #8]
 80009f2:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80009f4:	0c1b      	lsrs	r3, r3, #16
 80009f6:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 80009fa:	e7a2      	b.n	8000942 <ADC_ConfigureBoostMode+0x3e>
    switch (hadc->Init.ClockPrescaler)
 80009fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000a00:	d006      	beq.n	8000a10 <ADC_ConfigureBoostMode+0x10c>
 8000a02:	d81e      	bhi.n	8000a42 <ADC_ConfigureBoostMode+0x13e>
 8000a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000a08:	d002      	beq.n	8000a10 <ADC_ConfigureBoostMode+0x10c>
 8000a0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000a0e:	d198      	bne.n	8000942 <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000a10:	0c9b      	lsrs	r3, r3, #18
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000a18:	e793      	b.n	8000942 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000a1a:	682a      	ldr	r2, [r5, #0]
 8000a1c:	6893      	ldr	r3, [r2, #8]
 8000a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a22:	6093      	str	r3, [r2, #8]
 8000a24:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8000a26:	0884      	lsrs	r4, r0, #2
        break;
 8000a28:	e78b      	b.n	8000942 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6093      	str	r3, [r2, #8]
 8000a34:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 16UL;
 8000a36:	0904      	lsrs	r4, r0, #4
        break;
 8000a38:	e783      	b.n	8000942 <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8000a3a:	09c4      	lsrs	r4, r0, #7
        break;
 8000a3c:	e781      	b.n	8000942 <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8000a3e:	0984      	lsrs	r4, r0, #6
        break;
 8000a40:	e77f      	b.n	8000942 <ADC_ConfigureBoostMode+0x3e>
    switch (hadc->Init.ClockPrescaler)
 8000a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000a46:	d0e3      	beq.n	8000a10 <ADC_ConfigureBoostMode+0x10c>
 8000a48:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000a4c:	f47f af79 	bne.w	8000942 <ADC_ConfigureBoostMode+0x3e>
 8000a50:	e7de      	b.n	8000a10 <ADC_ConfigureBoostMode+0x10c>
 8000a52:	bf00      	nop
 8000a54:	40022000 	.word	0x40022000
 8000a58:	58026300 	.word	0x58026300
 8000a5c:	01312d00 	.word	0x01312d00
 8000a60:	40022300 	.word	0x40022300
 8000a64:	005f5e10 	.word	0x005f5e10
 8000a68:	00bebc20 	.word	0x00bebc20
 8000a6c:	017d7840 	.word	0x017d7840

08000a70 <HAL_ADC_Init>:
{
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8000a72:	2300      	movs	r3, #0
{
 8000a74:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8000a76:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	f000 80cc 	beq.w	8000c16 <HAL_ADC_Init+0x1a6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000a80:	4604      	mov	r4, r0
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80b5 	beq.w	8000bf2 <HAL_ADC_Init+0x182>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a88:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a8a:	6893      	ldr	r3, [r2, #8]
 8000a8c:	009d      	lsls	r5, r3, #2
 8000a8e:	d503      	bpl.n	8000a98 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a90:	6891      	ldr	r1, [r2, #8]
 8000a92:	4b72      	ldr	r3, [pc, #456]	; (8000c5c <HAL_ADC_Init+0x1ec>)
 8000a94:	400b      	ands	r3, r1
 8000a96:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a98:	6893      	ldr	r3, [r2, #8]
 8000a9a:	00d8      	lsls	r0, r3, #3
 8000a9c:	d416      	bmi.n	8000acc <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000a9e:	4b70      	ldr	r3, [pc, #448]	; (8000c60 <HAL_ADC_Init+0x1f0>)
 8000aa0:	4d70      	ldr	r5, [pc, #448]	; (8000c64 <HAL_ADC_Init+0x1f4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8000aa4:	6890      	ldr	r0, [r2, #8]
 8000aa6:	099b      	lsrs	r3, r3, #6
 8000aa8:	496f      	ldr	r1, [pc, #444]	; (8000c68 <HAL_ADC_Init+0x1f8>)
 8000aaa:	fba5 5303 	umull	r5, r3, r5, r3
 8000aae:	4001      	ands	r1, r0
 8000ab0:	099b      	lsrs	r3, r3, #6
 8000ab2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	6091      	str	r1, [r2, #8]
 8000aba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000abc:	9b01      	ldr	r3, [sp, #4]
 8000abe:	b12b      	cbz	r3, 8000acc <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8000ac0:	9b01      	ldr	r3, [sp, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1f9      	bne.n	8000ac0 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000acc:	6893      	ldr	r3, [r2, #8]
 8000ace:	00d9      	lsls	r1, r3, #3
 8000ad0:	d413      	bmi.n	8000afa <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ad2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000ad4:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000adc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ade:	432b      	orrs	r3, r5
 8000ae0:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ae2:	6893      	ldr	r3, [r2, #8]
 8000ae4:	075b      	lsls	r3, r3, #29
 8000ae6:	d50c      	bpl.n	8000b02 <HAL_ADC_Init+0x92>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aea:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000aec:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aee:	f043 0310 	orr.w	r3, r3, #16
}
 8000af2:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af4:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000af6:	b003      	add	sp, #12
 8000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afa:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afc:	2500      	movs	r5, #0
 8000afe:	075b      	lsls	r3, r3, #29
 8000b00:	d4f2      	bmi.n	8000ae8 <HAL_ADC_Init+0x78>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b04:	06db      	lsls	r3, r3, #27
 8000b06:	d4f0      	bmi.n	8000aea <HAL_ADC_Init+0x7a>
    ADC_STATE_CLR_SET(hadc->State,
 8000b08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b0a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b14:	6893      	ldr	r3, [r2, #8]
 8000b16:	07df      	lsls	r7, r3, #31
 8000b18:	d41a      	bmi.n	8000b50 <HAL_ADC_Init+0xe0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b1a:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <HAL_ADC_Init+0x1fc>)
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d009      	beq.n	8000b34 <HAL_ADC_Init+0xc4>
 8000b20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d005      	beq.n	8000b34 <HAL_ADC_Init+0xc4>
 8000b28:	4b51      	ldr	r3, [pc, #324]	; (8000c70 <HAL_ADC_Init+0x200>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	07d8      	lsls	r0, r3, #31
 8000b2e:	d40f      	bmi.n	8000b50 <HAL_ADC_Init+0xe0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b30:	4a50      	ldr	r2, [pc, #320]	; (8000c74 <HAL_ADC_Init+0x204>)
 8000b32:	e007      	b.n	8000b44 <HAL_ADC_Init+0xd4>
 8000b34:	4a4d      	ldr	r2, [pc, #308]	; (8000c6c <HAL_ADC_Init+0x1fc>)
 8000b36:	4b50      	ldr	r3, [pc, #320]	; (8000c78 <HAL_ADC_Init+0x208>)
 8000b38:	6892      	ldr	r2, [r2, #8]
 8000b3a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	07de      	lsls	r6, r3, #31
 8000b40:	d406      	bmi.n	8000b50 <HAL_ADC_Init+0xe0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b42:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b44:	6893      	ldr	r3, [r2, #8]
 8000b46:	6861      	ldr	r1, [r4, #4]
 8000b48:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000b50:	f7ff fc3e 	bl	80003d0 <HAL_GetREVID>
 8000b54:	f241 0303 	movw	r3, #4099	; 0x1003
 8000b58:	68a1      	ldr	r1, [r4, #8]
 8000b5a:	4298      	cmp	r0, r3
 8000b5c:	d84f      	bhi.n	8000bfe <HAL_ADC_Init+0x18e>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b5e:	7f23      	ldrb	r3, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b60:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b62:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b64:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000b66:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8000b6a:	4302      	orrs	r2, r0
 8000b6c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d055      	beq.n	8000c1e <HAL_ADC_Init+0x1ae>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b74:	b123      	cbz	r3, 8000b80 <HAL_ADC_Init+0x110>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b76:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000b7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000b7c:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b7e:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	493f      	ldr	r1, [pc, #252]	; (8000c80 <HAL_ADC_Init+0x210>)
 8000b84:	68d8      	ldr	r0, [r3, #12]
 8000b86:	4001      	ands	r1, r0
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b8c:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b8e:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b90:	f002 0204 	and.w	r2, r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b94:	0709      	lsls	r1, r1, #28
 8000b96:	d41c      	bmi.n	8000bd2 <HAL_ADC_Init+0x162>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b98:	b9da      	cbnz	r2, 8000bd2 <HAL_ADC_Init+0x162>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b9a:	68d9      	ldr	r1, [r3, #12]
 8000b9c:	4a39      	ldr	r2, [pc, #228]	; (8000c84 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b9e:	7d26      	ldrb	r6, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ba0:	400a      	ands	r2, r1
 8000ba2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (hadc->Init.OversamplingMode == ENABLE)
 8000ba4:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ba8:	ea42 3286 	orr.w	r2, r2, r6, lsl #14
      if (hadc->Init.OversamplingMode == ENABLE)
 8000bac:	2901      	cmp	r1, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000bae:	ea42 0200 	orr.w	r2, r2, r0
 8000bb2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000bb4:	d040      	beq.n	8000c38 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	f022 0201 	bic.w	r2, r2, #1
 8000bbc:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000bbe:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8000bc0:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bc4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8000bcc:	f7ff fe9a 	bl	8000904 <ADC_ConfigureBoostMode>
 8000bd0:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bd2:	68e2      	ldr	r2, [r4, #12]
 8000bd4:	2a01      	cmp	r2, #1
 8000bd6:	d027      	beq.n	8000c28 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bda:	f022 020f 	bic.w	r2, r2, #15
 8000bde:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000be0:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8000be2:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000be4:	f023 0303 	bic.w	r3, r3, #3
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000bee:	b003      	add	sp, #12
 8000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8000bf2:	f003 f927 	bl	8003e44 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf6:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000bf8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8000bfc:	e744      	b.n	8000a88 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000bfe:	2910      	cmp	r1, #16
 8000c00:	d1ad      	bne.n	8000b5e <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c04:	7d61      	ldrb	r1, [r4, #21]
 8000c06:	f043 021c 	orr.w	r2, r3, #28
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c0a:	7f23      	ldrb	r3, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c0c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000c10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c14:	e7ab      	b.n	8000b6e <HAL_ADC_Init+0xfe>
    return HAL_ERROR;
 8000c16:	2501      	movs	r5, #1
}
 8000c18:	4628      	mov	r0, r5
 8000c1a:	b003      	add	sp, #12
 8000c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c1e:	6a23      	ldr	r3, [r4, #32]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8000c26:	e7a4      	b.n	8000b72 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c2a:	69a2      	ldr	r2, [r4, #24]
 8000c2c:	f021 010f 	bic.w	r1, r1, #15
 8000c30:	3a01      	subs	r2, #1
 8000c32:	430a      	orrs	r2, r1
 8000c34:	631a      	str	r2, [r3, #48]	; 0x30
 8000c36:	e7d3      	b.n	8000be0 <HAL_ADC_Init+0x170>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000c38:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000c3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	691f      	ldr	r7, [r3, #16]
 8000c42:	4e11      	ldr	r6, [pc, #68]	; (8000c88 <HAL_ADC_Init+0x218>)
 8000c44:	f042 0201 	orr.w	r2, r2, #1
 8000c48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000c4a:	403e      	ands	r6, r7
 8000c4c:	4302      	orrs	r2, r0
 8000c4e:	3901      	subs	r1, #1
 8000c50:	4332      	orrs	r2, r6
 8000c52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	e7b1      	b.n	8000bbe <HAL_ADC_Init+0x14e>
 8000c5a:	bf00      	nop
 8000c5c:	5fffffc0 	.word	0x5fffffc0
 8000c60:	24000014 	.word	0x24000014
 8000c64:	053e2d63 	.word	0x053e2d63
 8000c68:	6fffffc0 	.word	0x6fffffc0
 8000c6c:	40022000 	.word	0x40022000
 8000c70:	58026000 	.word	0x58026000
 8000c74:	58026300 	.word	0x58026300
 8000c78:	40022100 	.word	0x40022100
 8000c7c:	40022300 	.word	0x40022300
 8000c80:	fff0c003 	.word	0xfff0c003
 8000c84:	ffffbffc 	.word	0xffffbffc
 8000c88:	fc00f81e 	.word	0xfc00f81e

08000c8c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c8c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d039      	beq.n	8000d08 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8000c94:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8000c96:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8000c98:	2001      	movs	r0, #1
{
 8000c9a:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000c9c:	4c27      	ldr	r4, [pc, #156]	; (8000d3c <HAL_ADCEx_MultiModeConfigChannel+0xb0>)
{
 8000c9e:	b09a      	sub	sp, #104	; 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000ca0:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8000ca2:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000ca4:	42a5      	cmp	r5, r4
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000ca6:	680e      	ldr	r6, [r1, #0]
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8000ca8:	9217      	str	r2, [sp, #92]	; 0x5c
  __HAL_LOCK(hadc);
 8000caa:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000cae:	d008      	beq.n	8000cc2 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb0:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb6:	f041 0120 	orr.w	r1, r1, #32
 8000cba:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000cbc:	b01a      	add	sp, #104	; 0x68
 8000cbe:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc0:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cc2:	4c1f      	ldr	r4, [pc, #124]	; (8000d40 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
 8000cc4:	68a0      	ldr	r0, [r4, #8]
 8000cc6:	68aa      	ldr	r2, [r5, #8]
      && (tmphadcSlave_conversion_on_going == 0UL))
 8000cc8:	0757      	lsls	r7, r2, #29
 8000cca:	d412      	bmi.n	8000cf2 <HAL_ADCEx_MultiModeConfigChannel+0x66>
 8000ccc:	0742      	lsls	r2, r0, #29
 8000cce:	d410      	bmi.n	8000cf2 <HAL_ADCEx_MultiModeConfigChannel+0x66>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000cd0:	b9e6      	cbnz	r6, 8000d0c <HAL_ADCEx_MultiModeConfigChannel+0x80>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8000cd4:	6891      	ldr	r1, [r2, #8]
 8000cd6:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8000cda:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cdc:	68a9      	ldr	r1, [r5, #8]
 8000cde:	68a0      	ldr	r0, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ce0:	4308      	orrs	r0, r1
 8000ce2:	f010 0001 	ands.w	r0, r0, #1
 8000ce6:	d126      	bne.n	8000d36 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000ce8:	6894      	ldr	r4, [r2, #8]
 8000cea:	4917      	ldr	r1, [pc, #92]	; (8000d48 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8000cec:	4021      	ands	r1, r4
 8000cee:	6091      	str	r1, [r2, #8]
 8000cf0:	e004      	b.n	8000cfc <HAL_ADCEx_MultiModeConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf6:	f042 0220 	orr.w	r2, r2, #32
 8000cfa:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000d02:	b01a      	add	sp, #104	; 0x68
 8000d04:	bcf0      	pop	{r4, r5, r6, r7}
 8000d06:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8000d08:	2002      	movs	r0, #2
 8000d0a:	4770      	bx	lr
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000d0c:	4f0d      	ldr	r7, [pc, #52]	; (8000d44 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8000d0e:	6848      	ldr	r0, [r1, #4]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000d16:	4302      	orrs	r2, r0
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	68aa      	ldr	r2, [r5, #8]
 8000d1c:	68a0      	ldr	r0, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d1e:	4310      	orrs	r0, r2
 8000d20:	f010 0001 	ands.w	r0, r0, #1
 8000d24:	d107      	bne.n	8000d36 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8000d26:	688a      	ldr	r2, [r1, #8]
 8000d28:	68bc      	ldr	r4, [r7, #8]
 8000d2a:	4907      	ldr	r1, [pc, #28]	; (8000d48 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8000d2c:	4316      	orrs	r6, r2
 8000d2e:	4021      	ands	r1, r4
 8000d30:	430e      	orrs	r6, r1
 8000d32:	60be      	str	r6, [r7, #8]
 8000d34:	e7e2      	b.n	8000cfc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d36:	2000      	movs	r0, #0
 8000d38:	e7e0      	b.n	8000cfc <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8000d3a:	bf00      	nop
 8000d3c:	40022000 	.word	0x40022000
 8000d40:	40022100 	.word	0x40022100
 8000d44:	40022300 	.word	0x40022300
 8000d48:	fffff0e0 	.word	0xfffff0e0

08000d4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4e:	0200      	lsls	r0, r0, #8
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d52:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000d5e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d64:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d66:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000d68:	60c8      	str	r0, [r1, #12]
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00
 8000d70:	05fa0000 	.word	0x05fa0000

08000d74 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d76:	b470      	push	{r4, r5, r6}
 8000d78:	68dc      	ldr	r4, [r3, #12]
 8000d7a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7e:	f1c4 0607 	rsb	r6, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	2e04      	cmp	r6, #4
 8000d86:	bf28      	it	cs
 8000d88:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d919      	bls.n	8000dc2 <HAL_NVIC_SetPriority+0x4e>
 8000d8e:	3c03      	subs	r4, #3
 8000d90:	2501      	movs	r5, #1
 8000d92:	40a5      	lsls	r5, r4
 8000d94:	3d01      	subs	r5, #1
 8000d96:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	2301      	movs	r3, #1
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	fa03 f306 	lsl.w	r3, r3, r6
 8000da0:	f103 33ff 	add.w	r3, r3, #4294967295
 8000da4:	ea01 0103 	and.w	r1, r1, r3
 8000da8:	fa01 f104 	lsl.w	r1, r1, r4
 8000dac:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000db0:	db0a      	blt.n	8000dc8 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	0109      	lsls	r1, r1, #4
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_NVIC_SetPriority+0x6c>)
 8000db6:	b2c9      	uxtb	r1, r1
 8000db8:	4403      	add	r3, r0
 8000dba:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000dbe:	bc70      	pop	{r4, r5, r6}
 8000dc0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4614      	mov	r4, r2
 8000dc6:	e7e7      	b.n	8000d98 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	f000 000f 	and.w	r0, r0, #15
 8000dcc:	0109      	lsls	r1, r1, #4
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_NVIC_SetPriority+0x70>)
 8000dd0:	b2c9      	uxtb	r1, r1
 8000dd2:	4403      	add	r3, r0
 8000dd4:	7619      	strb	r1, [r3, #24]
 8000dd6:	bc70      	pop	{r4, r5, r6}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ecfc 	.word	0xe000ecfc

08000de8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000de8:	2800      	cmp	r0, #0
 8000dea:	db07      	blt.n	8000dfc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dec:	2301      	movs	r3, #1
 8000dee:	f000 011f 	and.w	r1, r0, #31
 8000df2:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_NVIC_EnableIRQ+0x18>)
 8000df4:	0940      	lsrs	r0, r0, #5
 8000df6:	408b      	lsls	r3, r1
 8000df8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	3801      	subs	r0, #1
 8000e06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e0a:	d20d      	bcs.n	8000e28 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e10:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	25f0      	movs	r5, #240	; 0xf0
 8000e16:	4c06      	ldr	r4, [pc, #24]	; (8000e30 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e18:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000e24:	bc30      	pop	{r4, r5}
 8000e26:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e28:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e010 	.word	0xe000e010
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8000e34:	b188      	cbz	r0, 8000e5a <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000e36:	7903      	ldrb	r3, [r0, #4]
{
 8000e38:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 8000e3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e3e:	4604      	mov	r4, r0
 8000e40:	b13b      	cbz	r3, 8000e52 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e42:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e44:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000e46:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e48:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8000e4a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e4c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000e4e:	7122      	strb	r2, [r4, #4]
  return HAL_OK;
 8000e50:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8000e52:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8000e54:	f003 f882 	bl	8003f5c <HAL_DAC_MspInit>
 8000e58:	e7f3      	b.n	8000e42 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <HAL_DAC_ConfigChannel>:
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e60:	7943      	ldrb	r3, [r0, #5]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d048      	beq.n	8000ef8 <HAL_DAC_ConfigChannel+0x98>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e66:	2302      	movs	r3, #2
{
 8000e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e6c:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8000e6e:	6808      	ldr	r0, [r1, #0]
 8000e70:	4617      	mov	r7, r2
  __HAL_LOCK(hdac);
 8000e72:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000e74:	2804      	cmp	r0, #4
 8000e76:	460e      	mov	r6, r1
  __HAL_LOCK(hdac);
 8000e78:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e7a:	7123      	strb	r3, [r4, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000e7c:	d03e      	beq.n	8000efc <HAL_DAC_ConfigChannel+0x9c>
 8000e7e:	f007 0210 	and.w	r2, r7, #16
 8000e82:	6825      	ldr	r5, [r4, #0]
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000e84:	6933      	ldr	r3, [r6, #16]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d07a      	beq.n	8000f80 <HAL_DAC_ConfigChannel+0x120>
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000e8a:	2107      	movs	r1, #7
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000e8c:	68f7      	ldr	r7, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 8000e8e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000e90:	4091      	lsls	r1, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000e92:	2f01      	cmp	r7, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000e94:	ea23 0101 	bic.w	r1, r3, r1
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000e98:	d06f      	beq.n	8000f7a <HAL_DAC_ConfigChannel+0x11a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000e9a:	2f02      	cmp	r7, #2
 8000e9c:	68b7      	ldr	r7, [r6, #8]
 8000e9e:	d079      	beq.n	8000f94 <HAL_DAC_ConfigChannel+0x134>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000ea0:	fab7 f387 	clz	r3, r7
 8000ea4:	095b      	lsrs	r3, r3, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000ea6:	433b      	orrs	r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000ea8:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eac:	6876      	ldr	r6, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000eae:	f640 77fe 	movw	r7, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000eb2:	4303      	orrs	r3, r0
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000eb4:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000eb8:	4097      	lsls	r7, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eba:	4096      	lsls	r6, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ebc:	4093      	lsls	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ebe:	20c0      	movs	r0, #192	; 0xc0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ec0:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8000ec4:	f04f 0c01 	mov.w	ip, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ec8:	430b      	orrs	r3, r1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000eca:	fa00 f102 	lsl.w	r1, r0, r2

  /* Return function status */
  return HAL_OK;
 8000ece:	4670      	mov	r0, lr
  hdac->Instance->MCR = tmpreg1;
 8000ed0:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000ed2:	682b      	ldr	r3, [r5, #0]
 8000ed4:	ea23 0308 	bic.w	r3, r3, r8
 8000ed8:	602b      	str	r3, [r5, #0]
  tmpreg1 = hdac->Instance->CR;
 8000eda:	682b      	ldr	r3, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000edc:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ee0:	4333      	orrs	r3, r6
  hdac->Instance->CR = tmpreg1;
 8000ee2:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ee4:	682a      	ldr	r2, [r5, #0]
 8000ee6:	ea22 0201 	bic.w	r2, r2, r1
 8000eea:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000eec:	f884 c004 	strb.w	ip, [r4, #4]
  __HAL_UNLOCK(hdac);
 8000ef0:	f884 e005 	strb.w	lr, [r4, #5]
  return HAL_OK;
 8000ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdac);
 8000ef8:	2002      	movs	r0, #2
 8000efa:	4770      	bx	lr
    tickstart = HAL_GetTick();
 8000efc:	f7ff fa50 	bl	80003a0 <HAL_GetTick>
 8000f00:	4605      	mov	r5, r0
    if (Channel == DAC_CHANNEL_1)
 8000f02:	bb7f      	cbnz	r7, 8000f64 <HAL_DAC_ConfigChannel+0x104>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f04:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8000fac <HAL_DAC_ConfigChannel+0x14c>
 8000f08:	e004      	b.n	8000f14 <HAL_DAC_ConfigChannel+0xb4>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f0a:	f7ff fa49 	bl	80003a0 <HAL_GetTick>
 8000f0e:	1b40      	subs	r0, r0, r5
 8000f10:	2801      	cmp	r0, #1
 8000f12:	d841      	bhi.n	8000f98 <HAL_DAC_ConfigChannel+0x138>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f18:	ea13 0f08 	tst.w	r3, r8
 8000f1c:	d1f5      	bne.n	8000f0a <HAL_DAC_ConfigChannel+0xaa>
      HAL_Delay(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff fa44 	bl	80003ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f24:	6825      	ldr	r5, [r4, #0]
 8000f26:	69b3      	ldr	r3, [r6, #24]
 8000f28:	642b      	str	r3, [r5, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f2a:	f007 0210 	and.w	r2, r7, #16
 8000f2e:	f240 37ff 	movw	r7, #1023	; 0x3ff
 8000f32:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f34:	23ff      	movs	r3, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f36:	69f0      	ldr	r0, [r6, #28]
 8000f38:	4097      	lsls	r7, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f3a:	fa03 fe02 	lsl.w	lr, r3, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f3e:	ea21 0107 	bic.w	r1, r1, r7
 8000f42:	4090      	lsls	r0, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f44:	6a37      	ldr	r7, [r6, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f46:	4301      	orrs	r1, r0
 8000f48:	6830      	ldr	r0, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f4a:	4097      	lsls	r7, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f4c:	64a9      	str	r1, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f4e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000f50:	ea23 030e 	bic.w	r3, r3, lr
 8000f54:	433b      	orrs	r3, r7
 8000f56:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000f58:	e794      	b.n	8000e84 <HAL_DAC_ConfigChannel+0x24>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f5a:	f7ff fa21 	bl	80003a0 <HAL_GetTick>
 8000f5e:	1b40      	subs	r0, r0, r5
 8000f60:	2801      	cmp	r0, #1
 8000f62:	d819      	bhi.n	8000f98 <HAL_DAC_ConfigChannel+0x138>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dbf6      	blt.n	8000f5a <HAL_DAC_ConfigChannel+0xfa>
      HAL_Delay(1U);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fa1d 	bl	80003ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f72:	6825      	ldr	r5, [r4, #0]
 8000f74:	69b3      	ldr	r3, [r6, #24]
 8000f76:	646b      	str	r3, [r5, #68]	; 0x44
 8000f78:	e7d7      	b.n	8000f2a <HAL_DAC_ConfigChannel+0xca>
 8000f7a:	68b7      	ldr	r7, [r6, #8]
    connectOnChip = 0x00000000UL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e792      	b.n	8000ea6 <HAL_DAC_ConfigChannel+0x46>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000f80:	271f      	movs	r7, #31
    tmpreg1 = hdac->Instance->CCR;
 8000f82:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f84:	6973      	ldr	r3, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000f86:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f88:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000f8a:	ea21 0107 	bic.w	r1, r1, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f8e:	430b      	orrs	r3, r1
    hdac->Instance->CCR = tmpreg1;
 8000f90:	63ab      	str	r3, [r5, #56]	; 0x38
 8000f92:	e77a      	b.n	8000e8a <HAL_DAC_ConfigChannel+0x2a>
    connectOnChip = DAC_MCR_MODE1_0;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e786      	b.n	8000ea6 <HAL_DAC_ConfigChannel+0x46>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f98:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f9a:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8000fa0:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fa2:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fa4:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8000fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000faa:	bf00      	nop
 8000fac:	20008000 	.word	0x20008000

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fb4:	f8d1 e000 	ldr.w	lr, [r1]
{
 8000fb8:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fba:	f1be 0f00 	cmp.w	lr, #0
 8000fbe:	f000 80cb 	beq.w	8001158 <HAL_GPIO_Init+0x1a8>
 8000fc2:	2600      	movs	r6, #0
 8000fc4:	468c      	mov	ip, r1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fc6:	f8df b204 	ldr.w	fp, [pc, #516]	; 80011cc <HAL_GPIO_Init+0x21c>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fca:	4635      	mov	r5, r6
 8000fcc:	e09f      	b.n	800110e <HAL_GPIO_Init+0x15e>
 8000fce:	40b2      	lsls	r2, r6
 8000fd0:	43d2      	mvns	r2, r2
      temp = GPIOx->PUPDR;
 8000fd2:	68c4      	ldr	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd4:	f1b8 0f02 	cmp.w	r8, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	f8dc 3008 	ldr.w	r3, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fdc:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe0:	fa03 f306 	lsl.w	r3, r3, r6
 8000fe4:	ea43 0304 	orr.w	r3, r3, r4
      GPIOx->PUPDR = temp;
 8000fe8:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fea:	d113      	bne.n	8001014 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	08ec      	lsrs	r4, r5, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fee:	f005 0907 	and.w	r9, r5, #7
 8000ff2:	f04f 080f 	mov.w	r8, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ff6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8000ffa:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ffe:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001002:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001004:	fa08 f809 	lsl.w	r8, r8, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001008:	fa03 f309 	lsl.w	r3, r3, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800100c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001010:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001012:	6223      	str	r3, [r4, #32]
      temp = GPIOx->MODER;
 8001014:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001016:	f001 0303 	and.w	r3, r1, #3
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101a:	00cf      	lsls	r7, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800101c:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	461a      	mov	r2, r3
 8001022:	fa02 f206 	lsl.w	r2, r2, r6
 8001026:	ea42 0204 	orr.w	r2, r2, r4
      GPIOx->MODER = temp;
 800102a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102c:	d56a      	bpl.n	8001104 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_GPIO_Init+0x1f4>)
 8001030:	f025 0403 	bic.w	r4, r5, #3
 8001034:	4a5b      	ldr	r2, [pc, #364]	; (80011a4 <HAL_GPIO_Init+0x1f4>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001036:	f04f 080f 	mov.w	r8, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
 800103e:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001042:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	f047 0702 	orr.w	r7, r7, #2
 800104a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800104e:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	f8c2 70f4 	str.w	r7, [r2, #244]	; 0xf4
 8001054:	f8d2 70f4 	ldr.w	r7, [r2, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001058:	fa08 f803 	lsl.w	r8, r8, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	f007 0702 	and.w	r7, r7, #2
 8001060:	9701      	str	r7, [sp, #4]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001062:	4f51      	ldr	r7, [pc, #324]	; (80011a8 <HAL_GPIO_Init+0x1f8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001064:	9a01      	ldr	r2, [sp, #4]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001066:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8001068:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800106a:	ea22 0208 	bic.w	r2, r2, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800106e:	d076      	beq.n	800115e <HAL_GPIO_Init+0x1ae>
 8001070:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001074:	42b8      	cmp	r0, r7
 8001076:	d074      	beq.n	8001162 <HAL_GPIO_Init+0x1b2>
 8001078:	4f4c      	ldr	r7, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x1fc>)
 800107a:	42b8      	cmp	r0, r7
 800107c:	d075      	beq.n	800116a <HAL_GPIO_Init+0x1ba>
 800107e:	4f4c      	ldr	r7, [pc, #304]	; (80011b0 <HAL_GPIO_Init+0x200>)
 8001080:	42b8      	cmp	r0, r7
 8001082:	d076      	beq.n	8001172 <HAL_GPIO_Init+0x1c2>
 8001084:	4f4b      	ldr	r7, [pc, #300]	; (80011b4 <HAL_GPIO_Init+0x204>)
 8001086:	42b8      	cmp	r0, r7
 8001088:	d077      	beq.n	800117a <HAL_GPIO_Init+0x1ca>
 800108a:	4f4b      	ldr	r7, [pc, #300]	; (80011b8 <HAL_GPIO_Init+0x208>)
 800108c:	42b8      	cmp	r0, r7
 800108e:	d078      	beq.n	8001182 <HAL_GPIO_Init+0x1d2>
 8001090:	4f4a      	ldr	r7, [pc, #296]	; (80011bc <HAL_GPIO_Init+0x20c>)
 8001092:	42b8      	cmp	r0, r7
 8001094:	d079      	beq.n	800118a <HAL_GPIO_Init+0x1da>
 8001096:	4f4a      	ldr	r7, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x210>)
 8001098:	42b8      	cmp	r0, r7
 800109a:	d07a      	beq.n	8001192 <HAL_GPIO_Init+0x1e2>
 800109c:	4f49      	ldr	r7, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x214>)
 800109e:	42b8      	cmp	r0, r7
 80010a0:	d07b      	beq.n	800119a <HAL_GPIO_Init+0x1ea>
 80010a2:	4f49      	ldr	r7, [pc, #292]	; (80011c8 <HAL_GPIO_Init+0x218>)
 80010a4:	42b8      	cmp	r0, r7
 80010a6:	bf0c      	ite	eq
 80010a8:	2709      	moveq	r7, #9
 80010aa:	270a      	movne	r7, #10
 80010ac:	fa07 f303 	lsl.w	r3, r7, r3
 80010b0:	4313      	orrs	r3, r2
        temp &= ~(iocurrent);
 80010b2:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b6:	60a3      	str	r3, [r4, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b8:	03cc      	lsls	r4, r1, #15
        temp = EXTI_CurrentCPU->IMR1;
 80010ba:	f8db 3000 	ldr.w	r3, [fp]
        temp &= ~(iocurrent);
 80010be:	bf54      	ite	pl
 80010c0:	403b      	andpl	r3, r7
        {
          temp |= iocurrent;
 80010c2:	ea4a 0303 	orrmi.w	r3, sl, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c6:	038a      	lsls	r2, r1, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 80010cc:	f8cb 3000 	str.w	r3, [fp]
        temp = EXTI_CurrentCPU->EMR1;
 80010d0:	f8db 3004 	ldr.w	r3, [fp, #4]
        temp &= ~(iocurrent);
 80010d4:	bf54      	ite	pl
 80010d6:	403b      	andpl	r3, r7
          temp |= iocurrent;
 80010d8:	ea4a 0303 	orrmi.w	r3, sl, r3
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010dc:	02cc      	lsls	r4, r1, #11
        EXTI_CurrentCPU->EMR1 = temp;
 80010de:	f8cb 3004 	str.w	r3, [fp, #4]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp = EXTI->RTSR1;
 80010e6:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 80010e8:	bf54      	ite	pl
 80010ea:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80010ec:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 80010f0:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f2:	028a      	lsls	r2, r1, #10
        temp = EXTI->FTSR1;
 80010f4:	685b      	ldr	r3, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80010f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80010fa:	bf54      	ite	pl
 80010fc:	403b      	andpl	r3, r7
          temp |= iocurrent;
 80010fe:	ea4a 0303 	orrmi.w	r3, sl, r3
        EXTI->FTSR1 = temp;
 8001102:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001104:	3501      	adds	r5, #1
 8001106:	3602      	adds	r6, #2
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001108:	fa3e f305 	lsrs.w	r3, lr, r5
 800110c:	d024      	beq.n	8001158 <HAL_GPIO_Init+0x1a8>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800110e:	2301      	movs	r3, #1
 8001110:	40ab      	lsls	r3, r5
    if (iocurrent != 0x00U)
 8001112:	ea13 0a0e 	ands.w	sl, r3, lr
 8001116:	d0f5      	beq.n	8001104 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001118:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800111c:	f021 0810 	bic.w	r8, r1, #16
 8001120:	f108 32ff 	add.w	r2, r8, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001124:	2a01      	cmp	r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001126:	f04f 0203 	mov.w	r2, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112a:	f63f af50 	bhi.w	8000fce <HAL_GPIO_Init+0x1e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800112e:	40b2      	lsls	r2, r6
        temp = GPIOx->OSPEEDR;
 8001130:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001134:	f8dc 700c 	ldr.w	r7, [ip, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001138:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800113c:	43d2      	mvns	r2, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113e:	40b7      	lsls	r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001140:	40ac      	lsls	r4, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001142:	ea09 0902 	and.w	r9, r9, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800114a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800114c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114e:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001152:	431c      	orrs	r4, r3
        GPIOx->OTYPER = temp;
 8001154:	6044      	str	r4, [r0, #4]
 8001156:	e73c      	b.n	8000fd2 <HAL_GPIO_Init+0x22>
  }
}
 8001158:	b003      	add	sp, #12
 800115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800115e:	2300      	movs	r3, #0
 8001160:	e7a6      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 8001162:	2701      	movs	r7, #1
 8001164:	fa07 f303 	lsl.w	r3, r7, r3
 8001168:	e7a2      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 800116a:	2702      	movs	r7, #2
 800116c:	fa07 f303 	lsl.w	r3, r7, r3
 8001170:	e79e      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 8001172:	2703      	movs	r7, #3
 8001174:	fa07 f303 	lsl.w	r3, r7, r3
 8001178:	e79a      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 800117a:	2704      	movs	r7, #4
 800117c:	fa07 f303 	lsl.w	r3, r7, r3
 8001180:	e796      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 8001182:	2705      	movs	r7, #5
 8001184:	fa07 f303 	lsl.w	r3, r7, r3
 8001188:	e792      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 800118a:	2706      	movs	r7, #6
 800118c:	fa07 f303 	lsl.w	r3, r7, r3
 8001190:	e78e      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 8001192:	2707      	movs	r7, #7
 8001194:	fa07 f303 	lsl.w	r3, r7, r3
 8001198:	e78a      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 800119a:	2708      	movs	r7, #8
 800119c:	fa07 f303 	lsl.w	r3, r7, r3
 80011a0:	e786      	b.n	80010b0 <HAL_GPIO_Init+0x100>
 80011a2:	bf00      	nop
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58020000 	.word	0x58020000
 80011ac:	58020800 	.word	0x58020800
 80011b0:	58020c00 	.word	0x58020c00
 80011b4:	58021000 	.word	0x58021000
 80011b8:	58021400 	.word	0x58021400
 80011bc:	58021800 	.word	0x58021800
 80011c0:	58021c00 	.word	0x58021c00
 80011c4:	58022000 	.word	0x58022000
 80011c8:	58022400 	.word	0x58022400
 80011cc:	58000080 	.word	0x58000080

080011d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d0:	b902      	cbnz	r2, 80011d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011d2:	0409      	lsls	r1, r1, #16
 80011d4:	6181      	str	r1, [r0, #24]
 80011d6:	4770      	bx	lr

080011d8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011d8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011da:	ea03 0201 	and.w	r2, r3, r1
 80011de:	ea21 0103 	bic.w	r1, r1, r3
 80011e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80011e6:	6181      	str	r1, [r0, #24]
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80011ec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_PWREx_ConfigSupply+0x48>)
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	0752      	lsls	r2, r2, #29
 80011f4:	d406      	bmi.n	8001204 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011fc:	1a18      	subs	r0, r3, r0
 80011fe:	bf18      	it	ne
 8001200:	2001      	movne	r0, #1
 8001202:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001204:	68da      	ldr	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001206:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001208:	f022 0207 	bic.w	r2, r2, #7
 800120c:	4310      	orrs	r0, r2
 800120e:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8001210:	f7ff f8c6 	bl	80003a0 <HAL_GetTick>
 8001214:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001216:	e005      	b.n	8001224 <HAL_PWREx_ConfigSupply+0x38>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001218:	f7ff f8c2 	bl	80003a0 <HAL_GetTick>
 800121c:	1b40      	subs	r0, r0, r5
 800121e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001222:	d804      	bhi.n	800122e <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001224:	6863      	ldr	r3, [r4, #4]
 8001226:	049b      	lsls	r3, r3, #18
 8001228:	d5f6      	bpl.n	8001218 <HAL_PWREx_ConfigSupply+0x2c>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800122a:	2000      	movs	r0, #0
 800122c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800122e:	2001      	movs	r0, #1
}
 8001230:	bd38      	pop	{r3, r4, r5, pc}
 8001232:	bf00      	nop
 8001234:	58024800 	.word	0x58024800

08001238 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001238:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800123a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800123c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001240:	f3c0 1005 	ubfx	r0, r0, #4, #6
uint32_t HAL_RCC_GetSysClockFreq(void)
 8001244:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001246:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    if (pllm != 0U)
 8001248:	b3c0      	cbz	r0, 80012bc <HAL_RCC_GetSysClockFreq.part.0+0x84>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800124a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800124e:	f002 0201 	and.w	r2, r2, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001252:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001256:	fb02 f204 	mul.w	r2, r2, r4
    {
      switch (pllsource)
 800125a:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800125c:	ee07 2a90 	vmov	s15, r2
 8001260:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
      switch (pllsource)
 8001264:	d002      	beq.n	800126c <HAL_RCC_GetSysClockFreq.part.0+0x34>
 8001266:	d333      	bcc.n	80012d0 <HAL_RCC_GetSysClockFreq.part.0+0x98>
 8001268:	2902      	cmp	r1, #2
 800126a:	d02a      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq.part.0+0x8a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800126c:	ee07 0a90 	vmov	s15, r0
 8001270:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800132c <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8001274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800127e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8001330 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8001282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001286:	ee07 3a10 	vmov	s14, r3
 800128a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800128e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001292:	ee37 7a05 	vadd.f32	s14, s14, s10
 8001296:	eea6 7a25 	vfma.f32	s14, s12, s11
 800129a:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80012a6:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b8:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80012bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012c0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80012c2:	ee07 0a90 	vmov	s15, r0
 80012c6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001334 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	e7d3      	b.n	8001278 <HAL_RCC_GetSysClockFreq.part.0+0x40>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	0692      	lsls	r2, r2, #26
 80012d4:	d520      	bpl.n	8001318 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80012d6:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80012d8:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80012de:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80012e2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80012e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80012ec:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80012ee:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8001330 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80012f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f6:	ee06 2a90 	vmov	s13, r2
 80012fa:	ee07 3a10 	vmov	s14, r3
 80012fe:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8001302:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001306:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800130a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800130e:	eea6 7a05 	vfma.f32	s14, s12, s10
 8001312:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001316:	e7c2      	b.n	800129e <HAL_RCC_GetSysClockFreq.part.0+0x66>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001318:	ee07 0a90 	vmov	s15, r0
 800131c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800133c <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	e7a8      	b.n	8001278 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8001326:	bf00      	nop
 8001328:	58024400 	.word	0x58024400
 800132c:	4a742400 	.word	0x4a742400
 8001330:	39000000 	.word	0x39000000
 8001334:	4af42400 	.word	0x4af42400
 8001338:	03d09000 	.word	0x03d09000
 800133c:	4c742400 	.word	0x4c742400

08001340 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001340:	2800      	cmp	r0, #0
 8001342:	f000 82ab 	beq.w	800189c <HAL_RCC_OscConfig+0x55c>
{
 8001346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001348:	6803      	ldr	r3, [r0, #0]
 800134a:	4604      	mov	r4, r0
 800134c:	07d9      	lsls	r1, r3, #31
 800134e:	d52e      	bpl.n	80013ae <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001350:	49b3      	ldr	r1, [pc, #716]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 8001352:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001354:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001356:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800135a:	2a10      	cmp	r2, #16
 800135c:	f000 8195 	beq.w	800168a <HAL_RCC_OscConfig+0x34a>
 8001360:	2a18      	cmp	r2, #24
 8001362:	f000 818d 	beq.w	8001680 <HAL_RCC_OscConfig+0x340>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	f000 81be 	beq.w	80016ec <HAL_RCC_OscConfig+0x3ac>
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8111 	beq.w	8001598 <HAL_RCC_OscConfig+0x258>
 8001376:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800137a:	4ba9      	ldr	r3, [pc, #676]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f000 821a 	beq.w	80017b6 <HAL_RCC_OscConfig+0x476>
 8001382:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800138e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001390:	f7ff f806 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001394:	4da2      	ldr	r5, [pc, #648]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
        tickstart = HAL_GetTick();
 8001396:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001398:	e005      	b.n	80013a6 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139a:	f7ff f801 	bl	80003a0 <HAL_GetTick>
 800139e:	1b80      	subs	r0, r0, r6
 80013a0:	2864      	cmp	r0, #100	; 0x64
 80013a2:	f200 816b 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	039f      	lsls	r7, r3, #14
 80013aa:	d5f6      	bpl.n	800139a <HAL_RCC_OscConfig+0x5a>
 80013ac:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	0799      	lsls	r1, r3, #30
 80013b0:	d534      	bpl.n	800141c <HAL_RCC_OscConfig+0xdc>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b2:	4a9b      	ldr	r2, [pc, #620]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 80013b4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013b8:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80013bc:	f000 80bd 	beq.w	800153a <HAL_RCC_OscConfig+0x1fa>
 80013c0:	2b18      	cmp	r3, #24
 80013c2:	f000 80b7 	beq.w	8001534 <HAL_RCC_OscConfig+0x1f4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c6:	68e2      	ldr	r2, [r4, #12]
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	f000 8195 	beq.w	80016f8 <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013ce:	4994      	ldr	r1, [pc, #592]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 80013d0:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d2:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013d4:	f023 0319 	bic.w	r3, r3, #25
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80013dc:	f7fe ffe0 	bl	80003a0 <HAL_GetTick>
 80013e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e2:	e005      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e4:	f7fe ffdc 	bl	80003a0 <HAL_GetTick>
 80013e8:	1b80      	subs	r0, r0, r6
 80013ea:	2802      	cmp	r0, #2
 80013ec:	f200 8146 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	075f      	lsls	r7, r3, #29
 80013f4:	d5f6      	bpl.n	80013e4 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	f7fe ffeb 	bl	80003d0 <HAL_GetREVID>
 80013fa:	f241 0303 	movw	r3, #4099	; 0x1003
 80013fe:	4298      	cmp	r0, r3
 8001400:	f200 8257 	bhi.w	80018b2 <HAL_RCC_OscConfig+0x572>
 8001404:	6922      	ldr	r2, [r4, #16]
 8001406:	686b      	ldr	r3, [r5, #4]
 8001408:	2a40      	cmp	r2, #64	; 0x40
 800140a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800140e:	bf0c      	ite	eq
 8001410:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8001414:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8001418:	606b      	str	r3, [r5, #4]
 800141a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800141c:	06d9      	lsls	r1, r3, #27
 800141e:	d534      	bpl.n	800148a <HAL_RCC_OscConfig+0x14a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001420:	4a7f      	ldr	r2, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 8001422:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001424:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001426:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800142a:	2b08      	cmp	r3, #8
 800142c:	f000 810a 	beq.w	8001644 <HAL_RCC_OscConfig+0x304>
 8001430:	2b18      	cmp	r3, #24
 8001432:	f000 8102 	beq.w	800163a <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001436:	69e3      	ldr	r3, [r4, #28]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8130 	beq.w	800169e <HAL_RCC_OscConfig+0x35e>
        __HAL_RCC_CSI_ENABLE();
 800143e:	4b78      	ldr	r3, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 8001440:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001442:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8001444:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001448:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800144a:	f7fe ffa9 	bl	80003a0 <HAL_GetTick>
 800144e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001450:	e005      	b.n	800145e <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001452:	f7fe ffa5 	bl	80003a0 <HAL_GetTick>
 8001456:	1b80      	subs	r0, r0, r6
 8001458:	2802      	cmp	r0, #2
 800145a:	f200 810f 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	d5f6      	bpl.n	8001452 <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001464:	f7fe ffb4 	bl	80003d0 <HAL_GetREVID>
 8001468:	f241 0303 	movw	r3, #4099	; 0x1003
 800146c:	4298      	cmp	r0, r3
 800146e:	f200 816b 	bhi.w	8001748 <HAL_RCC_OscConfig+0x408>
 8001472:	6a22      	ldr	r2, [r4, #32]
 8001474:	686b      	ldr	r3, [r5, #4]
 8001476:	2a20      	cmp	r2, #32
 8001478:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800147c:	bf0c      	ite	eq
 800147e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001482:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8001486:	606b      	str	r3, [r5, #4]
 8001488:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	071d      	lsls	r5, r3, #28
 800148c:	d516      	bpl.n	80014bc <HAL_RCC_OscConfig+0x17c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	6963      	ldr	r3, [r4, #20]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d06e      	beq.n	8001572 <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 8001494:	4b62      	ldr	r3, [pc, #392]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 8001496:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001498:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80014a0:	f7fe ff7e 	bl	80003a0 <HAL_GetTick>
 80014a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014a6:	e005      	b.n	80014b4 <HAL_RCC_OscConfig+0x174>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a8:	f7fe ff7a 	bl	80003a0 <HAL_GetTick>
 80014ac:	1b80      	subs	r0, r0, r6
 80014ae:	2802      	cmp	r0, #2
 80014b0:	f200 80e4 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014b6:	0798      	lsls	r0, r3, #30
 80014b8:	d5f6      	bpl.n	80014a8 <HAL_RCC_OscConfig+0x168>
 80014ba:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014bc:	069a      	lsls	r2, r3, #26
 80014be:	d517      	bpl.n	80014f0 <HAL_RCC_OscConfig+0x1b0>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014c0:	69a3      	ldr	r3, [r4, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80ff 	beq.w	80016c6 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSI48_ENABLE();
 80014c8:	4b55      	ldr	r3, [pc, #340]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 80014ca:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014cc:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 80014ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014d4:	f7fe ff64 	bl	80003a0 <HAL_GetTick>
 80014d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014da:	e005      	b.n	80014e8 <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014dc:	f7fe ff60 	bl	80003a0 <HAL_GetTick>
 80014e0:	1b80      	subs	r0, r0, r6
 80014e2:	2802      	cmp	r0, #2
 80014e4:	f200 80ca 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	049f      	lsls	r7, r3, #18
 80014ec:	d5f6      	bpl.n	80014dc <HAL_RCC_OscConfig+0x19c>
 80014ee:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	0759      	lsls	r1, r3, #29
 80014f2:	d468      	bmi.n	80015c6 <HAL_RCC_OscConfig+0x286>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014f6:	b1d8      	cbz	r0, 8001530 <HAL_RCC_OscConfig+0x1f0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80014f8:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001500:	2a18      	cmp	r2, #24
 8001502:	f000 812a 	beq.w	800175a <HAL_RCC_OscConfig+0x41a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001506:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001508:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800150a:	f000 815c 	beq.w	80017c6 <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_PLL_DISABLE();
 800150e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001512:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8001514:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001516:	f7fe ff43 	bl	80003a0 <HAL_GetTick>
 800151a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800151c:	e005      	b.n	800152a <HAL_RCC_OscConfig+0x1ea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7fe ff3f 	bl	80003a0 <HAL_GetTick>
 8001522:	1b40      	subs	r0, r0, r5
 8001524:	2802      	cmp	r0, #2
 8001526:	f200 80a9 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	d4f6      	bmi.n	800151e <HAL_RCC_OscConfig+0x1de>
  return HAL_OK;
 8001530:	2000      	movs	r0, #0
 8001532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001534:	0792      	lsls	r2, r2, #30
 8001536:	f47f af46 	bne.w	80013c6 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	075b      	lsls	r3, r3, #29
 8001540:	d503      	bpl.n	800154a <HAL_RCC_OscConfig+0x20a>
 8001542:	68e3      	ldr	r3, [r4, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8084 	beq.w	8001652 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	f7fe ff41 	bl	80003d0 <HAL_GetREVID>
 800154e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001552:	4298      	cmp	r0, r3
 8001554:	f200 80e4 	bhi.w	8001720 <HAL_RCC_OscConfig+0x3e0>
 8001558:	6922      	ldr	r2, [r4, #16]
 800155a:	2a40      	cmp	r2, #64	; 0x40
 800155c:	f000 81a0 	beq.w	80018a0 <HAL_RCC_OscConfig+0x560>
 8001560:	492f      	ldr	r1, [pc, #188]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 8001562:	684b      	ldr	r3, [r1, #4]
 8001564:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001568:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800156c:	604b      	str	r3, [r1, #4]
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	e754      	b.n	800141c <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 8001574:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001576:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800157e:	f7fe ff0f 	bl	80003a0 <HAL_GetTick>
 8001582:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001584:	e004      	b.n	8001590 <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001586:	f7fe ff0b 	bl	80003a0 <HAL_GetTick>
 800158a:	1b80      	subs	r0, r0, r6
 800158c:	2802      	cmp	r0, #2
 800158e:	d875      	bhi.n	800167c <HAL_RCC_OscConfig+0x33c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001590:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001592:	0799      	lsls	r1, r3, #30
 8001594:	d4f7      	bmi.n	8001586 <HAL_RCC_OscConfig+0x246>
 8001596:	e790      	b.n	80014ba <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 800159a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800159c:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015ac:	f7fe fef8 	bl	80003a0 <HAL_GetTick>
 80015b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015b2:	e004      	b.n	80015be <HAL_RCC_OscConfig+0x27e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7fe fef4 	bl	80003a0 <HAL_GetTick>
 80015b8:	1b80      	subs	r0, r0, r6
 80015ba:	2864      	cmp	r0, #100	; 0x64
 80015bc:	d85e      	bhi.n	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	0398      	lsls	r0, r3, #14
 80015c2:	d4f7      	bmi.n	80015b4 <HAL_RCC_OscConfig+0x274>
 80015c4:	e6f2      	b.n	80013ac <HAL_RCC_OscConfig+0x6c>
    PWR->CR1 |= PWR_CR1_DBP;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_RCC_OscConfig+0x2e4>)
 80015c8:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ca:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80015cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80015d2:	f7fe fee5 	bl	80003a0 <HAL_GetTick>
 80015d6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015d8:	e004      	b.n	80015e4 <HAL_RCC_OscConfig+0x2a4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015da:	f7fe fee1 	bl	80003a0 <HAL_GetTick>
 80015de:	1b80      	subs	r0, r0, r6
 80015e0:	2864      	cmp	r0, #100	; 0x64
 80015e2:	d84b      	bhi.n	800167c <HAL_RCC_OscConfig+0x33c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	05da      	lsls	r2, r3, #23
 80015e8:	d5f7      	bpl.n	80015da <HAL_RCC_OscConfig+0x29a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ea:	68a3      	ldr	r3, [r4, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	f000 8189 	beq.w	8001904 <HAL_RCC_OscConfig+0x5c4>
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8166 	beq.w	80018c4 <HAL_RCC_OscConfig+0x584>
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
 80015fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015fe:	f000 8190 	beq.w	8001922 <HAL_RCC_OscConfig+0x5e2>
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	671a      	str	r2, [r3, #112]	; 0x70
 8001608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001610:	f7fe fec6 	bl	80003a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001614:	4d02      	ldr	r5, [pc, #8]	; (8001620 <HAL_RCC_OscConfig+0x2e0>)
      tickstart = HAL_GetTick();
 8001616:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800161c:	e009      	b.n	8001632 <HAL_RCC_OscConfig+0x2f2>
 800161e:	bf00      	nop
 8001620:	58024400 	.word	0x58024400
 8001624:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7fe feba 	bl	80003a0 <HAL_GetTick>
 800162c:	1bc0      	subs	r0, r0, r7
 800162e:	42b0      	cmp	r0, r6
 8001630:	d824      	bhi.n	800167c <HAL_RCC_OscConfig+0x33c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001632:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001634:	079b      	lsls	r3, r3, #30
 8001636:	d5f7      	bpl.n	8001628 <HAL_RCC_OscConfig+0x2e8>
 8001638:	e75c      	b.n	80014f4 <HAL_RCC_OscConfig+0x1b4>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	2a01      	cmp	r2, #1
 8001640:	f47f aef9 	bne.w	8001436 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001644:	4bac      	ldr	r3, [pc, #688]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	05da      	lsls	r2, r3, #23
 800164a:	d504      	bpl.n	8001656 <HAL_RCC_OscConfig+0x316>
 800164c:	69e3      	ldr	r3, [r4, #28]
 800164e:	2b80      	cmp	r3, #128	; 0x80
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x316>
        return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
 8001654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001656:	f7fe febb 	bl	80003d0 <HAL_GetREVID>
 800165a:	f241 0303 	movw	r3, #4099	; 0x1003
 800165e:	4298      	cmp	r0, r3
 8001660:	d868      	bhi.n	8001734 <HAL_RCC_OscConfig+0x3f4>
 8001662:	6a22      	ldr	r2, [r4, #32]
 8001664:	2a20      	cmp	r2, #32
 8001666:	f000 8153 	beq.w	8001910 <HAL_RCC_OscConfig+0x5d0>
 800166a:	49a3      	ldr	r1, [pc, #652]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 800166c:	684b      	ldr	r3, [r1, #4]
 800166e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001672:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	e706      	b.n	800148a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800167c:	2003      	movs	r0, #3
 800167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001680:	f001 0103 	and.w	r1, r1, #3
 8001684:	2902      	cmp	r1, #2
 8001686:	f47f ae6e 	bne.w	8001366 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168a:	4a9b      	ldr	r2, [pc, #620]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	0392      	lsls	r2, r2, #14
 8001690:	f57f ae8d 	bpl.w	80013ae <HAL_RCC_OscConfig+0x6e>
 8001694:	6862      	ldr	r2, [r4, #4]
 8001696:	2a00      	cmp	r2, #0
 8001698:	f47f ae89 	bne.w	80013ae <HAL_RCC_OscConfig+0x6e>
 800169c:	e7d9      	b.n	8001652 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_CSI_DISABLE();
 800169e:	4b96      	ldr	r3, [pc, #600]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 80016a0:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016a2:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 80016a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016aa:	f7fe fe79 	bl	80003a0 <HAL_GetTick>
 80016ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016b0:	e004      	b.n	80016bc <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016b2:	f7fe fe75 	bl	80003a0 <HAL_GetTick>
 80016b6:	1b80      	subs	r0, r0, r6
 80016b8:	2802      	cmp	r0, #2
 80016ba:	d8df      	bhi.n	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	05df      	lsls	r7, r3, #23
 80016c0:	d4f7      	bmi.n	80016b2 <HAL_RCC_OscConfig+0x372>
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	e6e1      	b.n	800148a <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSI48_DISABLE();
 80016c6:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 80016c8:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ca:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 80016cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016d0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016d2:	f7fe fe65 	bl	80003a0 <HAL_GetTick>
 80016d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016d8:	e004      	b.n	80016e4 <HAL_RCC_OscConfig+0x3a4>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016da:	f7fe fe61 	bl	80003a0 <HAL_GetTick>
 80016de:	1b80      	subs	r0, r0, r6
 80016e0:	2802      	cmp	r0, #2
 80016e2:	d8cb      	bhi.n	800167c <HAL_RCC_OscConfig+0x33c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016e4:	682b      	ldr	r3, [r5, #0]
 80016e6:	0498      	lsls	r0, r3, #18
 80016e8:	d4f7      	bmi.n	80016da <HAL_RCC_OscConfig+0x39a>
 80016ea:	e700      	b.n	80014ee <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ec:	4a82      	ldr	r2, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e64b      	b.n	8001390 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_DISABLE();
 80016f8:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 80016fa:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016fc:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001704:	f7fe fe4c 	bl	80003a0 <HAL_GetTick>
 8001708:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800170a:	e004      	b.n	8001716 <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7fe fe48 	bl	80003a0 <HAL_GetTick>
 8001710:	1b80      	subs	r0, r0, r6
 8001712:	2802      	cmp	r0, #2
 8001714:	d8b2      	bhi.n	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	0758      	lsls	r0, r3, #29
 800171a:	d4f7      	bmi.n	800170c <HAL_RCC_OscConfig+0x3cc>
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	e67d      	b.n	800141c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4a75      	ldr	r2, [pc, #468]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 8001722:	6921      	ldr	r1, [r4, #16]
 8001724:	6853      	ldr	r3, [r2, #4]
 8001726:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800172a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800172e:	6053      	str	r3, [r2, #4]
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	e673      	b.n	800141c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001734:	4a70      	ldr	r2, [pc, #448]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 8001736:	6a21      	ldr	r1, [r4, #32]
 8001738:	68d3      	ldr	r3, [r2, #12]
 800173a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800173e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001742:	60d3      	str	r3, [r2, #12]
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	e6a0      	b.n	800148a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001748:	68eb      	ldr	r3, [r5, #12]
 800174a:	6a22      	ldr	r2, [r4, #32]
 800174c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001750:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001754:	60eb      	str	r3, [r5, #12]
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	e697      	b.n	800148a <HAL_RCC_OscConfig+0x14a>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800175c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800175e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001760:	d028      	beq.n	80017b4 <HAL_RCC_OscConfig+0x474>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001766:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001768:	428b      	cmp	r3, r1
 800176a:	f47f af72 	bne.w	8001652 <HAL_RCC_OscConfig+0x312>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800176e:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001774:	429a      	cmp	r2, r3
 8001776:	f47f af6c 	bne.w	8001652 <HAL_RCC_OscConfig+0x312>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800177a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800177c:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8001780:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	f47f af65 	bne.w	8001652 <HAL_RCC_OscConfig+0x312>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800178a:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800178e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	f47f af5e 	bne.w	8001652 <HAL_RCC_OscConfig+0x312>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001798:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800179c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	f47f af57 	bne.w	8001652 <HAL_RCC_OscConfig+0x312>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80017a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017a6:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80017aa:	3801      	subs	r0, #1
    return HAL_ERROR;
 80017ac:	1a28      	subs	r0, r5, r0
 80017ae:	bf18      	it	ne
 80017b0:	2001      	movne	r0, #1
 80017b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 80017b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e5e4      	b.n	8001390 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_PLL_DISABLE();
 80017c6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ca:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80017cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017ce:	f7fe fde7 	bl	80003a0 <HAL_GetTick>
 80017d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017d4:	e005      	b.n	80017e2 <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d6:	f7fe fde3 	bl	80003a0 <HAL_GetTick>
 80017da:	1b80      	subs	r0, r0, r6
 80017dc:	2802      	cmp	r0, #2
 80017de:	f63f af4d 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e2:	682b      	ldr	r3, [r5, #0]
 80017e4:	0199      	lsls	r1, r3, #6
 80017e6:	d4f6      	bmi.n	80017d6 <HAL_RCC_OscConfig+0x496>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <HAL_RCC_OscConfig+0x5bc>)
 80017ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80017ee:	4013      	ands	r3, r2
 80017f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017f2:	4943      	ldr	r1, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017f6:	4e40      	ldr	r6, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80017fc:	62ab      	str	r3, [r5, #40]	; 0x28
 80017fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001802:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001804:	1e57      	subs	r7, r2, #1
 8001806:	3b01      	subs	r3, #1
 8001808:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800180a:	f100 3eff 	add.w	lr, r0, #4294967295
 800180e:	0438      	lsls	r0, r7, #16
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	3a01      	subs	r2, #1
 8001814:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8001818:	f3ce 0708 	ubfx	r7, lr, #0, #9
 800181c:	b29b      	uxth	r3, r3
 800181e:	0612      	lsls	r2, r2, #24
 8001820:	4303      	orrs	r3, r0
 8001822:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001826:	433b      	orrs	r3, r7
 8001828:	4313      	orrs	r3, r2
 800182a:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800182c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001834:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001836:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001838:	4011      	ands	r1, r2
 800183a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800183e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001840:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001842:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001844:	f023 030c 	bic.w	r3, r3, #12
 8001848:	4313      	orrs	r3, r2
 800184a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800184c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800184e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001850:	f023 0302 	bic.w	r3, r3, #2
 8001854:	4313      	orrs	r3, r2
 8001856:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001858:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800185a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001860:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001866:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001868:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800186a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001870:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001880:	f7fe fd8e 	bl	80003a0 <HAL_GetTick>
 8001884:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001886:	e005      	b.n	8001894 <HAL_RCC_OscConfig+0x554>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7fe fd8a 	bl	80003a0 <HAL_GetTick>
 800188c:	1b00      	subs	r0, r0, r4
 800188e:	2802      	cmp	r0, #2
 8001890:	f63f aef4 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001894:	6833      	ldr	r3, [r6, #0]
 8001896:	019a      	lsls	r2, r3, #6
 8001898:	d5f6      	bpl.n	8001888 <HAL_RCC_OscConfig+0x548>
 800189a:	e649      	b.n	8001530 <HAL_RCC_OscConfig+0x1f0>
    return HAL_ERROR;
 800189c:	2001      	movs	r0, #1
}
 800189e:	4770      	bx	lr
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
 80018a2:	6853      	ldr	r3, [r2, #4]
 80018a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	6053      	str	r3, [r2, #4]
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	e5b4      	b.n	800141c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	686b      	ldr	r3, [r5, #4]
 80018b4:	6922      	ldr	r2, [r4, #16]
 80018b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80018ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018be:	606b      	str	r3, [r5, #4]
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	e5ab      	b.n	800141c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018cc:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	671a      	str	r2, [r3, #112]	; 0x70
 80018d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018d6:	f022 0204 	bic.w	r2, r2, #4
 80018da:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018dc:	f7fe fd60 	bl	80003a0 <HAL_GetTick>
 80018e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e2:	e005      	b.n	80018f0 <HAL_RCC_OscConfig+0x5b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7fe fd5c 	bl	80003a0 <HAL_GetTick>
 80018e8:	1b80      	subs	r0, r0, r6
 80018ea:	42b8      	cmp	r0, r7
 80018ec:	f63f aec6 	bhi.w	800167c <HAL_RCC_OscConfig+0x33c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018f2:	0798      	lsls	r0, r3, #30
 80018f4:	d4f6      	bmi.n	80018e4 <HAL_RCC_OscConfig+0x5a4>
 80018f6:	e5fd      	b.n	80014f4 <HAL_RCC_OscConfig+0x1b4>
 80018f8:	58024400 	.word	0x58024400
 80018fc:	fffffc0c 	.word	0xfffffc0c
 8001900:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_RCC_OscConfig+0x5f4>)
 8001906:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
 800190e:	e67f      	b.n	8001610 <HAL_RCC_OscConfig+0x2d0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001910:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_RCC_OscConfig+0x5f4>)
 8001912:	6853      	ldr	r3, [r2, #4]
 8001914:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800191c:	6053      	str	r3, [r2, #4]
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	e5b3      	b.n	800148a <HAL_RCC_OscConfig+0x14a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001922:	f042 0204 	orr.w	r2, r2, #4
 8001926:	671a      	str	r2, [r3, #112]	; 0x70
 8001928:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	671a      	str	r2, [r3, #112]	; 0x70
 8001930:	e66e      	b.n	8001610 <HAL_RCC_OscConfig+0x2d0>
 8001932:	bf00      	nop
 8001934:	58024400 	.word	0x58024400

08001938 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001938:	4a46      	ldr	r2, [pc, #280]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x11c>)
 800193a:	6913      	ldr	r3, [r2, #16]
 800193c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001940:	2b10      	cmp	r3, #16
 8001942:	d04d      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0xa8>
 8001944:	2b18      	cmp	r3, #24
 8001946:	d007      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x20>
 8001948:	b10b      	cbz	r3, 800194e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = CSI_VALUE;
 800194a:	4843      	ldr	r0, [pc, #268]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x120>)
 800194c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800194e:	6813      	ldr	r3, [r2, #0]
 8001950:	0699      	lsls	r1, r3, #26
 8001952:	d447      	bmi.n	80019e4 <HAL_RCC_GetSysClockFreq+0xac>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001954:	4841      	ldr	r0, [pc, #260]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x124>)
  return sysclockfreq;
 8001956:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001958:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800195a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800195c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800195e:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8001962:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001964:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8001966:	b3c0      	cbz	r0, 80019da <HAL_RCC_GetSysClockFreq+0xa2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001968:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800196c:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001970:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001974:	fb03 f304 	mul.w	r3, r3, r4
      switch (pllsource)
 8001978:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
      switch (pllsource)
 8001982:	d002      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x52>
 8001984:	d33b      	bcc.n	80019fe <HAL_RCC_GetSysClockFreq+0xc6>
 8001986:	2902      	cmp	r1, #2
 8001988:	d032      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800198a:	ee07 0a90 	vmov	s15, r0
 800198e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001a60 <HAL_RCC_GetSysClockFreq+0x128>
 8001992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001996:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001998:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800199c:	eddf 5a31 	vldr	s11, [pc, #196]	; 8001a64 <HAL_RCC_GetSysClockFreq+0x12c>
 80019a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a4:	ee07 3a10 	vmov	s14, r3
 80019a8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80019ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019b0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80019b4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80019b8:	ee27 7a26 	vmul.f32	s14, s14, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x11c>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80019c4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d6:	ee17 0a90 	vmov	r0, s15
}
 80019da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019de:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80019e0:	4821      	ldr	r0, [pc, #132]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x130>)
 80019e2:	4770      	bx	lr
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	481d      	ldr	r0, [pc, #116]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x124>)
 80019e8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80019ec:	40d8      	lsrs	r0, r3
 80019ee:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019f0:	ee07 0a90 	vmov	s15, r0
 80019f4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001a6c <HAL_RCC_GetSysClockFreq+0x134>
 80019f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fc:	e7cb      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x5e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019fe:	6813      	ldr	r3, [r2, #0]
 8001a00:	069b      	lsls	r3, r3, #26
 8001a02:	d520      	bpl.n	8001a46 <HAL_RCC_GetSysClockFreq+0x10e>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a04:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a06:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a0a:	4914      	ldr	r1, [pc, #80]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x124>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a0c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a10:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a18:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a1a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a1c:	ed9f 5a11 	vldr	s10, [pc, #68]	; 8001a64 <HAL_RCC_GetSysClockFreq+0x12c>
 8001a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a24:	ee06 1a90 	vmov	s13, r1
 8001a28:	ee07 3a10 	vmov	s14, r3
 8001a2c:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8001a30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a34:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8001a38:	ee37 7a24 	vadd.f32	s14, s14, s9
 8001a3c:	eea6 7a05 	vfma.f32	s14, s12, s10
 8001a40:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001a44:	e7ba      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x84>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a46:	ee07 0a90 	vmov	s15, r0
 8001a4a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001a70 <HAL_RCC_GetSysClockFreq+0x138>
 8001a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a52:	e7a0      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x5e>
 8001a54:	58024400 	.word	0x58024400
 8001a58:	003d0900 	.word	0x003d0900
 8001a5c:	03d09000 	.word	0x03d09000
 8001a60:	4a742400 	.word	0x4a742400
 8001a64:	39000000 	.word	0x39000000
 8001a68:	007a1200 	.word	0x007a1200
 8001a6c:	4af42400 	.word	0x4af42400
 8001a70:	4c742400 	.word	0x4c742400

08001a74 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001a74:	b178      	cbz	r0, 8001a96 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a76:	4a8e      	ldr	r2, [pc, #568]	; (8001cb0 <HAL_RCC_ClockConfig+0x23c>)
 8001a78:	6813      	ldr	r3, [r2, #0]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	428b      	cmp	r3, r1
 8001a80:	d20b      	bcs.n	8001a9a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8c:	6813      	ldr	r3, [r2, #0]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	4299      	cmp	r1, r3
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
}
 8001a98:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a9a:	6803      	ldr	r3, [r0, #0]
{
 8001a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001aa0:	075f      	lsls	r7, r3, #29
 8001aa2:	d50b      	bpl.n	8001abc <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001aa4:	4c83      	ldr	r4, [pc, #524]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001aa6:	6905      	ldr	r5, [r0, #16]
 8001aa8:	69a2      	ldr	r2, [r4, #24]
 8001aaa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001aae:	4295      	cmp	r5, r2
 8001ab0:	d904      	bls.n	8001abc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ab2:	69a2      	ldr	r2, [r4, #24]
 8001ab4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ab8:	432a      	orrs	r2, r5
 8001aba:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	071e      	lsls	r6, r3, #28
 8001abe:	d50b      	bpl.n	8001ad8 <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ac0:	4c7c      	ldr	r4, [pc, #496]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001ac2:	6945      	ldr	r5, [r0, #20]
 8001ac4:	69e2      	ldr	r2, [r4, #28]
 8001ac6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001aca:	4295      	cmp	r5, r2
 8001acc:	d904      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ace:	69e2      	ldr	r2, [r4, #28]
 8001ad0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ad4:	432a      	orrs	r2, r5
 8001ad6:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	06dd      	lsls	r5, r3, #27
 8001ada:	d50b      	bpl.n	8001af4 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001adc:	4c75      	ldr	r4, [pc, #468]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001ade:	6985      	ldr	r5, [r0, #24]
 8001ae0:	69e2      	ldr	r2, [r4, #28]
 8001ae2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001ae6:	4295      	cmp	r5, r2
 8001ae8:	d904      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001aea:	69e2      	ldr	r2, [r4, #28]
 8001aec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001af0:	432a      	orrs	r2, r5
 8001af2:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001af4:	069c      	lsls	r4, r3, #26
 8001af6:	d50b      	bpl.n	8001b10 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001af8:	4c6e      	ldr	r4, [pc, #440]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001afa:	69c5      	ldr	r5, [r0, #28]
 8001afc:	6a22      	ldr	r2, [r4, #32]
 8001afe:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001b02:	4295      	cmp	r5, r2
 8001b04:	d904      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b06:	6a22      	ldr	r2, [r4, #32]
 8001b08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b0c:	432a      	orrs	r2, r5
 8001b0e:	6222      	str	r2, [r4, #32]
 8001b10:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b12:	0799      	lsls	r1, r3, #30
 8001b14:	4604      	mov	r4, r0
 8001b16:	d414      	bmi.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b18:	07da      	lsls	r2, r3, #31
 8001b1a:	d41c      	bmi.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4964      	ldr	r1, [pc, #400]	; (8001cb0 <HAL_RCC_ClockConfig+0x23c>)
 8001b1e:	680a      	ldr	r2, [r1, #0]
 8001b20:	f002 020f 	and.w	r2, r2, #15
 8001b24:	4295      	cmp	r5, r2
 8001b26:	d258      	bcs.n	8001bda <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b28:	680a      	ldr	r2, [r1, #0]
 8001b2a:	f022 020f 	bic.w	r2, r2, #15
 8001b2e:	432a      	orrs	r2, r5
 8001b30:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	680a      	ldr	r2, [r1, #0]
 8001b34:	f002 020f 	and.w	r2, r2, #15
 8001b38:	4295      	cmp	r5, r2
 8001b3a:	d04e      	beq.n	8001bda <HAL_RCC_ClockConfig+0x166>
    return HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b42:	485c      	ldr	r0, [pc, #368]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001b44:	68e1      	ldr	r1, [r4, #12]
 8001b46:	6982      	ldr	r2, [r0, #24]
 8001b48:	f002 020f 	and.w	r2, r2, #15
 8001b4c:	4291      	cmp	r1, r2
 8001b4e:	f200 809a 	bhi.w	8001c86 <HAL_RCC_ClockConfig+0x212>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	07d8      	lsls	r0, r3, #31
 8001b54:	d530      	bpl.n	8001bb8 <HAL_RCC_ClockConfig+0x144>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b56:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001b58:	68a1      	ldr	r1, [r4, #8]
 8001b5a:	6993      	ldr	r3, [r2, #24]
 8001b5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b64:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b66:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	f000 8099 	beq.w	8001ca0 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	f000 808f 	beq.w	8001c92 <HAL_RCC_ClockConfig+0x21e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f000 8097 	beq.w	8001ca8 <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b7a:	0750      	lsls	r0, r2, #29
 8001b7c:	d5de      	bpl.n	8001b3c <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	494d      	ldr	r1, [pc, #308]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b84:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b88:	f022 0207 	bic.w	r2, r2, #7
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8001b90:	f7fe fc06 	bl	80003a0 <HAL_GetTick>
 8001b94:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e004      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x12e>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7fe fc02 	bl	80003a0 <HAL_GetTick>
 8001b9c:	1bc0      	subs	r0, r0, r7
 8001b9e:	4540      	cmp	r0, r8
 8001ba0:	d87b      	bhi.n	8001c9a <HAL_RCC_ClockConfig+0x226>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	6933      	ldr	r3, [r6, #16]
 8001ba4:	6862      	ldr	r2, [r4, #4]
 8001ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001baa:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001bae:	d1f3      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x124>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	0799      	lsls	r1, r3, #30
 8001bb4:	d5b2      	bpl.n	8001b1c <HAL_RCC_ClockConfig+0xa8>
 8001bb6:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bb8:	483e      	ldr	r0, [pc, #248]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001bba:	6982      	ldr	r2, [r0, #24]
 8001bbc:	f002 020f 	and.w	r2, r2, #15
 8001bc0:	4291      	cmp	r1, r2
 8001bc2:	d2ab      	bcs.n	8001b1c <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	6982      	ldr	r2, [r0, #24]
 8001bc6:	f022 020f 	bic.w	r2, r2, #15
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	6181      	str	r1, [r0, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bce:	4938      	ldr	r1, [pc, #224]	; (8001cb0 <HAL_RCC_ClockConfig+0x23c>)
 8001bd0:	680a      	ldr	r2, [r1, #0]
 8001bd2:	f002 020f 	and.w	r2, r2, #15
 8001bd6:	4295      	cmp	r5, r2
 8001bd8:	d3a6      	bcc.n	8001b28 <HAL_RCC_ClockConfig+0xb4>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bda:	075a      	lsls	r2, r3, #29
 8001bdc:	d50b      	bpl.n	8001bf6 <HAL_RCC_ClockConfig+0x182>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bde:	4935      	ldr	r1, [pc, #212]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001be0:	6920      	ldr	r0, [r4, #16]
 8001be2:	698a      	ldr	r2, [r1, #24]
 8001be4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001be8:	4290      	cmp	r0, r2
 8001bea:	d204      	bcs.n	8001bf6 <HAL_RCC_ClockConfig+0x182>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bec:	698a      	ldr	r2, [r1, #24]
 8001bee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bf2:	4302      	orrs	r2, r0
 8001bf4:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf6:	071f      	lsls	r7, r3, #28
 8001bf8:	d50b      	bpl.n	8001c12 <HAL_RCC_ClockConfig+0x19e>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bfa:	492e      	ldr	r1, [pc, #184]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001bfc:	6960      	ldr	r0, [r4, #20]
 8001bfe:	69ca      	ldr	r2, [r1, #28]
 8001c00:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001c04:	4290      	cmp	r0, r2
 8001c06:	d204      	bcs.n	8001c12 <HAL_RCC_ClockConfig+0x19e>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c08:	69ca      	ldr	r2, [r1, #28]
 8001c0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c0e:	4302      	orrs	r2, r0
 8001c10:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	06de      	lsls	r6, r3, #27
 8001c14:	d50b      	bpl.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c16:	4927      	ldr	r1, [pc, #156]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001c18:	69a0      	ldr	r0, [r4, #24]
 8001c1a:	69ca      	ldr	r2, [r1, #28]
 8001c1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c20:	4290      	cmp	r0, r2
 8001c22:	d204      	bcs.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c24:	69ca      	ldr	r2, [r1, #28]
 8001c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c2a:	4302      	orrs	r2, r0
 8001c2c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c2e:	069d      	lsls	r5, r3, #26
 8001c30:	d50b      	bpl.n	8001c4a <HAL_RCC_ClockConfig+0x1d6>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c32:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001c34:	69e1      	ldr	r1, [r4, #28]
 8001c36:	6a13      	ldr	r3, [r2, #32]
 8001c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c3c:	4299      	cmp	r1, r3
 8001c3e:	d204      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x1d6>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c40:	6a13      	ldr	r3, [r2, #32]
 8001c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c46:	430b      	orrs	r3, r1
 8001c48:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c4a:	f7ff fe75 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_RCC_ClockConfig+0x240>)
 8001c50:	4919      	ldr	r1, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x244>)
 8001c52:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c54:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c56:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8001c5a:	4d18      	ldr	r5, [pc, #96]	; (8001cbc <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c5c:	f002 020f 	and.w	r2, r2, #15
 8001c60:	4c17      	ldr	r4, [pc, #92]	; (8001cc0 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c64:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c66:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8001c6a:	4916      	ldr	r1, [pc, #88]	; (8001cc4 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c6c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c70:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8001c74:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c76:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8001c7a:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c7c:	6022      	str	r2, [r4, #0]
}
 8001c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001c82:	f7fe bb29 	b.w	80002d8 <HAL_InitTick>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c86:	6982      	ldr	r2, [r0, #24]
 8001c88:	f022 020f 	bic.w	r2, r2, #15
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	6182      	str	r2, [r0, #24]
 8001c90:	e75f      	b.n	8001b52 <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c92:	0197      	lsls	r7, r2, #6
 8001c94:	f53f af73 	bmi.w	8001b7e <HAL_RCC_ClockConfig+0x10a>
 8001c98:	e750      	b.n	8001b3c <HAL_RCC_ClockConfig+0xc8>
            return HAL_TIMEOUT;
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca0:	0392      	lsls	r2, r2, #14
 8001ca2:	f53f af6c 	bmi.w	8001b7e <HAL_RCC_ClockConfig+0x10a>
 8001ca6:	e749      	b.n	8001b3c <HAL_RCC_ClockConfig+0xc8>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ca8:	05d6      	lsls	r6, r2, #23
 8001caa:	f53f af68 	bmi.w	8001b7e <HAL_RCC_ClockConfig+0x10a>
 8001cae:	e745      	b.n	8001b3c <HAL_RCC_ClockConfig+0xc8>
 8001cb0:	52002000 	.word	0x52002000
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	08004bc0 	.word	0x08004bc0
 8001cbc:	24000004 	.word	0x24000004
 8001cc0:	24000018 	.word	0x24000018
 8001cc4:	24000014 	.word	0x24000014

08001cc8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cca:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ccc:	6913      	ldr	r3, [r2, #16]
 8001cce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d022      	beq.n	8001d1c <HAL_RCC_GetHCLKFreq+0x54>
 8001cd6:	2b18      	cmp	r3, #24
 8001cd8:	d01d      	beq.n	8001d16 <HAL_RCC_GetHCLKFreq+0x4e>
 8001cda:	b1bb      	cbz	r3, 8001d0c <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8001cdc:	4814      	ldr	r0, [pc, #80]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_RCC_GetHCLKFreq+0x64>)
 8001ce0:	4914      	ldr	r1, [pc, #80]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x6c>)
 8001ce2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ce4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001ce6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cea:	4c13      	ldr	r4, [pc, #76]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x70>)
 8001cec:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cf0:	4d12      	ldr	r5, [pc, #72]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001cf2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cf4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001cf6:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cfa:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001cfe:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d02:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8001d06:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d08:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001d0a:	bd38      	pop	{r3, r4, r5, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	069b      	lsls	r3, r3, #26
 8001d10:	d406      	bmi.n	8001d20 <HAL_RCC_GetHCLKFreq+0x58>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x78>)
 8001d14:	e7e3      	b.n	8001cde <HAL_RCC_GetHCLKFreq+0x16>
 8001d16:	f7ff fa8f 	bl	8001238 <HAL_RCC_GetSysClockFreq.part.0>
 8001d1a:	e7e0      	b.n	8001cde <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x7c>)
 8001d1e:	e7de      	b.n	8001cde <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	4807      	ldr	r0, [pc, #28]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x78>)
 8001d24:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001d28:	40d0      	lsrs	r0, r2
 8001d2a:	e7d8      	b.n	8001cde <HAL_RCC_GetHCLKFreq+0x16>
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	003d0900 	.word	0x003d0900
 8001d34:	08004bc0 	.word	0x08004bc0
 8001d38:	24000018 	.word	0x24000018
 8001d3c:	24000014 	.word	0x24000014
 8001d40:	03d09000 	.word	0x03d09000
 8001d44:	007a1200 	.word	0x007a1200

08001d48 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001d48:	4a3b      	ldr	r2, [pc, #236]	; (8001e38 <RCCEx_PLL2_Config+0xf0>)
{
 8001d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001d4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d069      	beq.n	8001e2a <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	460f      	mov	r7, r1
 8001d5a:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001d5c:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8001d5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d62:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d64:	f7fe fb1c 	bl	80003a0 <HAL_GetTick>
 8001d68:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001d6a:	e004      	b.n	8001d76 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001d6c:	f7fe fb18 	bl	80003a0 <HAL_GetTick>
 8001d70:	1b40      	subs	r0, r0, r5
 8001d72:	2802      	cmp	r0, #2
 8001d74:	d857      	bhi.n	8001e26 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	011a      	lsls	r2, r3, #4
 8001d7a:	d4f7      	bmi.n	8001d6c <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001d7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d7e:	6832      	ldr	r2, [r6, #0]
 8001d80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001d84:	492d      	ldr	r1, [pc, #180]	; (8001e3c <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001d86:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001d8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d8c:	68f2      	ldr	r2, [r6, #12]
 8001d8e:	68b3      	ldr	r3, [r6, #8]
 8001d90:	1e55      	subs	r5, r2, #1
 8001d92:	6870      	ldr	r0, [r6, #4]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	6932      	ldr	r2, [r6, #16]
 8001d98:	042d      	lsls	r5, r5, #16
 8001d9a:	3801      	subs	r0, #1
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	3a01      	subs	r2, #1
 8001da0:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
 8001da4:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	0612      	lsls	r2, r2, #24
 8001dac:	432b      	orrs	r3, r5
 8001dae:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001db2:	4303      	orrs	r3, r0
 8001db4:	4313      	orrs	r3, r2
 8001db6:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001db8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dba:	6972      	ldr	r2, [r6, #20]
 8001dbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001dc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dc6:	69b2      	ldr	r2, [r6, #24]
 8001dc8:	f023 0320 	bic.w	r3, r3, #32
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dd2:	f023 0310 	bic.w	r3, r3, #16
 8001dd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001dd8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001dda:	69f3      	ldr	r3, [r6, #28]
 8001ddc:	4011      	ands	r1, r2
 8001dde:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8001de2:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001de4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001dec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001dee:	b1f7      	cbz	r7, 8001e2e <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8001df0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001df2:	bf0c      	ite	eq
 8001df4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001df8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <RCCEx_PLL2_Config+0xf0>)
 8001e00:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001e02:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8001e04:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e08:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001e0a:	f7fe fac9 	bl	80003a0 <HAL_GetTick>
 8001e0e:	4605      	mov	r5, r0
 8001e10:	e004      	b.n	8001e1c <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001e12:	f7fe fac5 	bl	80003a0 <HAL_GetTick>
 8001e16:	1b40      	subs	r0, r0, r5
 8001e18:	2802      	cmp	r0, #2
 8001e1a:	d804      	bhi.n	8001e26 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	d5f7      	bpl.n	8001e12 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8001e22:	2000      	movs	r0, #0
 8001e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001e26:	2003      	movs	r0, #3
 8001e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001e2a:	2001      	movs	r0, #1
}
 8001e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e34:	e7e3      	b.n	8001dfe <RCCEx_PLL2_Config+0xb6>
 8001e36:	bf00      	nop
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	ffff0007 	.word	0xffff0007

08001e40 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e40:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <RCCEx_PLL3_Config+0xf0>)
{
 8001e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e44:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d069      	beq.n	8001f22 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	460f      	mov	r7, r1
 8001e52:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001e54:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8001e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e5c:	f7fe faa0 	bl	80003a0 <HAL_GetTick>
 8001e60:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001e62:	e004      	b.n	8001e6e <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001e64:	f7fe fa9c 	bl	80003a0 <HAL_GetTick>
 8001e68:	1b40      	subs	r0, r0, r5
 8001e6a:	2802      	cmp	r0, #2
 8001e6c:	d857      	bhi.n	8001f1e <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	009a      	lsls	r2, r3, #2
 8001e72:	d4f7      	bmi.n	8001e64 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e76:	6832      	ldr	r2, [r6, #0]
 8001e78:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001e7c:	492d      	ldr	r1, [pc, #180]	; (8001f34 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001e7e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001e82:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e84:	68f2      	ldr	r2, [r6, #12]
 8001e86:	68b3      	ldr	r3, [r6, #8]
 8001e88:	1e55      	subs	r5, r2, #1
 8001e8a:	6870      	ldr	r0, [r6, #4]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	6932      	ldr	r2, [r6, #16]
 8001e90:	042d      	lsls	r5, r5, #16
 8001e92:	3801      	subs	r0, #1
 8001e94:	025b      	lsls	r3, r3, #9
 8001e96:	3a01      	subs	r2, #1
 8001e98:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
 8001e9c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	0612      	lsls	r2, r2, #24
 8001ea4:	432b      	orrs	r3, r5
 8001ea6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001eaa:	4303      	orrs	r3, r0
 8001eac:	4313      	orrs	r3, r2
 8001eae:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001eb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001eb2:	6972      	ldr	r2, [r6, #20]
 8001eb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001ebc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ebe:	69b2      	ldr	r2, [r6, #24]
 8001ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ece:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001ed0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ed2:	69f3      	ldr	r3, [r6, #28]
 8001ed4:	4011      	ands	r1, r2
 8001ed6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8001eda:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001ee6:	b1f7      	cbz	r7, 8001f26 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8001ee8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001eea:	bf0c      	ite	eq
 8001eec:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001ef0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <RCCEx_PLL3_Config+0xf0>)
 8001ef8:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001efa:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8001efc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f00:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f02:	f7fe fa4d 	bl	80003a0 <HAL_GetTick>
 8001f06:	4605      	mov	r5, r0
 8001f08:	e004      	b.n	8001f14 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001f0a:	f7fe fa49 	bl	80003a0 <HAL_GetTick>
 8001f0e:	1b40      	subs	r0, r0, r5
 8001f10:	2802      	cmp	r0, #2
 8001f12:	d804      	bhi.n	8001f1e <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	d5f7      	bpl.n	8001f0a <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001f1e:	2003      	movs	r0, #3
 8001f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f22:	2001      	movs	r0, #1
}
 8001f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f2c:	e7e3      	b.n	8001ef6 <RCCEx_PLL3_Config+0xb6>
 8001f2e:	bf00      	nop
 8001f30:	58024400 	.word	0x58024400
 8001f34:	ffff0007 	.word	0xffff0007

08001f38 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f3c:	6803      	ldr	r3, [r0, #0]
{
 8001f3e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f40:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8001f44:	d015      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001f46:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001f48:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001f4c:	f000 8449 	beq.w	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8001f50:	f240 84fa 	bls.w	8002948 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8001f54:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001f58:	f000 8403 	beq.w	8002762 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8001f5c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001f60:	f040 8517 	bne.w	8002992 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001f64:	48a2      	ldr	r0, [pc, #648]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f66:	2600      	movs	r6, #0
 8001f68:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001f6a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f72:	05dd      	lsls	r5, r3, #23
 8001f74:	d50a      	bpl.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001f76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f78:	2a04      	cmp	r2, #4
 8001f7a:	d806      	bhi.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f7c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001f80:	03e203d8 	.word	0x03e203d8
 8001f84:	037e03e9 	.word	0x037e03e9
 8001f88:	037e      	.short	0x037e
      ret = HAL_ERROR;
 8001f8a:	2601      	movs	r6, #1
 8001f8c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001f8e:	0598      	lsls	r0, r3, #22
 8001f90:	d51b      	bpl.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001f92:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001f94:	2a80      	cmp	r2, #128	; 0x80
 8001f96:	f000 843a 	beq.w	800280e <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8001f9a:	f200 84ca 	bhi.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	f000 840c 	beq.w	80027bc <HAL_RCCEx_PeriphCLKConfig+0x884>
 8001fa4:	2a40      	cmp	r2, #64	; 0x40
 8001fa6:	f040 84cb 	bne.w	8002940 <HAL_RCCEx_PeriphCLKConfig+0xa08>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001faa:	2100      	movs	r1, #0
 8001fac:	1d20      	adds	r0, r4, #4
 8001fae:	f7ff fecb 	bl	8001d48 <RCCEx_PLL2_Config>
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001fb6:	2d00      	cmp	r5, #0
 8001fb8:	f040 8408 	bne.w	80027cc <HAL_RCCEx_PeriphCLKConfig+0x894>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001fbc:	498c      	ldr	r1, [pc, #560]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001fbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fc0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001fc2:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8001fc6:	4302      	orrs	r2, r0
 8001fc8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001fca:	0559      	lsls	r1, r3, #21
 8001fcc:	d51f      	bpl.n	800200e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001fce:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8001fd2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001fd6:	f000 83fc 	beq.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8001fda:	f200 849e 	bhi.w	800291a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	f000 83d4 	beq.w	800278c <HAL_RCCEx_PeriphCLKConfig+0x854>
 8001fe4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001fe8:	f040 849f 	bne.w	800292a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001fec:	2100      	movs	r1, #0
 8001fee:	1d20      	adds	r0, r4, #4
 8001ff0:	f7ff feaa 	bl	8001d48 <RCCEx_PLL2_Config>
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001ff8:	2d00      	cmp	r5, #0
 8001ffa:	f040 83cf 	bne.w	800279c <HAL_RCCEx_PeriphCLKConfig+0x864>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001ffe:	497c      	ldr	r1, [pc, #496]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002000:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8002004:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002006:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800200a:	4302      	orrs	r2, r0
 800200c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800200e:	051a      	lsls	r2, r3, #20
 8002010:	d51f      	bpl.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002012:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8002016:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800201a:	f000 83e8 	beq.w	80027ee <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 800201e:	f200 849b 	bhi.w	8002958 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002022:	2a00      	cmp	r2, #0
 8002024:	f000 83bc 	beq.w	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8002028:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800202c:	f040 849c 	bne.w	8002968 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002030:	2100      	movs	r1, #0
 8002032:	1d20      	adds	r0, r4, #4
 8002034:	f7ff fe88 	bl	8001d48 <RCCEx_PLL2_Config>
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800203c:	2d00      	cmp	r5, #0
 800203e:	f040 83b7 	bne.w	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x878>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002042:	496b      	ldr	r1, [pc, #428]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002044:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8002048:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800204a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800204e:	4302      	orrs	r2, r0
 8002050:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002052:	019f      	lsls	r7, r3, #6
 8002054:	d50d      	bpl.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 8002056:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002058:	2a10      	cmp	r2, #16
 800205a:	f000 8326 	beq.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x772>
 800205e:	f240 8493 	bls.w	8002988 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002062:	2a20      	cmp	r2, #32
 8002064:	f000 82fb 	beq.w	800265e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8002068:	2a30      	cmp	r2, #48	; 0x30
 800206a:	f000 82fe 	beq.w	800266a <HAL_RCCEx_PeriphCLKConfig+0x732>
      ret = HAL_ERROR;
 800206e:	2601      	movs	r6, #1
 8002070:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002072:	04d8      	lsls	r0, r3, #19
 8002074:	d51d      	bpl.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002076:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002078:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800207c:	f000 83bf 	beq.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8002080:	f200 8476 	bhi.w	8002970 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8002084:	2a00      	cmp	r2, #0
 8002086:	f000 8377 	beq.w	8002778 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800208a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800208e:	f040 8477 	bne.w	8002980 <HAL_RCCEx_PeriphCLKConfig+0xa48>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002092:	2100      	movs	r1, #0
 8002094:	1d20      	adds	r0, r4, #4
 8002096:	f7ff fe57 	bl	8001d48 <RCCEx_PLL2_Config>
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800209e:	2d00      	cmp	r5, #0
 80020a0:	f040 8372 	bne.w	8002788 <HAL_RCCEx_PeriphCLKConfig+0x850>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80020a4:	4952      	ldr	r1, [pc, #328]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80020a6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80020a8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80020aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80020ae:	4302      	orrs	r2, r0
 80020b0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80020b2:	0499      	lsls	r1, r3, #18
 80020b4:	d51b      	bpl.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80020b6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80020b8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80020bc:	f000 8320 	beq.w	8002700 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80020c0:	f200 8408 	bhi.w	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 80020c4:	b14a      	cbz	r2, 80020da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80020c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80020ca:	f040 840f 	bne.w	80028ec <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80020ce:	2101      	movs	r1, #1
 80020d0:	1d20      	adds	r0, r4, #4
 80020d2:	f7ff fe39 	bl	8001d48 <RCCEx_PLL2_Config>
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80020da:	2d00      	cmp	r5, #0
 80020dc:	f040 831a 	bne.w	8002714 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80020e0:	4943      	ldr	r1, [pc, #268]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80020e2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80020e4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80020e6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80020ea:	4302      	orrs	r2, r0
 80020ec:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80020ee:	045a      	lsls	r2, r3, #17
 80020f0:	d51d      	bpl.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 80020f2:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80020f6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80020fa:	f000 830d 	beq.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 80020fe:	f200 83da 	bhi.w	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002102:	b14a      	cbz	r2, 8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8002104:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002108:	f040 83e1 	bne.w	80028ce <HAL_RCCEx_PeriphCLKConfig+0x996>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800210c:	2101      	movs	r1, #1
 800210e:	1d20      	adds	r0, r4, #4
 8002110:	f7ff fe1a 	bl	8001d48 <RCCEx_PLL2_Config>
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002118:	2d00      	cmp	r5, #0
 800211a:	f040 8307 	bne.w	800272c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800211e:	4934      	ldr	r1, [pc, #208]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002120:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8002124:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002126:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800212a:	4302      	orrs	r2, r0
 800212c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800212e:	041f      	lsls	r7, r3, #16
 8002130:	d50d      	bpl.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8002132:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002134:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002138:	f000 82c0 	beq.w	80026bc <HAL_RCCEx_PeriphCLKConfig+0x784>
 800213c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002140:	f000 81b4 	beq.w	80024ac <HAL_RCCEx_PeriphCLKConfig+0x574>
 8002144:	2a00      	cmp	r2, #0
 8002146:	f000 81b7 	beq.w	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      ret = HAL_ERROR;
 800214a:	2601      	movs	r6, #1
 800214c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800214e:	01d8      	lsls	r0, r3, #7
 8002150:	d519      	bpl.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 8002152:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002154:	2a03      	cmp	r2, #3
 8002156:	f200 8449 	bhi.w	80029ec <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800215a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800215e:	000a      	.short	0x000a
 8002160:	00040251 	.word	0x00040251
 8002164:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002166:	2102      	movs	r1, #2
 8002168:	1d20      	adds	r0, r4, #4
 800216a:	f7ff fded 	bl	8001d48 <RCCEx_PLL2_Config>
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002172:	2d00      	cmp	r5, #0
 8002174:	f040 824c 	bne.w	8002610 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002178:	491d      	ldr	r1, [pc, #116]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800217a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800217c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800217e:	f022 0203 	bic.w	r2, r2, #3
 8002182:	4302      	orrs	r2, r0
 8002184:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002186:	0259      	lsls	r1, r3, #9
 8002188:	f100 81ca 	bmi.w	8002520 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800218c:	07df      	lsls	r7, r3, #31
 800218e:	d542      	bpl.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002190:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002192:	2a28      	cmp	r2, #40	; 0x28
 8002194:	f200 8358 	bhi.w	8002848 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002198:	e8df f012 	tbh	[pc, r2, lsl #1]
 800219c:	03560033 	.word	0x03560033
 80021a0:	03560356 	.word	0x03560356
 80021a4:	03560356 	.word	0x03560356
 80021a8:	03560356 	.word	0x03560356
 80021ac:	03560252 	.word	0x03560252
 80021b0:	03560356 	.word	0x03560356
 80021b4:	03560356 	.word	0x03560356
 80021b8:	03560356 	.word	0x03560356
 80021bc:	0356002c 	.word	0x0356002c
 80021c0:	03560356 	.word	0x03560356
 80021c4:	03560356 	.word	0x03560356
 80021c8:	03560356 	.word	0x03560356
 80021cc:	03560033 	.word	0x03560033
 80021d0:	03560356 	.word	0x03560356
 80021d4:	03560356 	.word	0x03560356
 80021d8:	03560356 	.word	0x03560356
 80021dc:	03560033 	.word	0x03560033
 80021e0:	03560356 	.word	0x03560356
 80021e4:	03560356 	.word	0x03560356
 80021e8:	03560356 	.word	0x03560356
 80021ec:	0033      	.short	0x0033
 80021ee:	bf00      	nop
 80021f0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80021f4:	2101      	movs	r1, #1
 80021f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021fa:	f7ff fe21 	bl	8001e40 <RCCEx_PLL3_Config>
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002202:	2d00      	cmp	r5, #0
 8002204:	f040 8225 	bne.w	8002652 <HAL_RCCEx_PeriphCLKConfig+0x71a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002208:	49b1      	ldr	r1, [pc, #708]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800220a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800220c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800220e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002212:	4302      	orrs	r2, r0
 8002214:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002216:	0798      	lsls	r0, r3, #30
 8002218:	d51c      	bpl.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800221a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800221c:	2a05      	cmp	r2, #5
 800221e:	f200 83e9 	bhi.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8002222:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002226:	000d      	.short	0x000d
 8002228:	000601f7 	.word	0x000601f7
 800222c:	000d000d 	.word	0x000d000d
 8002230:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002232:	2101      	movs	r1, #1
 8002234:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002238:	f7ff fe02 	bl	8001e40 <RCCEx_PLL3_Config>
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002240:	2d00      	cmp	r5, #0
 8002242:	f040 81f0 	bne.w	8002626 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002246:	49a2      	ldr	r1, [pc, #648]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002248:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800224a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800224c:	f022 0207 	bic.w	r2, r2, #7
 8002250:	4302      	orrs	r2, r0
 8002252:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002254:	0759      	lsls	r1, r3, #29
 8002256:	d51e      	bpl.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002258:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800225c:	2a05      	cmp	r2, #5
 800225e:	f200 83c2 	bhi.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002262:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002266:	000d      	.short	0x000d
 8002268:	000601e2 	.word	0x000601e2
 800226c:	000d000d 	.word	0x000d000d
 8002270:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002272:	2101      	movs	r1, #1
 8002274:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002278:	f7ff fde2 	bl	8001e40 <RCCEx_PLL3_Config>
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002280:	2d00      	cmp	r5, #0
 8002282:	f040 81db 	bne.w	800263c <HAL_RCCEx_PeriphCLKConfig+0x704>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002286:	4992      	ldr	r1, [pc, #584]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002288:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800228c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800228e:	f022 0207 	bic.w	r2, r2, #7
 8002292:	4302      	orrs	r2, r0
 8002294:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002296:	069a      	lsls	r2, r3, #26
 8002298:	d51d      	bpl.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800229a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800229e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80022a2:	f000 81f6 	beq.w	8002692 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80022a6:	f200 8325 	bhi.w	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 80022aa:	b14a      	cbz	r2, 80022c0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80022ac:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80022b0:	f040 832c 	bne.w	800290c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022b4:	2100      	movs	r1, #0
 80022b6:	1d20      	adds	r0, r4, #4
 80022b8:	f7ff fd46 	bl	8001d48 <RCCEx_PLL2_Config>
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	f040 81f0 	bne.w	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x76e>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022c6:	4982      	ldr	r1, [pc, #520]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80022c8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80022cc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80022ce:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80022d2:	4302      	orrs	r2, r0
 80022d4:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80022d6:	065f      	lsls	r7, r3, #25
 80022d8:	d51d      	bpl.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80022da:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80022de:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80022e2:	f000 81f5 	beq.w	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x798>
 80022e6:	f200 82d7 	bhi.w	8002898 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80022ea:	b14a      	cbz	r2, 8002300 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80022ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80022f0:	f040 82de 	bne.w	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x978>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022f4:	2100      	movs	r1, #0
 80022f6:	1d20      	adds	r0, r4, #4
 80022f8:	f7ff fd26 	bl	8001d48 <RCCEx_PLL2_Config>
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002300:	2d00      	cmp	r5, #0
 8002302:	f040 81ef 	bne.w	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002306:	4972      	ldr	r1, [pc, #456]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002308:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800230c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800230e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002312:	4302      	orrs	r2, r0
 8002314:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002316:	0618      	lsls	r0, r3, #24
 8002318:	d51d      	bpl.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800231a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800231e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002322:	f000 81e1 	beq.w	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8002326:	f200 82a8 	bhi.w	800287a <HAL_RCCEx_PeriphCLKConfig+0x942>
 800232a:	b14a      	cbz	r2, 8002340 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800232c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002330:	f040 82af 	bne.w	8002892 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002334:	2100      	movs	r1, #0
 8002336:	1d20      	adds	r0, r4, #4
 8002338:	f7ff fd06 	bl	8001d48 <RCCEx_PLL2_Config>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002340:	2d00      	cmp	r5, #0
 8002342:	f040 81db 	bne.w	80026fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002346:	4962      	ldr	r1, [pc, #392]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002348:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800234c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800234e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002352:	4302      	orrs	r2, r0
 8002354:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002356:	0719      	lsls	r1, r3, #28
 8002358:	d50b      	bpl.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800235a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800235e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002362:	f000 827f 	beq.w	8002864 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002366:	485a      	ldr	r0, [pc, #360]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002368:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800236a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800236e:	430a      	orrs	r2, r1
 8002370:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002372:	06da      	lsls	r2, r3, #27
 8002374:	d50b      	bpl.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002376:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800237a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800237e:	f000 8266 	beq.w	800284e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002382:	4853      	ldr	r0, [pc, #332]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002384:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002386:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800238a:	430a      	orrs	r2, r1
 800238c:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800238e:	031f      	lsls	r7, r3, #12
 8002390:	d50e      	bpl.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 8002392:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002396:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800239a:	f000 80ae 	beq.w	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 800239e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80023a2:	f000 80b1 	beq.w	8002508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80023a6:	2900      	cmp	r1, #0
 80023a8:	f000 8244 	beq.w	8002834 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      ret = HAL_ERROR;
 80023ac:	2601      	movs	r6, #1
 80023ae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023b0:	0358      	lsls	r0, r3, #13
 80023b2:	d50f      	bpl.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 80023b4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80023b8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80023bc:	f000 808a 	beq.w	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80023c0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80023c4:	f000 808d 	beq.w	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80023c8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80023cc:	f000 8228 	beq.w	8002820 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      ret = HAL_ERROR;
 80023d0:	2601      	movs	r6, #1
 80023d2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80023d4:	03d9      	lsls	r1, r3, #15
 80023d6:	d517      	bpl.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 80023d8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80023da:	2a00      	cmp	r2, #0
 80023dc:	f000 810a 	beq.w	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80023e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80023e4:	f040 80f1 	bne.w	80025ca <HAL_RCCEx_PeriphCLKConfig+0x692>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023e8:	2102      	movs	r1, #2
 80023ea:	1d20      	adds	r0, r4, #4
 80023ec:	f7ff fcac 	bl	8001d48 <RCCEx_PLL2_Config>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023f4:	2d00      	cmp	r5, #0
 80023f6:	f040 82cf 	bne.w	8002998 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80023fa:	4935      	ldr	r1, [pc, #212]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80023fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80023fe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002400:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002404:	4302      	orrs	r2, r0
 8002406:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002408:	009a      	lsls	r2, r3, #2
 800240a:	f100 80cb 	bmi.w	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800240e:	039f      	lsls	r7, r3, #14
 8002410:	d43b      	bmi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x552>
 8002412:	1c30      	adds	r0, r6, #0
 8002414:	bf18      	it	ne
 8002416:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002418:	02de      	lsls	r6, r3, #11
 800241a:	d506      	bpl.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800241c:	492c      	ldr	r1, [pc, #176]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800241e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8002420:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002422:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002426:	432a      	orrs	r2, r5
 8002428:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800242a:	00dd      	lsls	r5, r3, #3
 800242c:	d507      	bpl.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x506>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800242e:	4928      	ldr	r1, [pc, #160]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002430:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8002434:	690a      	ldr	r2, [r1, #16]
 8002436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800243a:	432a      	orrs	r2, r5
 800243c:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800243e:	0299      	lsls	r1, r3, #10
 8002440:	d506      	bpl.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x518>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002442:	4923      	ldr	r1, [pc, #140]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002444:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8002446:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002448:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800244c:	432a      	orrs	r2, r5
 800244e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002450:	005a      	lsls	r2, r3, #1
 8002452:	d509      	bpl.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x530>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002456:	6911      	ldr	r1, [r2, #16]
 8002458:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800245c:	6111      	str	r1, [r2, #16]
 800245e:	6911      	ldr	r1, [r2, #16]
 8002460:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8002464:	4329      	orrs	r1, r5
 8002466:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002468:	2b00      	cmp	r3, #0
 800246a:	f2c0 80a6 	blt.w	80025ba <HAL_RCCEx_PeriphCLKConfig+0x682>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	d509      	bpl.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002472:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002474:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002478:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800247a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800247e:	430b      	orrs	r3, r1
 8002480:	6553      	str	r3, [r2, #84]	; 0x54
 8002482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
 8002486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 800248a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800248c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002490:	f000 809e 	beq.w	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
 8002494:	f240 80df 	bls.w	8002656 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8002498:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800249c:	f000 809d 	beq.w	80025da <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 80024a0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80024a4:	f000 8099 	beq.w	80025da <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 80024a8:	2001      	movs	r0, #1
 80024aa:	e7b5      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024ac:	2101      	movs	r1, #1
 80024ae:	1d20      	adds	r0, r4, #4
 80024b0:	f7ff fc4a 	bl	8001d48 <RCCEx_PLL2_Config>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024b8:	2d00      	cmp	r5, #0
 80024ba:	f040 8107 	bne.w	80026cc <HAL_RCCEx_PeriphCLKConfig+0x794>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80024be:	4904      	ldr	r1, [pc, #16]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80024c0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80024c2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80024c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024c8:	4302      	orrs	r2, r0
 80024ca:	650a      	str	r2, [r1, #80]	; 0x50
 80024cc:	e63f      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x216>
 80024ce:	bf00      	nop
 80024d0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024d4:	2101      	movs	r1, #1
 80024d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024da:	f7ff fcb1 	bl	8001e40 <RCCEx_PLL3_Config>
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024e2:	2d00      	cmp	r5, #0
 80024e4:	f040 81a4 	bne.w	8002830 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024e8:	49b2      	ldr	r1, [pc, #712]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80024ea:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80024ee:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80024f0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80024f4:	4302      	orrs	r2, r0
 80024f6:	654a      	str	r2, [r1, #84]	; 0x54
 80024f8:	e76c      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024fa:	2102      	movs	r1, #2
 80024fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002500:	f7ff fc9e 	bl	8001e40 <RCCEx_PLL3_Config>
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002508:	2d00      	cmp	r5, #0
 800250a:	f040 819b 	bne.w	8002844 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800250e:	49a9      	ldr	r1, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002510:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8002514:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002516:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800251a:	4302      	orrs	r2, r0
 800251c:	658a      	str	r2, [r1, #88]	; 0x58
 800251e:	e747      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002520:	4ba5      	ldr	r3, [pc, #660]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002522:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002524:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800252a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800252c:	f7fd ff38 	bl	80003a0 <HAL_GetTick>
 8002530:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002532:	e006      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fd ff34 	bl	80003a0 <HAL_GetTick>
 8002538:	eba0 0008 	sub.w	r0, r0, r8
 800253c:	2864      	cmp	r0, #100	; 0x64
 800253e:	f200 81e8 	bhi.w	8002912 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	05da      	lsls	r2, r3, #23
 8002546:	d5f5      	bpl.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    if(ret == HAL_OK)
 8002548:	2d00      	cmp	r5, #0
 800254a:	f040 8248 	bne.w	80029de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800254e:	4a99      	ldr	r2, [pc, #612]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002550:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002554:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002556:	4059      	eors	r1, r3
 8002558:	f411 7f40 	tst.w	r1, #768	; 0x300
 800255c:	d00b      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800255e:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002560:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002562:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002566:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800256a:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800256c:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800256e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002572:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8002574:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257a:	f000 821d 	beq.w	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800257e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002582:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002586:	f000 820d 	beq.w	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800258a:	498a      	ldr	r1, [pc, #552]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800258c:	690a      	ldr	r2, [r1, #16]
 800258e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002592:	610a      	str	r2, [r1, #16]
 8002594:	4a87      	ldr	r2, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800259c:	430b      	orrs	r3, r1
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	e5f3      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x254>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80025a4:	2102      	movs	r1, #2
 80025a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025aa:	f7ff fc49 	bl	8001e40 <RCCEx_PLL3_Config>
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	2800      	cmp	r0, #0
 80025b2:	f43f af2c 	beq.w	800240e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
      status=HAL_ERROR;
 80025b6:	2601      	movs	r6, #1
 80025b8:	e729      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80025ba:	497e      	ldr	r1, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80025bc:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80025be:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80025c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025c4:	432a      	orrs	r2, r5
 80025c6:	64ca      	str	r2, [r1, #76]	; 0x4c
 80025c8:	e751      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x536>
      ret = HAL_ERROR;
 80025ca:	2601      	movs	r6, #1
 80025cc:	4635      	mov	r5, r6
 80025ce:	e71b      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d0:	4878      	ldr	r0, [pc, #480]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80025d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80025d4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80025d8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80025da:	2d00      	cmp	r5, #0
 80025dc:	f47f af64 	bne.w	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025e0:	4d74      	ldr	r5, [pc, #464]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80025e2:	1c30      	adds	r0, r6, #0
 80025e4:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80025e6:	bf18      	it	ne
 80025e8:	2001      	movne	r0, #1
 80025ea:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80025ee:	430a      	orrs	r2, r1
 80025f0:	656a      	str	r2, [r5, #84]	; 0x54
 80025f2:	e711      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f4:	496f      	ldr	r1, [pc, #444]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80025f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80025f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025fc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80025fe:	e6f9      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002600:	496c      	ldr	r1, [pc, #432]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002602:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002604:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002608:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800260a:	2d00      	cmp	r5, #0
 800260c:	f43f adb4 	beq.w	8002178 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002610:	462e      	mov	r6, r5
 8002612:	e5b8      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002614:	2101      	movs	r1, #1
 8002616:	1d20      	adds	r0, r4, #4
 8002618:	f7ff fb96 	bl	8001d48 <RCCEx_PLL2_Config>
 800261c:	4605      	mov	r5, r0
 800261e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002620:	2d00      	cmp	r5, #0
 8002622:	f43f ae10 	beq.w	8002246 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8002626:	462e      	mov	r6, r5
 8002628:	e614      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800262a:	2101      	movs	r1, #1
 800262c:	1d20      	adds	r0, r4, #4
 800262e:	f7ff fb8b 	bl	8001d48 <RCCEx_PLL2_Config>
 8002632:	4605      	mov	r5, r0
 8002634:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002636:	2d00      	cmp	r5, #0
 8002638:	f43f ae25 	beq.w	8002286 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800263c:	462e      	mov	r6, r5
 800263e:	e62a      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002640:	2101      	movs	r1, #1
 8002642:	1d20      	adds	r0, r4, #4
 8002644:	f7ff fb80 	bl	8001d48 <RCCEx_PLL2_Config>
 8002648:	4605      	mov	r5, r0
 800264a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800264c:	2d00      	cmp	r5, #0
 800264e:	f43f addb 	beq.w	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002652:	462e      	mov	r6, r5
 8002654:	e5df      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->RngClockSelection)
 8002656:	2a00      	cmp	r2, #0
 8002658:	f47f af26 	bne.w	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800265c:	e7bd      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x6a2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800265e:	2102      	movs	r1, #2
 8002660:	1d20      	adds	r0, r4, #4
 8002662:	f7ff fb71 	bl	8001d48 <RCCEx_PLL2_Config>
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800266a:	bb2d      	cbnz	r5, 80026b8 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800266c:	4951      	ldr	r1, [pc, #324]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800266e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002670:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002672:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002676:	4302      	orrs	r2, r0
 8002678:	64ca      	str	r2, [r1, #76]	; 0x4c
 800267a:	e4fa      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800267c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800267e:	2d00      	cmp	r5, #0
 8002680:	d15e      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x808>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002682:	494c      	ldr	r1, [pc, #304]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002684:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002686:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002688:	f022 0207 	bic.w	r2, r2, #7
 800268c:	4302      	orrs	r2, r0
 800268e:	650a      	str	r2, [r1, #80]	; 0x50
 8002690:	e47d      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002692:	2102      	movs	r1, #2
 8002694:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002698:	f7ff fbd2 	bl	8001e40 <RCCEx_PLL3_Config>
 800269c:	4605      	mov	r5, r0
 800269e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80026a0:	2d00      	cmp	r5, #0
 80026a2:	f43f ae10 	beq.w	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80026a6:	462e      	mov	r6, r5
 80026a8:	e615      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026aa:	4942      	ldr	r1, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80026ac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80026ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026b2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80026b4:	2d00      	cmp	r5, #0
 80026b6:	d0d9      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x734>
 80026b8:	462e      	mov	r6, r5
 80026ba:	e4da      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026bc:	493d      	ldr	r1, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80026be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80026c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026c4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80026c6:	2d00      	cmp	r5, #0
 80026c8:	f43f aef9 	beq.w	80024be <HAL_RCCEx_PeriphCLKConfig+0x586>
 80026cc:	462e      	mov	r6, r5
 80026ce:	e53e      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026d0:	2102      	movs	r1, #2
 80026d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026d6:	f7ff fbb3 	bl	8001e40 <RCCEx_PLL3_Config>
 80026da:	4605      	mov	r5, r0
 80026dc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80026de:	2d00      	cmp	r5, #0
 80026e0:	f43f ae11 	beq.w	8002306 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80026e4:	462e      	mov	r6, r5
 80026e6:	e616      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026e8:	2102      	movs	r1, #2
 80026ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026ee:	f7ff fba7 	bl	8001e40 <RCCEx_PLL3_Config>
 80026f2:	4605      	mov	r5, r0
 80026f4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80026f6:	2d00      	cmp	r5, #0
 80026f8:	f43f ae25 	beq.w	8002346 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80026fc:	462e      	mov	r6, r5
 80026fe:	e62a      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002700:	2101      	movs	r1, #1
 8002702:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002706:	f7ff fb9b 	bl	8001e40 <RCCEx_PLL3_Config>
 800270a:	4605      	mov	r5, r0
 800270c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800270e:	2d00      	cmp	r5, #0
 8002710:	f43f ace6 	beq.w	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002714:	462e      	mov	r6, r5
 8002716:	e4ea      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002718:	2101      	movs	r1, #1
 800271a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800271e:	f7ff fb8f 	bl	8001e40 <RCCEx_PLL3_Config>
 8002722:	4605      	mov	r5, r0
 8002724:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002726:	2d00      	cmp	r5, #0
 8002728:	f43f acf9 	beq.w	800211e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800272c:	462e      	mov	r6, r5
 800272e:	e4fe      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002730:	4920      	ldr	r1, [pc, #128]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
      break;
 8002732:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002734:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002736:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800273a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800273c:	2d00      	cmp	r5, #0
 800273e:	d0a0      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8002740:	462e      	mov	r6, r5
 8002742:	e424      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002744:	2100      	movs	r1, #0
 8002746:	1d20      	adds	r0, r4, #4
 8002748:	f7ff fafe 	bl	8001d48 <RCCEx_PLL2_Config>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	4605      	mov	r5, r0
      break;
 8002750:	e795      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x746>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002752:	2100      	movs	r1, #0
 8002754:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002758:	f7ff fb72 	bl	8001e40 <RCCEx_PLL3_Config>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	4605      	mov	r5, r0
      break;
 8002760:	e78d      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x746>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002762:	2102      	movs	r1, #2
 8002764:	3024      	adds	r0, #36	; 0x24
 8002766:	f7ff fb6b 	bl	8001e40 <RCCEx_PLL3_Config>
 800276a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800276c:	2e00      	cmp	r6, #0
 800276e:	f000 8115 	beq.w	800299c <HAL_RCCEx_PeriphCLKConfig+0xa64>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	f7ff bbfd 	b.w	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800277a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800277c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002780:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8002782:	2d00      	cmp	r5, #0
 8002784:	f43f ac8e 	beq.w	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002788:	462e      	mov	r6, r5
 800278a:	e492      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800278c:	4909      	ldr	r1, [pc, #36]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800278e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002790:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002794:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8002796:	2d00      	cmp	r5, #0
 8002798:	f43f ac31 	beq.w	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800279c:	462e      	mov	r6, r5
 800279e:	e436      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80027a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027a8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	f43f ac49 	beq.w	8002042 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80027b0:	462e      	mov	r6, r5
 80027b2:	e44e      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80027b4:	58024400 	.word	0x58024400
 80027b8:	58024800 	.word	0x58024800
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027bc:	498f      	ldr	r1, [pc, #572]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 80027be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027c4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80027c6:	2d00      	cmp	r5, #0
 80027c8:	f43f abf8 	beq.w	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x84>
 80027cc:	462e      	mov	r6, r5
 80027ce:	f7ff bbfc 	b.w	8001fca <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027d2:	2100      	movs	r1, #0
 80027d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027d8:	f7ff fb32 	bl	8001e40 <RCCEx_PLL3_Config>
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	4605      	mov	r5, r0
      break;
 80027e0:	e40a      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027e2:	2102      	movs	r1, #2
 80027e4:	3004      	adds	r0, #4
 80027e6:	f7ff faaf 	bl	8001d48 <RCCEx_PLL2_Config>
 80027ea:	4606      	mov	r6, r0
      break;
 80027ec:	e7be      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x834>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027ee:	2100      	movs	r1, #0
 80027f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027f4:	f7ff fb24 	bl	8001e40 <RCCEx_PLL3_Config>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	4605      	mov	r5, r0
      break;
 80027fc:	e41e      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027fe:	2100      	movs	r1, #0
 8002800:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002804:	f7ff fb1c 	bl	8001e40 <RCCEx_PLL3_Config>
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	4605      	mov	r5, r0
      break;
 800280c:	e447      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800280e:	2100      	movs	r1, #0
 8002810:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002814:	f7ff fb14 	bl	8001e40 <RCCEx_PLL3_Config>
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	4605      	mov	r5, r0
      break;
 800281c:	f7ff bbcb 	b.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002820:	4976      	ldr	r1, [pc, #472]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 8002822:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002824:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002828:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800282a:	2d00      	cmp	r5, #0
 800282c:	f43f ae5c 	beq.w	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8002830:	462e      	mov	r6, r5
 8002832:	e5cf      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002834:	1d20      	adds	r0, r4, #4
 8002836:	f7ff fa87 	bl	8001d48 <RCCEx_PLL2_Config>
 800283a:	4605      	mov	r5, r0
 800283c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800283e:	2d00      	cmp	r5, #0
 8002840:	f43f ae65 	beq.w	800250e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8002844:	462e      	mov	r6, r5
 8002846:	e5b3      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 8002848:	2601      	movs	r6, #1
 800284a:	4635      	mov	r5, r6
 800284c:	e4e3      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800284e:	2102      	movs	r1, #2
 8002850:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002854:	f7ff faf4 	bl	8001e40 <RCCEx_PLL3_Config>
 8002858:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800285c:	b100      	cbz	r0, 8002860 <HAL_RCCEx_PeriphCLKConfig+0x928>
        status = HAL_ERROR;
 800285e:	2601      	movs	r6, #1
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	e58e      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002864:	2102      	movs	r1, #2
 8002866:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800286a:	f7ff fae9 	bl	8001e40 <RCCEx_PLL3_Config>
 800286e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002872:	b100      	cbz	r0, 8002876 <HAL_RCCEx_PeriphCLKConfig+0x93e>
          status = HAL_ERROR;
 8002874:	2601      	movs	r6, #1
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	e575      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800287a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800287e:	f43f ad5f 	beq.w	8002340 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002882:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8002886:	f43f ad5b 	beq.w	8002340 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800288a:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800288e:	f43f ad57 	beq.w	8002340 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 8002892:	2601      	movs	r6, #1
 8002894:	4635      	mov	r5, r6
 8002896:	e55e      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002898:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800289c:	f43f ad30 	beq.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80028a0:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80028a4:	f43f ad2c 	beq.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80028a8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80028ac:	f43f ad28 	beq.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 80028b0:	2601      	movs	r6, #1
 80028b2:	4635      	mov	r5, r6
 80028b4:	e52f      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Spi6ClockSelection)
 80028b6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80028ba:	f43f ac2d 	beq.w	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80028be:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80028c2:	f43f ac29 	beq.w	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80028c6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80028ca:	f43f ac25 	beq.w	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 80028ce:	2601      	movs	r6, #1
 80028d0:	4635      	mov	r5, r6
 80028d2:	e42c      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80028d4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80028d8:	f43f abff 	beq.w	80020da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80028dc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80028e0:	f43f abfb 	beq.w	80020da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80028e4:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80028e8:	f43f abf7 	beq.w	80020da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 80028ec:	2601      	movs	r6, #1
 80028ee:	4635      	mov	r5, r6
 80028f0:	f7ff bbfd 	b.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80028f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80028f8:	f43f ace2 	beq.w	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80028fc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002900:	f43f acde 	beq.w	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002904:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8002908:	f43f acda 	beq.w	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 800290c:	2601      	movs	r6, #1
 800290e:	4635      	mov	r5, r6
 8002910:	e4e1      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
            ret = HAL_TIMEOUT;
 8002912:	2603      	movs	r6, #3
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	4635      	mov	r5, r6
 8002918:	e438      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Sai4AClockSelection)
 800291a:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800291e:	f43f ab6b 	beq.w	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002922:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002926:	f43f ab67 	beq.w	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 800292a:	2601      	movs	r6, #1
 800292c:	4635      	mov	r5, r6
 800292e:	f7ff bb6e 	b.w	800200e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002932:	2ac0      	cmp	r2, #192	; 0xc0
 8002934:	f43f ab3f 	beq.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8002938:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800293c:	f43f ab3b 	beq.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8002940:	2601      	movs	r6, #1
 8002942:	4635      	mov	r5, r6
 8002944:	f7ff bb41 	b.w	8001fca <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002948:	bb1a      	cbnz	r2, 8002992 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800294a:	482c      	ldr	r0, [pc, #176]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 800294c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800294e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002952:	62c1      	str	r1, [r0, #44]	; 0x2c
      break;
 8002954:	f7ff bb06 	b.w	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002958:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800295c:	f43f ab6e 	beq.w	800203c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002960:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8002964:	f43f ab6a 	beq.w	800203c <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 8002968:	2601      	movs	r6, #1
 800296a:	4635      	mov	r5, r6
 800296c:	f7ff bb71 	b.w	8002052 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002970:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002974:	f43f ab93 	beq.w	800209e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002978:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800297c:	f43f ab8f 	beq.w	800209e <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8002980:	2601      	movs	r6, #1
 8002982:	4635      	mov	r5, r6
 8002984:	f7ff bb95 	b.w	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 8002988:	2a00      	cmp	r2, #0
 800298a:	f43f ae6e 	beq.w	800266a <HAL_RCCEx_PeriphCLKConfig+0x732>
 800298e:	f7ff bb6e 	b.w	800206e <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 8002992:	2601      	movs	r6, #1
 8002994:	f7ff baed 	b.w	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002998:	462e      	mov	r6, r5
 800299a:	e535      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800299c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	f7ff bae0 	b.w	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a4:	4815      	ldr	r0, [pc, #84]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xac4>)
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0xac8>)
 80029a8:	6901      	ldr	r1, [r0, #16]
 80029aa:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80029ae:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80029b2:	430a      	orrs	r2, r1
 80029b4:	6102      	str	r2, [r0, #16]
 80029b6:	e5ed      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        tickstart = HAL_GetTick();
 80029b8:	f7fd fcf2 	bl	80003a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029bc:	4f0f      	ldr	r7, [pc, #60]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0xac4>)
        tickstart = HAL_GetTick();
 80029be:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c4:	e005      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fd fceb 	bl	80003a0 <HAL_GetTick>
 80029ca:	eba0 0009 	sub.w	r0, r0, r9
 80029ce:	4540      	cmp	r0, r8
 80029d0:	d89f      	bhi.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x9da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d4:	079b      	lsls	r3, r3, #30
 80029d6:	d5f6      	bpl.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 80029d8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80029dc:	e5cf      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x646>
 80029de:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80029e0:	462e      	mov	r6, r5
 80029e2:	f7ff bbd3 	b.w	800218c <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 80029e6:	2601      	movs	r6, #1
 80029e8:	4635      	mov	r5, r6
 80029ea:	e454      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 80029ec:	2601      	movs	r6, #1
 80029ee:	4635      	mov	r5, r6
 80029f0:	f7ff bbc9 	b.w	8002186 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      ret = HAL_ERROR;
 80029f4:	2601      	movs	r6, #1
 80029f6:	4635      	mov	r5, r6
 80029f8:	e42c      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80029fa:	bf00      	nop
 80029fc:	58024400 	.word	0x58024400
 8002a00:	00ffffcf 	.word	0x00ffffcf

08002a04 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a04:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 8002a06:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a08:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002a0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002a0c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002a0e:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002a12:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RCCEx_GetPLL2ClockFreq+0xcc>
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002a18:	f3c5 1500 	ubfx	r5, r5, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002a1c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a20:	f004 0403 	and.w	r4, r4, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002a24:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8002a28:	2c01      	cmp	r4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002a2a:	ee07 1a90 	vmov	s15, r1
 8002a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    switch (pllsource)
 8002a32:	d002      	beq.n	8002a3a <HAL_RCCEx_GetPLL2ClockFreq+0x36>
 8002a34:	d358      	bcc.n	8002ae8 <HAL_RCCEx_GetPLL2ClockFreq+0xe4>
 8002a36:	2c02      	cmp	r4, #2
 8002a38:	d04f      	beq.n	8002ada <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8002b44 <HAL_RCCEx_GetPLL2ClockFreq+0x140>
 8002a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a46:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002a48:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8002a4c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8002b48 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a60:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002a64:	eee6 7a86 	vfma.f32	s15, s13, s12
 8002a68:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002a6c:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 8002a6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a72:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002a74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002a78:	ee06 3a90 	vmov	s13, r3
 8002a7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8002a80:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002a82:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002a86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002a8e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002a92:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002a94:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002a98:	ee06 3a90 	vmov	s13, r3
 8002a9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002aa0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002aa4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002aa8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002aac:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002ab0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002ab2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002ab6:	ee07 3a10 	vmov	s14, r3
 8002aba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002abe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002ac2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ac6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002aca:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8002ace:	4770      	bx	lr
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002ad0:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002ad2:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002ad4:	6083      	str	r3, [r0, #8]
}
 8002ad6:	bc30      	pop	{r4, r5}
 8002ad8:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8002b4c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae6:	e7ae      	b.n	8002a46 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ae8:	6811      	ldr	r1, [r2, #0]
 8002aea:	0689      	lsls	r1, r1, #26
 8002aec:	d520      	bpl.n	8002b30 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002aee:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002af0:	ee07 3a90 	vmov	s15, r3
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002af6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002afa:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002afe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b04:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8002b48 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b08:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0e:	ee07 1a10 	vmov	s14, r1
 8002b12:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002b16:	ee07 3a10 	vmov	s14, r3
 8002b1a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8002b1e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8002b22:	ee76 7a24 	vadd.f32	s15, s12, s9
 8002b26:	eee6 7a85 	vfma.f32	s15, s13, s10
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	e79d      	b.n	8002a6c <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8002b54 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3c:	e783      	b.n	8002a46 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
 8002b44:	4a742400 	.word	0x4a742400
 8002b48:	39000000 	.word	0x39000000
 8002b4c:	4af42400 	.word	0x4af42400
 8002b50:	03d09000 	.word	0x03d09000
 8002b54:	4c742400 	.word	0x4c742400

08002b58 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b58:	4a4e      	ldr	r2, [pc, #312]	; (8002c94 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8002b5a:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b5c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002b5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002b60:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002b62:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002b66:	6c51      	ldr	r1, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d05b      	beq.n	8002c24 <HAL_RCCEx_GetPLL3ClockFreq+0xcc>
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002b6c:	f3c5 2500 	ubfx	r5, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002b70:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b74:	f004 0403 	and.w	r4, r4, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002b78:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8002b7c:	2c01      	cmp	r4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002b7e:	ee07 1a90 	vmov	s15, r1
 8002b82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    switch (pllsource)
 8002b86:	d002      	beq.n	8002b8e <HAL_RCCEx_GetPLL3ClockFreq+0x36>
 8002b88:	d358      	bcc.n	8002c3c <HAL_RCCEx_GetPLL3ClockFreq+0xe4>
 8002b8a:	2c02      	cmp	r4, #2
 8002b8c:	d04f      	beq.n	8002c2e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8002c98 <HAL_RCCEx_GetPLL3ClockFreq+0x140>
 8002b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b9c:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8002ba0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8002c9c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002bb8:	eee6 7a86 	vfma.f32	s15, s13, s12
 8002bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002bc0:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 8002bc2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002bc6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bc8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002bcc:	ee06 3a90 	vmov	s13, r3
 8002bd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8002bd4:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002bd6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002bda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bde:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002be2:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002be6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002be8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002bec:	ee06 3a90 	vmov	s13, r3
 8002bf0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002bf4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002bf8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bfc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002c00:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002c04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c06:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002c0a:	ee07 3a10 	vmov	s14, r3
 8002c0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c12:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002c16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c1a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002c1e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8002c22:	4770      	bx	lr
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002c24:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002c26:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002c28:	6083      	str	r3, [r0, #8]
}
 8002c2a:	bc30      	pop	{r4, r5}
 8002c2c:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8002ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3a:	e7ae      	b.n	8002b9a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c3c:	6811      	ldr	r1, [r2, #0]
 8002c3e:	0689      	lsls	r1, r1, #26
 8002c40:	d520      	bpl.n	8002c84 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c42:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c44:	ee07 3a90 	vmov	s15, r3
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c4a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c4e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c58:	ed9f 5a10 	vldr	s10, [pc, #64]	; 8002c9c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c5c:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c62:	ee07 1a10 	vmov	s14, r1
 8002c66:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002c6a:	ee07 3a10 	vmov	s14, r3
 8002c6e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8002c72:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8002c76:	ee76 7a24 	vadd.f32	s15, s12, s9
 8002c7a:	eee6 7a85 	vfma.f32	s15, s13, s10
 8002c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c82:	e79d      	b.n	8002bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8002ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8002c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c90:	e783      	b.n	8002b9a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8002c92:	bf00      	nop
 8002c94:	58024400 	.word	0x58024400
 8002c98:	4a742400 	.word	0x4a742400
 8002c9c:	39000000 	.word	0x39000000
 8002ca0:	4af42400 	.word	0x4af42400
 8002ca4:	03d09000 	.word	0x03d09000
 8002ca8:	4c742400 	.word	0x4c742400

08002cac <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cac:	4a4e      	ldr	r2, [pc, #312]	; (8002de8 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
{
 8002cae:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cb0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8002cb2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002cb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8002cb6:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002cba:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d05b      	beq.n	8002d78 <HAL_RCCEx_GetPLL1ClockFreq+0xcc>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002cc0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002cc4:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cc8:	f004 0403 	and.w	r4, r4, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ccc:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8002cd0:	2c01      	cmp	r4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002cd2:	ee07 1a90 	vmov	s15, r1
 8002cd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    switch (pllsource)
 8002cda:	d059      	beq.n	8002d90 <HAL_RCCEx_GetPLL1ClockFreq+0xe4>
 8002cdc:	d35f      	bcc.n	8002d9e <HAL_RCCEx_GetPLL1ClockFreq+0xf2>
 8002cde:	2c02      	cmp	r4, #2
 8002ce0:	d04f      	beq.n	8002d82 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8002dec <HAL_RCCEx_GetPLL1ClockFreq+0x140>
 8002cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002cf0:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8002cf4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8002df0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d08:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002d0c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8002d10:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8002d14:	4a34      	ldr	r2, [pc, #208]	; (8002de8 <HAL_RCCEx_GetPLL1ClockFreq+0x13c>)
 8002d16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d1c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002d20:	ee06 3a90 	vmov	s13, r3
 8002d24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8002d28:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8002d2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002d2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d32:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002d36:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8002d3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d3c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002d40:	ee06 3a90 	vmov	s13, r3
 8002d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002d48:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002d4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d50:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002d54:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8002d58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d5a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002d5e:	ee07 3a10 	vmov	s14, r3
 8002d62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d66:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002d6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d6e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002d72:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8002d76:	4770      	bx	lr
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8002d78:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002d7a:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8002d7c:	6083      	str	r3, [r0, #8]
}
 8002d7e:	bc30      	pop	{r4, r5}
 8002d80:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8002df4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8002d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d8e:	e7ae      	b.n	8002cee <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	ed9f 5a18 	vldr	s10, [pc, #96]	; 8002df8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8002d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9c:	e7a7      	b.n	8002cee <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d9e:	6811      	ldr	r1, [r2, #0]
 8002da0:	0689      	lsls	r1, r1, #26
 8002da2:	d59e      	bpl.n	8002ce2 <HAL_RCCEx_GetPLL1ClockFreq+0x36>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002da4:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002da6:	ee07 3a90 	vmov	s15, r3
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002daa:	4914      	ldr	r1, [pc, #80]	; (8002dfc <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dac:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002db0:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002db4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dba:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8002df0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dbe:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc4:	ee07 1a10 	vmov	s14, r1
 8002dc8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002dcc:	ee07 3a10 	vmov	s14, r3
 8002dd0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8002dd4:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8002dd8:	ee76 7a24 	vadd.f32	s15, s12, s9
 8002ddc:	eee6 7a85 	vfma.f32	s15, s13, s10
 8002de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de4:	e796      	b.n	8002d14 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400
 8002dec:	4c742400 	.word	0x4c742400
 8002df0:	39000000 	.word	0x39000000
 8002df4:	4af42400 	.word	0x4af42400
 8002df8:	4a742400 	.word	0x4a742400
 8002dfc:	03d09000 	.word	0x03d09000

08002e00 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002e00:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8002e04:	b500      	push	{lr}
 8002e06:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002e08:	d01f      	beq.n	8002e4a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002e0a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002e0e:	d027      	beq.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002e10:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002e14:	d034      	beq.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8002e16:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002e1a:	d069      	beq.n	8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8002e1c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002e20:	d03b      	beq.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8002e22:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002e26:	f000 8084 	beq.w	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8002e2a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002e2e:	f000 8102 	beq.w	8003036 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8002e32:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002e36:	f000 8119 	beq.w	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8002e3a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e3e:	f000 80c0 	beq.w	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
          frequency = 0;
 8002e42:	2000      	movs	r0, #0
}
 8002e44:	b005      	add	sp, #20
 8002e46:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002e4a:	4ba1      	ldr	r3, [pc, #644]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002e4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002e4e:	f000 0007 	and.w	r0, r0, #7
      switch (saiclocksource)
 8002e52:	2804      	cmp	r0, #4
 8002e54:	d8f5      	bhi.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8002e56:	e8df f000 	tbb	[pc, r0]
 8002e5a:	9142      	.short	0x9142
 8002e5c:	3438      	.short	0x3438
 8002e5e:	82          	.byte	0x82
 8002e5f:	00          	.byte	0x00
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002e60:	4b9b      	ldr	r3, [pc, #620]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002e62:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002e64:	f400 70e0 	and.w	r0, r0, #448	; 0x1c0
      switch (saiclocksource)
 8002e68:	2880      	cmp	r0, #128	; 0x80
 8002e6a:	d02f      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8002e6c:	d84e      	bhi.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d036      	beq.n	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002e72:	2840      	cmp	r0, #64	; 0x40
 8002e74:	d1e5      	bne.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002e7c:	d0e2      	beq.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8002e7e:	e069      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8002e80:	4b93      	ldr	r3, [pc, #588]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002e82:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002e84:	f400 0060 	and.w	r0, r0, #14680064	; 0xe00000
      switch (saiclocksource)
 8002e88:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8002e8c:	d01e      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8002e8e:	d815      	bhi.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e90:	b330      	cbz	r0, 8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002e92:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8002e98:	e7d3      	b.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8002e9a:	4b8d      	ldr	r3, [pc, #564]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002e9c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002e9e:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
      switch (srcclk)
 8002ea2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002ea6:	d011      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8002ea8:	f200 8084 	bhi.w	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8002eac:	b1c0      	cbz	r0, 8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002eae:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002eb2:	d1c6      	bne.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	0118      	lsls	r0, r3, #4
 8002eb8:	d5c3      	bpl.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8002eba:	e04b      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      switch (saiclocksource)
 8002ebc:	f5b0 0fc0 	cmp.w	r0, #6291456	; 0x600000
 8002ec0:	d174      	bne.n	8002fac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ec2:	4884      	ldr	r0, [pc, #528]	; (80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8002ec4:	b005      	add	sp, #20
 8002ec6:	f85d fb04 	ldr.w	pc, [sp], #4
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002eca:	4b81      	ldr	r3, [pc, #516]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8002ed2:	d0b7      	beq.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002ed4:	a801      	add	r0, sp, #4
 8002ed6:	f7ff fe3f 	bl	8002b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002eda:	9801      	ldr	r0, [sp, #4]
 8002edc:	e7b2      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002ede:	4b7c      	ldr	r3, [pc, #496]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	019b      	lsls	r3, r3, #6
 8002ee4:	d5ae      	bpl.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002ee6:	a801      	add	r0, sp, #4
 8002ee8:	f7ff fee0 	bl	8002cac <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8002eec:	9802      	ldr	r0, [sp, #8]
 8002eee:	e7a9      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8002ef0:	4b77      	ldr	r3, [pc, #476]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002ef2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002ef4:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
      switch (saiclocksource)
 8002ef8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8002efc:	d0e6      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8002efe:	d83f      	bhi.n	8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d0ed      	beq.n	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002f04:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002f08:	d0b5      	beq.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8002f0a:	e79a      	b.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      switch (saiclocksource)
 8002f0c:	28c0      	cmp	r0, #192	; 0xc0
 8002f0e:	d0d8      	beq.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8002f10:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002f14:	d195      	bne.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002f18:	6819      	ldr	r1, [r3, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f1a:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002f1e:	0748      	lsls	r0, r1, #29
 8002f20:	d564      	bpl.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	d162      	bne.n	8002fec <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	486b      	ldr	r0, [pc, #428]	; (80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002f2a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002f2e:	40d8      	lsrs	r0, r3
 8002f30:	e788      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002f34:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002f36:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      switch (srcclk)
 8002f3a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002f3e:	d05e      	beq.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8002f40:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8002f44:	d023      	beq.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	f47f af7b 	bne.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0119      	lsls	r1, r3, #4
 8002f50:	f57f af78 	bpl.w	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f54:	a801      	add	r0, sp, #4
 8002f56:	f7ff fd55 	bl	8002a04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002f5a:	9801      	ldr	r0, [sp, #4]
 8002f5c:	e772      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f5e:	4a5c      	ldr	r2, [pc, #368]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002f60:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002f62:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002f68:	0749      	lsls	r1, r1, #29
 8002f6a:	d552      	bpl.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d150      	bne.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	4859      	ldr	r0, [pc, #356]	; (80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002f74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002f78:	40d8      	lsrs	r0, r3
 8002f7a:	e763      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002f7c:	4b54      	ldr	r3, [pc, #336]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002f7e:	e77a      	b.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      switch (saiclocksource)
 8002f80:	f1b0 7f40 	cmp.w	r0, #50331648	; 0x3000000
 8002f84:	d09d      	beq.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8002f86:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002f8a:	f47f af5a 	bne.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002f90:	6819      	ldr	r1, [r3, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f92:	f002 5340 	and.w	r3, r2, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002f96:	074a      	lsls	r2, r1, #29
 8002f98:	d53b      	bpl.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d139      	bne.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f9e:	4b4c      	ldr	r3, [pc, #304]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002fa0:	484d      	ldr	r0, [pc, #308]	; (80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002fa8:	40d8      	lsrs	r0, r3
 8002faa:	e74b      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
      switch (saiclocksource)
 8002fac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8002fb0:	d0b1      	beq.n	8002f16 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8002fb2:	e746      	b.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      switch (srcclk)
 8002fb4:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 8002fb8:	d083      	beq.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8002fba:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002fbe:	d0e6      	beq.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8002fc0:	e73f      	b.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8002fc2:	4b43      	ldr	r3, [pc, #268]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002fc4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002fc6:	f000 5040 	and.w	r0, r0, #805306368	; 0x30000000
      switch (srcclk)
 8002fca:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8002fce:	d077      	beq.n	80030c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8002fd0:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8002fd4:	d069      	beq.n	80030aa <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	f47f af33 	bne.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002fdc:	461a      	mov	r2, r3
            frequency = HSE_VALUE;
 8002fde:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002fe0:	6812      	ldr	r2, [r2, #0]
            frequency = HSE_VALUE;
 8002fe2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002fe6:	bf18      	it	ne
 8002fe8:	4618      	movne	r0, r3
 8002fea:	e72b      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8002fec:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	05d9      	lsls	r1, r3, #23
 8002ff2:	d532      	bpl.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8002ff4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002ff8:	d12f      	bne.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
            frequency = CSI_VALUE;
 8002ffa:	4839      	ldr	r0, [pc, #228]	; (80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8002ffc:	e722      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8003004:	f43f af1e 	beq.w	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003008:	a801      	add	r0, sp, #4
 800300a:	f7ff fda5 	bl	8002b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800300e:	9803      	ldr	r0, [sp, #12]
 8003010:	e718      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003012:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	05d0      	lsls	r0, r2, #23
 8003018:	d502      	bpl.n	8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
 800301a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800301e:	d0ec      	beq.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003020:	4a2b      	ldr	r2, [pc, #172]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	0391      	lsls	r1, r2, #14
 8003026:	f57f af0c 	bpl.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800302a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800302e:	f47f af08 	bne.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
            frequency = HSE_VALUE;
 8003032:	482a      	ldr	r0, [pc, #168]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003034:	e706      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8003038:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
      switch (srcclk)
 800303a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800303e:	f43f af4f 	beq.w	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003042:	2800      	cmp	r0, #0
 8003044:	f43f aefd 	beq.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	011a      	lsls	r2, r3, #4
 800304c:	f57f aef9 	bpl.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003050:	a801      	add	r0, sp, #4
 8003052:	f7ff fcd7 	bl	8002a04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003056:	9803      	ldr	r0, [sp, #12]
 8003058:	e6f4      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	039b      	lsls	r3, r3, #14
 8003060:	f57f aeef 	bpl.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003064:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003068:	d0e3      	beq.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 800306a:	e6ea      	b.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800306c:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800306e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003070:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003078:	d044      	beq.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800307a:	d910      	bls.n	800309e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d038      	beq.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003086:	d02d      	beq.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003088:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800308c:	f47f aed9 	bne.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003090:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8003092:	6810      	ldr	r0, [r2, #0]
 8003094:	f010 0004 	ands.w	r0, r0, #4
 8003098:	f43f aed4 	beq.w	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 800309c:	e768      	b.n	8002f70 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
      switch (srcclk)
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d039      	beq.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 80030a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a6:	f47f aecc 	bne.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80030b2:	f43f aec7 	beq.w	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80030b6:	a801      	add	r0, sp, #4
 80030b8:	f7ff fca4 	bl	8002a04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80030bc:	9802      	ldr	r0, [sp, #8]
 80030be:	e6c1      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80030c8:	f43f aebc 	beq.w	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 80030cc:	e70b      	b.n	8002ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400
 80030d4:	00bb8000 	.word	0x00bb8000
 80030d8:	03d09000 	.word	0x03d09000
 80030dc:	007a1200 	.word	0x007a1200
 80030e0:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
            frequency = HSE_VALUE;
 80030e6:	4813      	ldr	r0, [pc, #76]	; (8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030e8:	681b      	ldr	r3, [r3, #0]
            frequency = HSE_VALUE;
 80030ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030ee:	bf08      	it	eq
 80030f0:	2000      	moveq	r0, #0
 80030f2:	e6a7      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80030f4:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
            frequency = CSI_VALUE;
 80030f6:	4810      	ldr	r0, [pc, #64]	; (8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80030f8:	681b      	ldr	r3, [r3, #0]
            frequency = CSI_VALUE;
 80030fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030fe:	bf08      	it	eq
 8003100:	2000      	moveq	r0, #0
 8003102:	e69f      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003104:	6813      	ldr	r3, [r2, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f57f ae9b 	bpl.w	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800310c:	a801      	add	r0, sp, #4
 800310e:	f7ff fd23 	bl	8002b58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003112:	9802      	ldr	r0, [sp, #8]
 8003114:	e696      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003116:	f7fe fdd7 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800311c:	4a07      	ldr	r2, [pc, #28]	; (800313c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	40d8      	lsrs	r0, r3
          break;
 800312c:	e68a      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 800312e:	bf00      	nop
 8003130:	58024400 	.word	0x58024400
 8003134:	007a1200 	.word	0x007a1200
 8003138:	003d0900 	.word	0x003d0900
 800313c:	08004bc0 	.word	0x08004bc0

08003140 <HAL_SPI_Init>:
  uint32_t crc_length = 0UL;
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003140:	2800      	cmp	r0, #0
 8003142:	f000 80a8 	beq.w	8003296 <HAL_SPI_Init+0x156>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003146:	6801      	ldr	r1, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003148:	2200      	movs	r2, #0
{
 800314a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800314c:	4b55      	ldr	r3, [pc, #340]	; (80032a4 <HAL_SPI_Init+0x164>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800314e:	6282      	str	r2, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003150:	4299      	cmp	r1, r3
 8003152:	d015      	beq.n	8003180 <HAL_SPI_Init+0x40>
 8003154:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8003158:	4299      	cmp	r1, r3
 800315a:	d011      	beq.n	8003180 <HAL_SPI_Init+0x40>
 800315c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003160:	4299      	cmp	r1, r3
 8003162:	d00d      	beq.n	8003180 <HAL_SPI_Init+0x40>
 8003164:	68c7      	ldr	r7, [r0, #12]
 8003166:	2f0f      	cmp	r7, #15
 8003168:	d808      	bhi.n	800317c <HAL_SPI_Init+0x3c>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800316a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800316c:	f107 0308 	add.w	r3, r7, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003170:	096a      	lsrs	r2, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 8003172:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8003174:	fb02 3303 	mla	r3, r2, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003178:	2b08      	cmp	r3, #8
 800317a:	d909      	bls.n	8003190 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
 800317e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003180:	68c7      	ldr	r7, [r0, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003182:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8003184:	f107 0308 	add.w	r3, r7, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003188:	096a      	lsrs	r2, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800318a:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 800318c:	fb02 3303 	mla	r3, r2, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003190:	4c44      	ldr	r4, [pc, #272]	; (80032a4 <HAL_SPI_Init+0x164>)
 8003192:	4a45      	ldr	r2, [pc, #276]	; (80032a8 <HAL_SPI_Init+0x168>)
 8003194:	4291      	cmp	r1, r2
 8003196:	bf18      	it	ne
 8003198:	42a1      	cmpne	r1, r4
 800319a:	d050      	beq.n	800323e <HAL_SPI_Init+0xfe>
 800319c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031a0:	4291      	cmp	r1, r2
 80031a2:	d04c      	beq.n	800323e <HAL_SPI_Init+0xfe>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80031a8:	4604      	mov	r4, r0
 80031aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d04e      	beq.n	8003250 <HAL_SPI_Init+0x110>
 80031b2:	2600      	movs	r6, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 80031b4:	2202      	movs	r2, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80031b6:	69a3      	ldr	r3, [r4, #24]
 80031b8:	6860      	ldr	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80031ba:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80031be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 80031c2:	680a      	ldr	r2, [r1, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80031c4:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	600a      	str	r2, [r1, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80031ce:	d055      	beq.n	800327c <HAL_SPI_Init+0x13c>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031d2:	ea46 0c05 	orr.w	ip, r6, r5
 80031d6:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80031da:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031dc:	ea4c 0606 	orr.w	r6, ip, r6
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031e0:	6963      	ldr	r3, [r4, #20]
 80031e2:	432a      	orrs	r2, r5
 80031e4:	6a25      	ldr	r5, [r4, #32]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031e6:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031e8:	6926      	ldr	r6, [r4, #16]
 80031ea:	4332      	orrs	r2, r6
 80031ec:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031ee:	608f      	str	r7, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031f0:	4313      	orrs	r3, r2
 80031f2:	68a7      	ldr	r7, [r4, #8]
 80031f4:	ea43 0205 	orr.w	r2, r3, r5
 80031f8:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80031fa:	ea42 0306 	orr.w	r3, r2, r6
 80031fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003200:	433b      	orrs	r3, r7
 8003202:	4313      	orrs	r3, r2
 8003204:	432b      	orrs	r3, r5
 8003206:	4303      	orrs	r3, r0
 8003208:	ea43 030e 	orr.w	r3, r3, lr
 800320c:	60cb      	str	r3, [r1, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800320e:	bb40      	cbnz	r0, 8003262 <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003210:	688b      	ldr	r3, [r1, #8]
 8003212:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800321a:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800321c:	688b      	ldr	r3, [r1, #8]
 800321e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003226:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003228:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	650b      	str	r3, [r1, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003230:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003232:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003234:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003238:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800323c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800323e:	2b10      	cmp	r3, #16
 8003240:	d89c      	bhi.n	800317c <HAL_SPI_Init+0x3c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003242:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8003246:	4604      	mov	r4, r0
 8003248:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1b0      	bne.n	80031b2 <HAL_SPI_Init+0x72>
    hspi->Lock = HAL_UNLOCKED;
 8003250:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8003254:	f001 fab6 	bl	80047c4 <HAL_SPI_MspInit>
 8003258:	6821      	ldr	r1, [r4, #0]
 800325a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800325c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800325e:	68e7      	ldr	r7, [r4, #12]
 8003260:	e7a8      	b.n	80031b4 <HAL_SPI_Init+0x74>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003262:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	650b      	str	r3, [r1, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800326a:	0243      	lsls	r3, r0, #9
 800326c:	d5e0      	bpl.n	8003230 <HAL_SPI_Init+0xf0>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800326e:	68cb      	ldr	r3, [r1, #12]
 8003270:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003276:	4313      	orrs	r3, r2
 8003278:	60cb      	str	r3, [r1, #12]
 800327a:	e7d9      	b.n	8003230 <HAL_SPI_Init+0xf0>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800327c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8003280:	d00b      	beq.n	800329a <HAL_SPI_Init+0x15a>
 8003282:	2800      	cmp	r0, #0
 8003284:	d1a4      	bne.n	80031d0 <HAL_SPI_Init+0x90>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003286:	f1be 5f80 	cmp.w	lr, #268435456	; 0x10000000
 800328a:	d1a1      	bne.n	80031d0 <HAL_SPI_Init+0x90>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800328c:	680a      	ldr	r2, [r1, #0]
 800328e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003292:	600a      	str	r2, [r1, #0]
 8003294:	e79c      	b.n	80031d0 <HAL_SPI_Init+0x90>
    return HAL_ERROR;
 8003296:	2001      	movs	r0, #1
}
 8003298:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800329a:	f1be 0f00 	cmp.w	lr, #0
 800329e:	d0f5      	beq.n	800328c <HAL_SPI_Init+0x14c>
 80032a0:	e796      	b.n	80031d0 <HAL_SPI_Init+0x90>
 80032a2:	bf00      	nop
 80032a4:	40013000 	.word	0x40013000
 80032a8:	40003800 	.word	0x40003800

080032ac <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	2800      	cmp	r0, #0
 80032ae:	f000 8085 	beq.w	80033bc <HAL_TIM_Base_Init+0x110>
{
 80032b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032b8:	4604      	mov	r4, r0
 80032ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d077      	beq.n	80033b2 <HAL_TIM_Base_Init+0x106>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c2:	6825      	ldr	r5, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c6:	483e      	ldr	r0, [pc, #248]	; (80033c0 <HAL_TIM_Base_Init+0x114>)
 80032c8:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	eba5 0000 	sub.w	r0, r5, r0
  tmpcr1 = TIMx->CR1;
 80032d4:	682b      	ldr	r3, [r5, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d6:	fab0 f080 	clz	r0, r0
 80032da:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80032de:	d028      	beq.n	8003332 <HAL_TIM_Base_Init+0x86>
 80032e0:	bb38      	cbnz	r0, 8003332 <HAL_TIM_Base_Init+0x86>
 80032e2:	4a38      	ldr	r2, [pc, #224]	; (80033c4 <HAL_TIM_Base_Init+0x118>)
 80032e4:	4295      	cmp	r5, r2
 80032e6:	d024      	beq.n	8003332 <HAL_TIM_Base_Init+0x86>
 80032e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032ec:	4295      	cmp	r5, r2
 80032ee:	d020      	beq.n	8003332 <HAL_TIM_Base_Init+0x86>
 80032f0:	4935      	ldr	r1, [pc, #212]	; (80033c8 <HAL_TIM_Base_Init+0x11c>)
 80032f2:	4e36      	ldr	r6, [pc, #216]	; (80033cc <HAL_TIM_Base_Init+0x120>)
 80032f4:	1a6f      	subs	r7, r5, r1
 80032f6:	428d      	cmp	r5, r1
 80032f8:	bf18      	it	ne
 80032fa:	42b5      	cmpne	r5, r6
 80032fc:	fab7 f787 	clz	r7, r7
 8003300:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8003304:	d107      	bne.n	8003316 <HAL_TIM_Base_Init+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800330a:	68a2      	ldr	r2, [r4, #8]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330c:	42b5      	cmp	r5, r6
    tmpcr1 |= Structure->CounterMode;
 800330e:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	d017      	beq.n	8003344 <HAL_TIM_Base_Init+0x98>
 8003314:	b9b7      	cbnz	r7, 8003344 <HAL_TIM_Base_Init+0x98>
 8003316:	492e      	ldr	r1, [pc, #184]	; (80033d0 <HAL_TIM_Base_Init+0x124>)
 8003318:	4a2e      	ldr	r2, [pc, #184]	; (80033d4 <HAL_TIM_Base_Init+0x128>)
 800331a:	4295      	cmp	r5, r2
 800331c:	bf18      	it	ne
 800331e:	428d      	cmpne	r5, r1
 8003320:	d005      	beq.n	800332e <HAL_TIM_Base_Init+0x82>
 8003322:	4f2d      	ldr	r7, [pc, #180]	; (80033d8 <HAL_TIM_Base_Init+0x12c>)
 8003324:	1bef      	subs	r7, r5, r7
 8003326:	fab7 f787 	clz	r7, r7
 800332a:	097f      	lsrs	r7, r7, #5
 800332c:	b177      	cbz	r7, 800334c <HAL_TIM_Base_Init+0xa0>
 800332e:	2700      	movs	r7, #0
 8003330:	e008      	b.n	8003344 <HAL_TIM_Base_Init+0x98>
 8003332:	4f25      	ldr	r7, [pc, #148]	; (80033c8 <HAL_TIM_Base_Init+0x11c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003338:	68a1      	ldr	r1, [r4, #8]
 800333a:	1bef      	subs	r7, r5, r7
 800333c:	430b      	orrs	r3, r1
 800333e:	fab7 f787 	clz	r7, r7
 8003342:	097f      	lsrs	r7, r7, #5
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003348:	6922      	ldr	r2, [r4, #16]
 800334a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800334c:	69a2      	ldr	r2, [r4, #24]
 800334e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003352:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	4313      	orrs	r3, r2

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003356:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003358:	602b      	str	r3, [r5, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335a:	62e9      	str	r1, [r5, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800335c:	62aa      	str	r2, [r5, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800335e:	b950      	cbnz	r0, 8003376 <HAL_TIM_Base_Init+0xca>
 8003360:	b94f      	cbnz	r7, 8003376 <HAL_TIM_Base_Init+0xca>
 8003362:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_TIM_Base_Init+0x124>)
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_TIM_Base_Init+0x128>)
 8003366:	429d      	cmp	r5, r3
 8003368:	bf18      	it	ne
 800336a:	4295      	cmpne	r5, r2
 800336c:	d003      	beq.n	8003376 <HAL_TIM_Base_Init+0xca>
 800336e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003372:	429d      	cmp	r5, r3
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0xce>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003376:	6963      	ldr	r3, [r4, #20]
 8003378:	632b      	str	r3, [r5, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337a:	2301      	movs	r3, #1
  return HAL_OK;
 800337c:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800337e:	616b      	str	r3, [r5, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003380:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003388:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800338c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003390:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80033a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033a4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80033a8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80033b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80033b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80033b6:	f001 fb81 	bl	8004abc <HAL_TIM_Base_MspInit>
 80033ba:	e782      	b.n	80032c2 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 80033bc:	2001      	movs	r0, #1
 80033be:	4770      	bx	lr
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40010400 	.word	0x40010400
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40014400 	.word	0x40014400
 80033d8:	40014800 	.word	0x40014800

080033dc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80033dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d001      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0xc>
    return HAL_ERROR;
 80033e4:	2001      	movs	r0, #1
 80033e6:	4770      	bx	lr
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033e8:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_TIM_Base_Start_IT+0x98>)
 80033ec:	4922      	ldr	r1, [pc, #136]	; (8003478 <HAL_TIM_Base_Start_IT+0x9c>)
 80033ee:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80033f2:	bf18      	it	ne
 80033f4:	429a      	cmpne	r2, r3
{
 80033f6:	b470      	push	{r4, r5, r6}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	4c1f      	ldr	r4, [pc, #124]	; (800347c <HAL_TIM_Base_Start_IT+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	2602      	movs	r6, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	4d1f      	ldr	r5, [pc, #124]	; (8003480 <HAL_TIM_Base_Start_IT+0xa4>)
 8003404:	42a2      	cmp	r2, r4
 8003406:	bf08      	it	eq
 8003408:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003410:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8003414:	428a      	cmp	r2, r1
 8003416:	bf08      	it	eq
 8003418:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800341c:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341e:	42aa      	cmp	r2, r5
 8003420:	bf08      	it	eq
 8003422:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003426:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342a:	42a2      	cmp	r2, r4
 800342c:	bf08      	it	eq
 800342e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003432:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003434:	b95b      	cbnz	r3, 800344e <HAL_TIM_Base_Start_IT+0x72>
 8003436:	4813      	ldr	r0, [pc, #76]	; (8003484 <HAL_TIM_Base_Start_IT+0xa8>)
 8003438:	1a10      	subs	r0, r2, r0
 800343a:	fab0 f080 	clz	r0, r0
 800343e:	0940      	lsrs	r0, r0, #5
 8003440:	b928      	cbnz	r0, 800344e <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	f043 0301 	orr.w	r3, r3, #1
}
 8003448:	bc70      	pop	{r4, r5, r6}
    __HAL_TIM_ENABLE(htim);
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344e:	6891      	ldr	r1, [r2, #8]
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_TIM_Base_Start_IT+0xac>)
 8003452:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	2b06      	cmp	r3, #6
 8003456:	d009      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x90>
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d006      	beq.n	800346c <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800345e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8003460:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003462:	f043 0301 	orr.w	r3, r3, #1
}
 8003466:	bc70      	pop	{r4, r5, r6}
      __HAL_TIM_ENABLE(htim);
 8003468:	6013      	str	r3, [r2, #0]
}
 800346a:	4770      	bx	lr
  return HAL_OK;
 800346c:	2000      	movs	r0, #0
}
 800346e:	bc70      	pop	{r4, r5, r6}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40000800 	.word	0x40000800
 800347c:	40000400 	.word	0x40000400
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40001800 	.word	0x40001800
 8003488:	00010007 	.word	0x00010007

0800348c <HAL_TIM_PWM_MspInit>:
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop

08003490 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003490:	2800      	cmp	r0, #0
 8003492:	f000 8085 	beq.w	80035a0 <HAL_TIM_PWM_Init+0x110>
{
 8003496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003498:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800349c:	4604      	mov	r4, r0
 800349e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d077      	beq.n	8003596 <HAL_TIM_PWM_Init+0x106>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a6:	6825      	ldr	r5, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	2202      	movs	r2, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034aa:	483e      	ldr	r0, [pc, #248]	; (80035a4 <HAL_TIM_PWM_Init+0x114>)
 80034ac:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	eba5 0000 	sub.w	r0, r5, r0
  tmpcr1 = TIMx->CR1;
 80034b8:	682b      	ldr	r3, [r5, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ba:	fab0 f080 	clz	r0, r0
 80034be:	ea4f 1050 	mov.w	r0, r0, lsr #5
 80034c2:	d028      	beq.n	8003516 <HAL_TIM_PWM_Init+0x86>
 80034c4:	bb38      	cbnz	r0, 8003516 <HAL_TIM_PWM_Init+0x86>
 80034c6:	4a38      	ldr	r2, [pc, #224]	; (80035a8 <HAL_TIM_PWM_Init+0x118>)
 80034c8:	4295      	cmp	r5, r2
 80034ca:	d024      	beq.n	8003516 <HAL_TIM_PWM_Init+0x86>
 80034cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034d0:	4295      	cmp	r5, r2
 80034d2:	d020      	beq.n	8003516 <HAL_TIM_PWM_Init+0x86>
 80034d4:	4935      	ldr	r1, [pc, #212]	; (80035ac <HAL_TIM_PWM_Init+0x11c>)
 80034d6:	4e36      	ldr	r6, [pc, #216]	; (80035b0 <HAL_TIM_PWM_Init+0x120>)
 80034d8:	1a6f      	subs	r7, r5, r1
 80034da:	428d      	cmp	r5, r1
 80034dc:	bf18      	it	ne
 80034de:	42b5      	cmpne	r5, r6
 80034e0:	fab7 f787 	clz	r7, r7
 80034e4:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80034e8:	d107      	bne.n	80034fa <HAL_TIM_PWM_Init+0x6a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80034ee:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f0:	42b5      	cmp	r5, r6
    tmpcr1 |= Structure->CounterMode;
 80034f2:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	d017      	beq.n	8003528 <HAL_TIM_PWM_Init+0x98>
 80034f8:	b9b7      	cbnz	r7, 8003528 <HAL_TIM_PWM_Init+0x98>
 80034fa:	492e      	ldr	r1, [pc, #184]	; (80035b4 <HAL_TIM_PWM_Init+0x124>)
 80034fc:	4a2e      	ldr	r2, [pc, #184]	; (80035b8 <HAL_TIM_PWM_Init+0x128>)
 80034fe:	4295      	cmp	r5, r2
 8003500:	bf18      	it	ne
 8003502:	428d      	cmpne	r5, r1
 8003504:	d005      	beq.n	8003512 <HAL_TIM_PWM_Init+0x82>
 8003506:	4f2d      	ldr	r7, [pc, #180]	; (80035bc <HAL_TIM_PWM_Init+0x12c>)
 8003508:	1bef      	subs	r7, r5, r7
 800350a:	fab7 f787 	clz	r7, r7
 800350e:	097f      	lsrs	r7, r7, #5
 8003510:	b177      	cbz	r7, 8003530 <HAL_TIM_PWM_Init+0xa0>
 8003512:	2700      	movs	r7, #0
 8003514:	e008      	b.n	8003528 <HAL_TIM_PWM_Init+0x98>
 8003516:	4f25      	ldr	r7, [pc, #148]	; (80035ac <HAL_TIM_PWM_Init+0x11c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800351c:	68a1      	ldr	r1, [r4, #8]
 800351e:	1bef      	subs	r7, r5, r7
 8003520:	430b      	orrs	r3, r1
 8003522:	fab7 f787 	clz	r7, r7
 8003526:	097f      	lsrs	r7, r7, #5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352c:	6922      	ldr	r2, [r4, #16]
 800352e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003530:	69a2      	ldr	r2, [r4, #24]
 8003532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003536:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800353a:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800353c:	602b      	str	r3, [r5, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353e:	62e9      	str	r1, [r5, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003540:	62aa      	str	r2, [r5, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003542:	b950      	cbnz	r0, 800355a <HAL_TIM_PWM_Init+0xca>
 8003544:	b94f      	cbnz	r7, 800355a <HAL_TIM_PWM_Init+0xca>
 8003546:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <HAL_TIM_PWM_Init+0x124>)
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_TIM_PWM_Init+0x128>)
 800354a:	429d      	cmp	r5, r3
 800354c:	bf18      	it	ne
 800354e:	4295      	cmpne	r5, r2
 8003550:	d003      	beq.n	800355a <HAL_TIM_PWM_Init+0xca>
 8003552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003556:	429d      	cmp	r5, r3
 8003558:	d101      	bne.n	800355e <HAL_TIM_PWM_Init+0xce>
    TIMx->RCR = Structure->RepetitionCounter;
 800355a:	6963      	ldr	r3, [r4, #20]
 800355c:	632b      	str	r3, [r5, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800355e:	2301      	movs	r3, #1
  return HAL_OK;
 8003560:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003562:	616b      	str	r3, [r5, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800356c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003570:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003574:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800357c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003584:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003588:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800358c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003590:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003596:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800359a:	f7ff ff77 	bl	800348c <HAL_TIM_PWM_MspInit>
 800359e:	e782      	b.n	80034a6 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
 80035a2:	4770      	bx	lr
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40010400 	.word	0x40010400
 80035b0:	40000c00 	.word	0x40000c00
 80035b4:	40014000 	.word	0x40014000
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800

080035c0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80035c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d05b      	beq.n	8003680 <HAL_TIM_PWM_ConfigChannel+0xc0>
 80035c8:	2301      	movs	r3, #1
{
 80035ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80035cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80035d0:	2a14      	cmp	r2, #20
 80035d2:	d850      	bhi.n	8003676 <HAL_TIM_PWM_ConfigChannel+0xb6>
 80035d4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80035d8:	004f0015 	.word	0x004f0015
 80035dc:	004f004f 	.word	0x004f004f
 80035e0:	004f0095 	.word	0x004f0095
 80035e4:	004f004f 	.word	0x004f004f
 80035e8:	004f00d0 	.word	0x004f00d0
 80035ec:	004f004f 	.word	0x004f004f
 80035f0:	004f010a 	.word	0x004f010a
 80035f4:	004f004f 	.word	0x004f004f
 80035f8:	004f0149 	.word	0x004f0149
 80035fc:	004f004f 	.word	0x004f004f
 8003600:	0056      	.short	0x0056
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003602:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003604:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003608:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360a:	f025 0501 	bic.w	r5, r5, #1
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800360e:	4cb6      	ldr	r4, [pc, #728]	; (80038e8 <HAL_TIM_PWM_ConfigChannel+0x328>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003610:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003612:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003614:	685d      	ldr	r5, [r3, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8003616:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx = TIMx->CCMR1;
 800361a:	f8d3 e018 	ldr.w	lr, [r3, #24]
  tmpccer |= OC_Config->OCPolarity;
 800361e:	4332      	orrs	r2, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003620:	4eb2      	ldr	r6, [pc, #712]	; (80038ec <HAL_TIM_PWM_ConfigChannel+0x32c>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003622:	ea0e 0404 	and.w	r4, lr, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003626:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8003628:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800362c:	f000 8168 	beq.w	8003900 <HAL_TIM_PWM_ConfigChannel+0x340>
 8003630:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003634:	42b3      	cmp	r3, r6
 8003636:	f000 8163 	beq.w	8003900 <HAL_TIM_PWM_ConfigChannel+0x340>
 800363a:	4fad      	ldr	r7, [pc, #692]	; (80038f0 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800363c:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8003640:	42b3      	cmp	r3, r6
 8003642:	bf18      	it	ne
 8003644:	42bb      	cmpne	r3, r7
 8003646:	f000 815b 	beq.w	8003900 <HAL_TIM_PWM_ConfigChannel+0x340>
 800364a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800364e:	42b3      	cmp	r3, r6
 8003650:	f000 8156 	beq.w	8003900 <HAL_TIM_PWM_ConfigChannel+0x340>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003654:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003656:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003658:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800365a:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800365e:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003660:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003662:	f044 0408 	orr.w	r4, r4, #8
 8003666:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003668:	6999      	ldr	r1, [r3, #24]
 800366a:	f021 0104 	bic.w	r1, r1, #4
 800366e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	432a      	orrs	r2, r5
 8003674:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003676:	2300      	movs	r3, #0
 8003678:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800367c:	4618      	mov	r0, r3
 800367e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8003680:	2002      	movs	r0, #2
 8003682:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003684:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003686:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800368a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800368c:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800368e:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003692:	4e96      	ldr	r6, [pc, #600]	; (80038ec <HAL_TIM_PWM_ConfigChannel+0x32c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003694:	621d      	str	r5, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003696:	42b3      	cmp	r3, r6
  tmpccer = TIMx->CCER;
 8003698:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800369a:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800369e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036a0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036a4:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036a8:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ac:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	d00e      	beq.n	80036d0 <HAL_TIM_PWM_ConfigChannel+0x110>
 80036b2:	4d90      	ldr	r5, [pc, #576]	; (80038f4 <HAL_TIM_PWM_ConfigChannel+0x334>)
 80036b4:	42ab      	cmp	r3, r5
 80036b6:	d00b      	beq.n	80036d0 <HAL_TIM_PWM_ConfigChannel+0x110>
 80036b8:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 80036bc:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	bf18      	it	ne
 80036c4:	42b3      	cmpne	r3, r6
 80036c6:	d003      	beq.n	80036d0 <HAL_TIM_PWM_ConfigChannel+0x110>
 80036c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036cc:	42ab      	cmp	r3, r5
 80036ce:	d104      	bne.n	80036da <HAL_TIM_PWM_ConfigChannel+0x11a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036d0:	f42c 3c00 	bic.w	ip, ip, #131072	; 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036d4:	694d      	ldr	r5, [r1, #20]
 80036d6:	ea4c 2c85 	orr.w	ip, ip, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036da:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80036dc:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80036e0:	655c      	str	r4, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80036e2:	65dd      	str	r5, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036e6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036e8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036ea:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80036ee:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036f2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80036f6:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003700:	e7b9      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0xb6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003702:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003704:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003706:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003708:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800370a:	f025 0510 	bic.w	r5, r5, #16
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800370e:	4a7a      	ldr	r2, [pc, #488]	; (80038f8 <HAL_TIM_PWM_ConfigChannel+0x338>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003710:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003712:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003714:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccer &= ~TIM_CCER_CC2P;
 8003718:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx = TIMx->CCMR1;
 800371c:	699d      	ldr	r5, [r3, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800371e:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003722:	4e72      	ldr	r6, [pc, #456]	; (80038ec <HAL_TIM_PWM_ConfigChannel+0x32c>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003724:	402a      	ands	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003726:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003728:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800372c:	f000 8104 	beq.w	8003938 <HAL_TIM_PWM_ConfigChannel+0x378>
 8003730:	4d70      	ldr	r5, [pc, #448]	; (80038f4 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8003732:	42ab      	cmp	r3, r5
 8003734:	f000 8100 	beq.w	8003938 <HAL_TIM_PWM_ConfigChannel+0x378>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003738:	4e6d      	ldr	r6, [pc, #436]	; (80038f0 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800373a:	4d70      	ldr	r5, [pc, #448]	; (80038fc <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800373c:	42ab      	cmp	r3, r5
 800373e:	bf18      	it	ne
 8003740:	42b3      	cmpne	r3, r6
 8003742:	f000 8100 	beq.w	8003946 <HAL_TIM_PWM_ConfigChannel+0x386>
 8003746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800374a:	42ab      	cmp	r3, r5
 800374c:	f000 80fb 	beq.w	8003946 <HAL_TIM_PWM_ConfigChannel+0x386>
  TIMx->CCR2 = OC_Config->Pulse;
 8003750:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003752:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003756:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003758:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800375a:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800375c:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800375e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003760:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003764:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003766:	6999      	ldr	r1, [r3, #24]
 8003768:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800376c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003774:	619a      	str	r2, [r3, #24]
      break;
 8003776:	e77e      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0xb6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003778:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800377a:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800377e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003780:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003782:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003786:	4e59      	ldr	r6, [pc, #356]	; (80038ec <HAL_TIM_PWM_ConfigChannel+0x32c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003788:	621d      	str	r5, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800378a:	42b3      	cmp	r3, r6
  tmpccer = TIMx->CCER;
 800378c:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800378e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003790:	69da      	ldr	r2, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003792:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003796:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379a:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800379e:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037a2:	f000 80ba 	beq.w	800391a <HAL_TIM_PWM_ConfigChannel+0x35a>
 80037a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80037aa:	42b3      	cmp	r3, r6
 80037ac:	f000 80b5 	beq.w	800391a <HAL_TIM_PWM_ConfigChannel+0x35a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b0:	4f4f      	ldr	r7, [pc, #316]	; (80038f0 <HAL_TIM_PWM_ConfigChannel+0x330>)
 80037b2:	4e52      	ldr	r6, [pc, #328]	; (80038fc <HAL_TIM_PWM_ConfigChannel+0x33c>)
 80037b4:	42b3      	cmp	r3, r6
 80037b6:	bf18      	it	ne
 80037b8:	42bb      	cmpne	r3, r7
 80037ba:	f000 80b5 	beq.w	8003928 <HAL_TIM_PWM_ConfigChannel+0x368>
 80037be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80037c2:	42b3      	cmp	r3, r6
 80037c4:	f000 80b0 	beq.w	8003928 <HAL_TIM_PWM_ConfigChannel+0x368>
  TIMx->CCR3 = OC_Config->Pulse;
 80037c8:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80037ca:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80037cc:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80037ce:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80037d0:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037d2:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037d4:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037d6:	f044 0408 	orr.w	r4, r4, #8
 80037da:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037dc:	69d9      	ldr	r1, [r3, #28]
 80037de:	f021 0104 	bic.w	r1, r1, #4
 80037e2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	432a      	orrs	r2, r5
 80037e8:	61da      	str	r2, [r3, #28]
      break;
 80037ea:	e744      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0xb6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ec:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037ee:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f4:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fa:	4e3c      	ldr	r6, [pc, #240]	; (80038ec <HAL_TIM_PWM_ConfigChannel+0x32c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037fc:	621d      	str	r5, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fe:	42b3      	cmp	r3, r6
  tmpccer = TIMx->CCER;
 8003800:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003802:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003806:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800380c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003810:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003814:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003818:	d00e      	beq.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x278>
 800381a:	4d36      	ldr	r5, [pc, #216]	; (80038f4 <HAL_TIM_PWM_ConfigChannel+0x334>)
 800381c:	42ab      	cmp	r3, r5
 800381e:	d00b      	beq.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x278>
 8003820:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8003824:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8003828:	42ab      	cmp	r3, r5
 800382a:	bf18      	it	ne
 800382c:	42b3      	cmpne	r3, r6
 800382e:	d003      	beq.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x278>
 8003830:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003834:	42ab      	cmp	r3, r5
 8003836:	d104      	bne.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x282>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003838:	f42c 4c80 	bic.w	ip, ip, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800383c:	694d      	ldr	r5, [r1, #20]
 800383e:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8003842:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003844:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003848:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800384a:	641d      	str	r5, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800384c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800384e:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003850:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003852:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003856:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003858:	69d9      	ldr	r1, [r3, #28]
 800385a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800385e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003866:	61da      	str	r2, [r3, #28]
      break;
 8003868:	e705      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0xb6>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800386a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800386c:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003870:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003872:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003874:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003878:	4e1c      	ldr	r6, [pc, #112]	; (80038ec <HAL_TIM_PWM_ConfigChannel+0x32c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800387a:	621d      	str	r5, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387c:	42b3      	cmp	r3, r6
  tmpccer = TIMx->CCER;
 800387e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003880:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003884:	6d5c      	ldr	r4, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8003886:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800388a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800388e:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8003892:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003896:	d00e      	beq.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8003898:	4d16      	ldr	r5, [pc, #88]	; (80038f4 <HAL_TIM_PWM_ConfigChannel+0x334>)
 800389a:	42ab      	cmp	r3, r5
 800389c:	d00b      	beq.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 800389e:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 80038a2:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80038a6:	42ab      	cmp	r3, r5
 80038a8:	bf18      	it	ne
 80038aa:	42b3      	cmpne	r3, r6
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 80038ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038b2:	42ab      	cmp	r3, r5
 80038b4:	d104      	bne.n	80038c0 <HAL_TIM_PWM_ConfigChannel+0x300>
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038b6:	f42c 3c80 	bic.w	ip, ip, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038ba:	694d      	ldr	r5, [r1, #20]
 80038bc:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 80038c0:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80038c2:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80038c6:	655c      	str	r4, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80038c8:	659d      	str	r5, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 80038ca:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038cc:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038ce:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038d0:	f044 0408 	orr.w	r4, r4, #8
 80038d4:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038d8:	f021 0104 	bic.w	r1, r1, #4
 80038dc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e0:	432a      	orrs	r2, r5
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038e4:	e6c7      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0xb6>
 80038e6:	bf00      	nop
 80038e8:	fffeff8c 	.word	0xfffeff8c
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40010400 	.word	0x40010400
 80038f8:	feff8cff 	.word	0xfeff8cff
 80038fc:	40014400 	.word	0x40014400
    tmpccer |= OC_Config->OCNPolarity;
 8003900:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003902:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8003906:	698f      	ldr	r7, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003908:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800390c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800390e:	694e      	ldr	r6, [r1, #20]
 8003910:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8003912:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003916:	4335      	orrs	r5, r6
 8003918:	e69c      	b.n	8003654 <HAL_TIM_PWM_ConfigChannel+0x94>
    tmpccer &= ~TIM_CCER_CC3NP;
 800391a:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800391e:	68ce      	ldr	r6, [r1, #12]
 8003920:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003924:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003928:	f425 5740 	bic.w	r7, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800392c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	698d      	ldr	r5, [r1, #24]
 8003930:	4335      	orrs	r5, r6
 8003932:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
 8003936:	e747      	b.n	80037c8 <HAL_TIM_PWM_ConfigChannel+0x208>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003938:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800393c:	68ce      	ldr	r6, [r1, #12]
 800393e:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003942:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003946:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003948:	f42e 6e40 	bic.w	lr, lr, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800394c:	698d      	ldr	r5, [r1, #24]
 800394e:	4335      	orrs	r5, r6
 8003950:	ea4e 0e85 	orr.w	lr, lr, r5, lsl #2
 8003954:	e6fc      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x190>
 8003956:	bf00      	nop

08003958 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003958:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800395c:	2a01      	cmp	r2, #1
 800395e:	d039      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0x7c>
 8003960:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003962:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 8003964:	681a      	ldr	r2, [r3, #0]
{
 8003966:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 800396c:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 800396e:	6896      	ldr	r6, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003970:	6808      	ldr	r0, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003972:	4c55      	ldr	r4, [pc, #340]	; (8003ac8 <HAL_TIM_ConfigClockSource+0x170>)
  switch (sClockSourceConfig->ClockSource)
 8003974:	2860      	cmp	r0, #96	; 0x60
  __HAL_LOCK(htim);
 8003976:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397a:	ea04 0406 	and.w	r4, r4, r6
  htim->Instance->SMCR = tmpsmcr;
 800397e:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003980:	d047      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0xba>
 8003982:	d829      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x80>
 8003984:	2820      	cmp	r0, #32
 8003986:	d071      	beq.n	8003a6c <HAL_TIM_ConfigClockSource+0x114>
 8003988:	d96d      	bls.n	8003a66 <HAL_TIM_ConfigClockSource+0x10e>
 800398a:	2840      	cmp	r0, #64	; 0x40
 800398c:	d076      	beq.n	8003a7c <HAL_TIM_ConfigClockSource+0x124>
 800398e:	2850      	cmp	r0, #80	; 0x50
 8003990:	f040 8096 	bne.w	8003ac0 <HAL_TIM_ConfigClockSource+0x168>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003994:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003996:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003998:	684c      	ldr	r4, [r1, #4]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800399a:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a2:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80039a4:	4334      	orrs	r4, r6
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a6:	4949      	ldr	r1, [pc, #292]	; (8003acc <HAL_TIM_ConfigClockSource+0x174>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a8:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039aa:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ac:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b0:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80039b4:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80039b6:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80039b8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ba:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039bc:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c0:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80039c2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	2101      	movs	r1, #1
  return HAL_OK;
 80039c6:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80039d0:	bcf0      	pop	{r4, r5, r6, r7}
 80039d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80039d4:	2002      	movs	r0, #2
 80039d6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80039d8:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 80039dc:	d046      	beq.n	8003a6c <HAL_TIM_ConfigClockSource+0x114>
 80039de:	d865      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x154>
 80039e0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80039e4:	d02e      	beq.n	8003a44 <HAL_TIM_ConfigClockSource+0xec>
 80039e6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80039ea:	d03f      	beq.n	8003a6c <HAL_TIM_ConfigClockSource+0x114>
 80039ec:	2870      	cmp	r0, #112	; 0x70
 80039ee:	d1e8      	bne.n	80039c2 <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f0:	6888      	ldr	r0, [r1, #8]
 80039f2:	684d      	ldr	r5, [r1, #4]
 80039f4:	68cc      	ldr	r4, [r1, #12]
 80039f6:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80039fa:	6890      	ldr	r0, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a00:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a04:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a06:	6091      	str	r1, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003a08:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a0a:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003a0e:	6091      	str	r1, [r2, #8]
      break;
 8003a10:	e7d7      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a12:	6a15      	ldr	r5, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a14:	684e      	ldr	r6, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a16:	f025 0510 	bic.w	r5, r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1a:	68cf      	ldr	r7, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a1c:	492b      	ldr	r1, [pc, #172]	; (8003acc <HAL_TIM_ConfigClockSource+0x174>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1e:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a20:	6994      	ldr	r4, [r2, #24]
  tmpccer = TIMx->CCER;
 8003a22:	6a10      	ldr	r0, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a24:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a28:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2c:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a30:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003a34:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8003a36:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003a38:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a3c:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003a40:	6091      	str	r1, [r2, #8]
 8003a42:	e7be      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a44:	6888      	ldr	r0, [r1, #8]
 8003a46:	684d      	ldr	r5, [r1, #4]
 8003a48:	68cc      	ldr	r4, [r1, #12]
 8003a4a:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 8003a4e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a50:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a54:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a58:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8003a5a:	6091      	str	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a5c:	6891      	ldr	r1, [r2, #8]
 8003a5e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003a62:	6091      	str	r1, [r2, #8]
      break;
 8003a64:	e7ad      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003a66:	b108      	cbz	r0, 8003a6c <HAL_TIM_ConfigClockSource+0x114>
 8003a68:	2810      	cmp	r0, #16
 8003a6a:	d1aa      	bne.n	80039c2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 8003a6c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a6e:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a72:	4916      	ldr	r1, [pc, #88]	; (8003acc <HAL_TIM_ConfigClockSource+0x174>)
 8003a74:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a76:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8003a78:	6090      	str	r0, [r2, #8]
 8003a7a:	e7a2      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpccer = TIMx->CCER;
 8003a7c:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7e:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a80:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a82:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003a8c:	4334      	orrs	r4, r6
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a8e:	490f      	ldr	r1, [pc, #60]	; (8003acc <HAL_TIM_ConfigClockSource+0x174>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a90:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a94:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a98:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003a9c:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8003a9e:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003aa0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aa2:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aa4:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003aa8:	6091      	str	r1, [r2, #8]
 8003aaa:	e78a      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8003aac:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <HAL_TIM_ConfigClockSource+0x178>)
 8003aae:	4288      	cmp	r0, r1
 8003ab0:	d0dc      	beq.n	8003a6c <HAL_TIM_ConfigClockSource+0x114>
 8003ab2:	3110      	adds	r1, #16
 8003ab4:	4288      	cmp	r0, r1
 8003ab6:	d0d9      	beq.n	8003a6c <HAL_TIM_ConfigClockSource+0x114>
 8003ab8:	3920      	subs	r1, #32
 8003aba:	4288      	cmp	r0, r1
 8003abc:	d181      	bne.n	80039c2 <HAL_TIM_ConfigClockSource+0x6a>
 8003abe:	e7d5      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x114>
 8003ac0:	2830      	cmp	r0, #48	; 0x30
 8003ac2:	f47f af7e 	bne.w	80039c2 <HAL_TIM_ConfigClockSource+0x6a>
 8003ac6:	e7d1      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x114>
 8003ac8:	ffce0088 	.word	0xffce0088
 8003acc:	ffcfff8f 	.word	0xffcfff8f
 8003ad0:	00100030 	.word	0x00100030

08003ad4 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop

08003ad8 <HAL_TIM_IC_CaptureCallback>:
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <HAL_TIM_PWM_PulseFinishedCallback>:
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <HAL_TIM_TriggerCallback>:
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae4:	6803      	ldr	r3, [r0, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	0791      	lsls	r1, r2, #30
{
 8003aea:	b510      	push	{r4, lr}
 8003aec:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aee:	d502      	bpl.n	8003af6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	0792      	lsls	r2, r2, #30
 8003af4:	d465      	bmi.n	8003bc2 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	0752      	lsls	r2, r2, #29
 8003afa:	d502      	bpl.n	8003b02 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	0750      	lsls	r0, r2, #29
 8003b00:	d44c      	bmi.n	8003b9c <HAL_TIM_IRQHandler+0xb8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	0711      	lsls	r1, r2, #28
 8003b06:	d502      	bpl.n	8003b0e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	0712      	lsls	r2, r2, #28
 8003b0c:	d434      	bmi.n	8003b78 <HAL_TIM_IRQHandler+0x94>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	06d0      	lsls	r0, r2, #27
 8003b12:	d502      	bpl.n	8003b1a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	06d1      	lsls	r1, r2, #27
 8003b18:	d41e      	bmi.n	8003b58 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	07d2      	lsls	r2, r2, #31
 8003b1e:	d502      	bpl.n	8003b26 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	07d0      	lsls	r0, r2, #31
 8003b24:	d46b      	bmi.n	8003bfe <HAL_TIM_IRQHandler+0x11a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	0611      	lsls	r1, r2, #24
 8003b2a:	d502      	bpl.n	8003b32 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	0612      	lsls	r2, r2, #24
 8003b30:	d46d      	bmi.n	8003c0e <HAL_TIM_IRQHandler+0x12a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	05d0      	lsls	r0, r2, #23
 8003b36:	d502      	bpl.n	8003b3e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	0611      	lsls	r1, r2, #24
 8003b3c:	d46f      	bmi.n	8003c1e <HAL_TIM_IRQHandler+0x13a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	0652      	lsls	r2, r2, #25
 8003b42:	d502      	bpl.n	8003b4a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	0650      	lsls	r0, r2, #25
 8003b48:	d451      	bmi.n	8003bee <HAL_TIM_IRQHandler+0x10a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	0691      	lsls	r1, r2, #26
 8003b4e:	d502      	bpl.n	8003b56 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	0692      	lsls	r2, r2, #26
 8003b54:	d443      	bmi.n	8003bde <HAL_TIM_IRQHandler+0xfa>
 8003b56:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b58:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b60:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b62:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b64:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b66:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b6a:	d06c      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6c:	f7ff ffb4 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b70:	2200      	movs	r2, #0
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	7722      	strb	r2, [r4, #28]
 8003b76:	e7d0      	b.n	8003b1a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b78:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b7c:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b80:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b82:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b84:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b86:	079b      	lsls	r3, r3, #30
 8003b88:	d15a      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	f7ff ffa3 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f7ff ffa4 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b94:	2200      	movs	r2, #0
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	7722      	strb	r2, [r4, #28]
 8003b9a:	e7b8      	b.n	8003b0e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b9c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba0:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ba4:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003baa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003bae:	d144      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb0:	f7ff ff90 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7ff ff91 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	2200      	movs	r2, #0
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	7722      	strb	r2, [r4, #28]
 8003bc0:	e79f      	b.n	8003b02 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc8:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bca:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bcc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bce:	0799      	lsls	r1, r3, #30
 8003bd0:	d02d      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	f7ff ff81 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	7722      	strb	r2, [r4, #28]
 8003bdc:	e78b      	b.n	8003af6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bde:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003be2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003be4:	611a      	str	r2, [r3, #16]
}
 8003be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003bea:	f000 b88d 	b.w	8003d08 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003bf2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003bf6:	f7ff ff73 	bl	8003ae0 <HAL_TIM_TriggerCallback>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	e7a5      	b.n	8003b4a <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c04:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c06:	f000 fb5b 	bl	80042c0 <HAL_TIM_PeriodElapsedCallback>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	e78b      	b.n	8003b26 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003c12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c16:	f000 f879 	bl	8003d0c <HAL_TIMEx_BreakCallback>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	e789      	b.n	8003b32 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8003c22:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003c26:	f000 f873 	bl	8003d10 <HAL_TIMEx_Break2Callback>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	e787      	b.n	8003b3e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	f7ff ff51 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c32:	4620      	mov	r0, r4
 8003c34:	f7ff ff52 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
 8003c38:	e7cd      	b.n	8003bd6 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	f7ff ff4d 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003c3e:	e7bc      	b.n	8003bba <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c40:	f7ff ff4a 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e7a6      	b.n	8003b94 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	f7ff ff45 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff ff46 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
 8003c50:	e78e      	b.n	8003b70 <HAL_TIM_IRQHandler+0x8c>
 8003c52:	bf00      	nop

08003c54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d046      	beq.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0x96>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c5c:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c5e:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 8003c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c62:	4d24      	ldr	r5, [pc, #144]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	2602      	movs	r6, #2
  __HAL_LOCK(htim);
 8003c66:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf18      	it	ne
 8003c6c:	42ab      	cmpne	r3, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6e:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003c72:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c76:	bf08      	it	eq
 8003c78:	2501      	moveq	r5, #1
  tmpcr2 = htim->Instance->CR2;
 8003c7a:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c7c:	bf18      	it	ne
 8003c7e:	2500      	movne	r5, #0
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	689e      	ldr	r6, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c82:	d027      	beq.n	8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c84:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c86:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c8a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	bf18      	it	ne
 8003c90:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003c94:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c98:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9c:	4f17      	ldr	r7, [pc, #92]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2201      	moveq	r2, #1
 8003ca2:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8003ca4:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca6:	4573      	cmp	r3, lr
 8003ca8:	bf08      	it	eq
 8003caa:	f042 0201 	orreq.w	r2, r2, #1
 8003cae:	4c14      	ldr	r4, [pc, #80]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003cb0:	42bb      	cmp	r3, r7
 8003cb2:	bf08      	it	eq
 8003cb4:	f042 0201 	orreq.w	r2, r2, #1
 8003cb8:	42a3      	cmp	r3, r4
 8003cba:	bf08      	it	eq
 8003cbc:	f042 0201 	orreq.w	r2, r2, #1
 8003cc0:	b96a      	cbnz	r2, 8003cde <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8003cc2:	b965      	cbnz	r5, 8003cde <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003cc4:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003cc6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003cc8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cd4:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cd8:	684a      	ldr	r2, [r1, #4]
 8003cda:	4314      	orrs	r4, r2
 8003cdc:	e7d2      	b.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x30>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cde:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce4:	4316      	orrs	r6, r2
    htim->Instance->SMCR = tmpsmcr;
 8003ce6:	609e      	str	r6, [r3, #8]
 8003ce8:	e7ec      	b.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  __HAL_LOCK(htim);
 8003cea:	2302      	movs	r3, #2
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	4770      	bx	lr
 8003cf0:	40010400 	.word	0x40010400
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40001800 	.word	0x40001800
 8003d04:	40000800 	.word	0x40000800

08003d08 <HAL_TIMEx_CommutCallback>:
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop

08003d0c <HAL_TIMEx_BreakCallback>:
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop

08003d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop

08003d14 <MX_ADC1_Init>:
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003d14:	4a25      	ldr	r2, [pc, #148]	; (8003dac <MX_ADC1_Init+0x98>)
  ADC_MultiModeTypeDef multimode = {0};
 8003d16:	2300      	movs	r3, #0
  hadc1.Instance = ADC1;
 8003d18:	4825      	ldr	r0, [pc, #148]	; (8003db0 <MX_ADC1_Init+0x9c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003d1a:	2101      	movs	r1, #1
{
 8003d1c:	b570      	push	{r4, r5, r6, lr}
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003d1e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
{
 8003d22:	b08a      	sub	sp, #40	; 0x28
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d24:	2404      	movs	r4, #4
  hadc1.Instance = ADC1;
 8003d26:	6010      	str	r0, [r2, #0]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d28:	4610      	mov	r0, r2
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003d2a:	6055      	str	r5, [r2, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d2c:	6114      	str	r4, [r2, #16]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8003d2e:	6093      	str	r3, [r2, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8003d30:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d32:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003d34:	60d3      	str	r3, [r2, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d36:	7513      	strb	r3, [r2, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d38:	7713      	strb	r3, [r2, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d3a:	6253      	str	r3, [r2, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d3c:	6293      	str	r3, [r2, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003d42:	6353      	str	r3, [r2, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003d44:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  ADC_MultiModeTypeDef multimode = {0};
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	9302      	str	r3, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	9305      	str	r3, [sp, #20]
 8003d50:	9306      	str	r3, [sp, #24]
 8003d52:	9307      	str	r3, [sp, #28]
 8003d54:	9308      	str	r3, [sp, #32]
 8003d56:	9309      	str	r3, [sp, #36]	; 0x24
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003d58:	7551      	strb	r1, [r2, #21]
  hadc1.Init.NbrOfConversion = 1;
 8003d5a:	6191      	str	r1, [r2, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d5c:	f7fc fe88 	bl	8000a70 <HAL_ADC_Init>
 8003d60:	bb00      	cbnz	r0, 8003da4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003d62:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003d64:	4669      	mov	r1, sp
 8003d66:	4811      	ldr	r0, [pc, #68]	; (8003dac <MX_ADC1_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003d68:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003d6a:	f7fc ff8f 	bl	8000c8c <HAL_ADCEx_MultiModeConfigChannel>
 8003d6e:	b9b0      	cbnz	r0, 8003d9e <MX_ADC1_Init+0x8a>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003d70:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_2;
 8003d72:	4e10      	ldr	r6, [pc, #64]	; (8003db4 <MX_ADC1_Init+0xa0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d74:	2506      	movs	r5, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d76:	f240 74ff 	movw	r4, #2047	; 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d7a:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d7c:	a903      	add	r1, sp, #12
 8003d7e:	480b      	ldr	r0, [pc, #44]	; (8003dac <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_2;
 8003d80:	9603      	str	r6, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d82:	9504      	str	r5, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003d84:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8003d86:	9308      	str	r3, [sp, #32]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003d88:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d8c:	9406      	str	r4, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d8e:	9207      	str	r2, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d90:	f7fc fb2e 	bl	80003f0 <HAL_ADC_ConfigChannel>
 8003d94:	b108      	cbz	r0, 8003d9a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8003d96:	f000 fcb1 	bl	80046fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d9a:	b00a      	add	sp, #40	; 0x28
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8003d9e:	f000 fcad 	bl	80046fc <Error_Handler>
 8003da2:	e7e5      	b.n	8003d70 <MX_ADC1_Init+0x5c>
    Error_Handler();
 8003da4:	f000 fcaa 	bl	80046fc <Error_Handler>
 8003da8:	e7db      	b.n	8003d62 <MX_ADC1_Init+0x4e>
 8003daa:	bf00      	nop
 8003dac:	24000170 	.word	0x24000170
 8003db0:	40022000 	.word	0x40022000
 8003db4:	08600004 	.word	0x08600004

08003db8 <MX_ADC3_Init>:
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <MX_ADC3_Init+0x80>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003dba:	2300      	movs	r3, #0
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8003dbc:	2101      	movs	r1, #1
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc3.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003dbe:	4610      	mov	r0, r2
{
 8003dc0:	b570      	push	{r4, r5, r6, lr}
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003dc2:	f44f 2580 	mov.w	r5, #262144	; 0x40000
{
 8003dc6:	b088      	sub	sp, #32
  hadc3.Instance = ADC3;
 8003dc8:	4e1c      	ldr	r6, [pc, #112]	; (8003e3c <MX_ADC3_Init+0x84>)
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003dca:	2404      	movs	r4, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003dcc:	6055      	str	r5, [r2, #4]
  hadc3.Instance = ADC3;
 8003dce:	6016      	str	r6, [r2, #0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003dd0:	6114      	str	r4, [r2, #16]
  hadc3.Init.NbrOfConversion = 1;
 8003dd2:	6191      	str	r1, [r2, #24]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8003dd4:	6093      	str	r3, [r2, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003dd6:	9301      	str	r3, [sp, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003dd8:	60d3      	str	r3, [r2, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003dda:	7513      	strb	r3, [r2, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003ddc:	7553      	strb	r3, [r2, #21]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003dde:	7713      	strb	r3, [r2, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003de0:	6253      	str	r3, [r2, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003de2:	6293      	str	r3, [r2, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8003de4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003de6:	6313      	str	r3, [r2, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003de8:	6353      	str	r3, [r2, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8003dea:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8003dee:	9302      	str	r3, [sp, #8]
 8003df0:	9303      	str	r3, [sp, #12]
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	9305      	str	r3, [sp, #20]
 8003df6:	9306      	str	r3, [sp, #24]
 8003df8:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003dfa:	f7fc fe39 	bl	8000a70 <HAL_ADC_Init>
 8003dfe:	b9b8      	cbnz	r0, 8003e30 <MX_ADC3_Init+0x78>
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003e00:	2204      	movs	r2, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003e02:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_1;
 8003e04:	4e0e      	ldr	r6, [pc, #56]	; (8003e40 <MX_ADC3_Init+0x88>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e06:	2506      	movs	r5, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003e08:	f240 74ff 	movw	r4, #2047	; 0x7ff
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e0c:	eb0d 0102 	add.w	r1, sp, r2
 8003e10:	4809      	ldr	r0, [pc, #36]	; (8003e38 <MX_ADC3_Init+0x80>)
  sConfig.Channel = ADC_CHANNEL_1;
 8003e12:	9601      	str	r6, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e14:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003e16:	9303      	str	r3, [sp, #12]
  sConfig.Offset = 0;
 8003e18:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003e1a:	f88d 301d 	strb.w	r3, [sp, #29]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003e1e:	9404      	str	r4, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003e20:	9205      	str	r2, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e22:	f7fc fae5 	bl	80003f0 <HAL_ADC_ConfigChannel>
 8003e26:	b108      	cbz	r0, 8003e2c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8003e28:	f000 fc68 	bl	80046fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003e2c:	b008      	add	sp, #32
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8003e30:	f000 fc64 	bl	80046fc <Error_Handler>
 8003e34:	e7e4      	b.n	8003e00 <MX_ADC3_Init+0x48>
 8003e36:	bf00      	nop
 8003e38:	240001d4 	.word	0x240001d4
 8003e3c:	58026000 	.word	0x58026000
 8003e40:	04300002 	.word	0x04300002

08003e44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8003e44:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e46:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8003e48:	4928      	ldr	r1, [pc, #160]	; (8003eec <HAL_ADC_MspInit+0xa8>)
{
 8003e4a:	b530      	push	{r4, r5, lr}
  if(adcHandle->Instance==ADC1)
 8003e4c:	428a      	cmp	r2, r1
{
 8003e4e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e50:	9306      	str	r3, [sp, #24]
 8003e52:	9305      	str	r3, [sp, #20]
 8003e54:	9307      	str	r3, [sp, #28]
 8003e56:	9308      	str	r3, [sp, #32]
 8003e58:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 8003e5a:	d024      	beq.n	8003ea6 <HAL_ADC_MspInit+0x62>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_ADC_MspInit+0xac>)
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d001      	beq.n	8003e66 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8003e62:	b00b      	add	sp, #44	; 0x2c
 8003e64:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003e66:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003e6a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003e6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003e72:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003e74:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003e78:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e80:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003e84:	9203      	str	r2, [sp, #12]
 8003e86:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e8c:	f042 0204 	orr.w	r2, r2, #4
 8003e90:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	9b04      	ldr	r3, [sp, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003ea0:	f7fc fa9c 	bl	80003dc <HAL_SYSCFG_AnalogSwitchConfig>
}
 8003ea4:	e7dd      	b.n	8003e62 <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <HAL_ADC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ea8:	f44f 6500 	mov.w	r5, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eac:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eae:	a905      	add	r1, sp, #20
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003eb0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eb4:	4810      	ldr	r0, [pc, #64]	; (8003ef8 <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003eb6:	f042 0220 	orr.w	r2, r2, #32
 8003eba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003ebe:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003ec2:	f002 0220 	and.w	r2, r2, #32
 8003ec6:	9201      	str	r2, [sp, #4]
 8003ec8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ece:	f042 0220 	orr.w	r2, r2, #32
 8003ed2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003eda:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003edc:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ee0:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ee6:	f7fd f863 	bl	8000fb0 <HAL_GPIO_Init>
 8003eea:	e7ba      	b.n	8003e62 <HAL_ADC_MspInit+0x1e>
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	58026000 	.word	0x58026000
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	58021400 	.word	0x58021400

08003efc <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003efc:	b530      	push	{r4, r5, lr}
 8003efe:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003f00:	2224      	movs	r2, #36	; 0x24
 8003f02:	2100      	movs	r1, #0
 8003f04:	a801      	add	r0, sp, #4
 8003f06:	f000 fe47 	bl	8004b98 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <MX_DAC1_Init+0x58>)
 8003f0c:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <MX_DAC1_Init+0x5c>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003f0e:	4618      	mov	r0, r3
  hdac1.Instance = DAC1;
 8003f10:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003f12:	f7fc ff8f 	bl	8000e34 <HAL_DAC_Init>
 8003f16:	b9d0      	cbnz	r0, 8003f4e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003f18:	2300      	movs	r3, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003f1a:	250a      	movs	r5, #10
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003f1c:	2401      	movs	r4, #1
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003f1e:	a901      	add	r1, sp, #4
 8003f20:	461a      	mov	r2, r3
 8003f22:	480c      	ldr	r0, [pc, #48]	; (8003f54 <MX_DAC1_Init+0x58>)
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003f24:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003f26:	9303      	str	r3, [sp, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003f28:	9305      	str	r3, [sp, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003f2a:	9502      	str	r5, [sp, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003f2c:	9404      	str	r4, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003f2e:	f7fc ff97 	bl	8000e60 <HAL_DAC_ConfigChannel>
 8003f32:	b948      	cbnz	r0, 8003f48 <MX_DAC1_Init+0x4c>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003f34:	a901      	add	r1, sp, #4
 8003f36:	2210      	movs	r2, #16
 8003f38:	4806      	ldr	r0, [pc, #24]	; (8003f54 <MX_DAC1_Init+0x58>)
 8003f3a:	f7fc ff91 	bl	8000e60 <HAL_DAC_ConfigChannel>
 8003f3e:	b108      	cbz	r0, 8003f44 <MX_DAC1_Init+0x48>
  {
    Error_Handler();
 8003f40:	f000 fbdc 	bl	80046fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003f44:	b00b      	add	sp, #44	; 0x2c
 8003f46:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003f48:	f000 fbd8 	bl	80046fc <Error_Handler>
 8003f4c:	e7f2      	b.n	8003f34 <MX_DAC1_Init+0x38>
    Error_Handler();
 8003f4e:	f000 fbd5 	bl	80046fc <Error_Handler>
 8003f52:	e7e1      	b.n	8003f18 <MX_DAC1_Init+0x1c>
 8003f54:	24000318 	.word	0x24000318
 8003f58:	40007400 	.word	0x40007400

08003f5c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 8003f5c:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5e:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 8003f60:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <HAL_DAC_MspInit+0x64>)
{
 8003f62:	b530      	push	{r4, r5, lr}
  if(dacHandle->Instance==DAC1)
 8003f64:	4291      	cmp	r1, r2
{
 8003f66:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	9303      	str	r3, [sp, #12]
 8003f6c:	9305      	str	r3, [sp, #20]
 8003f6e:	9306      	str	r3, [sp, #24]
 8003f70:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 8003f72:	d001      	beq.n	8003f78 <HAL_DAC_MspInit+0x1c>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003f74:	b009      	add	sp, #36	; 0x24
 8003f76:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_DAC_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f7a:	2530      	movs	r5, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f7c:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7e:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003f80:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	4810      	ldr	r0, [pc, #64]	; (8003fc8 <HAL_DAC_MspInit+0x6c>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003f86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003f8e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003f92:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003f96:	9201      	str	r2, [sp, #4]
 8003f98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003faa:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fac:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fb0:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	9302      	str	r3, [sp, #8]
 8003fb4:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb6:	f7fc fffb 	bl	8000fb0 <HAL_GPIO_Init>
}
 8003fba:	b009      	add	sp, #36	; 0x24
 8003fbc:	bd30      	pop	{r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40007400 	.word	0x40007400
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	58020000 	.word	0x58020000

08003fcc <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8003fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fd0:	4b7d      	ldr	r3, [pc, #500]	; (80041c8 <MX_GPIO_Init+0x1fc>)
{
 8003fd2:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd4:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fd6:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8003fd8:	2102      	movs	r1, #2
 8003fda:	4f7c      	ldr	r7, [pc, #496]	; (80041cc <MX_GPIO_Init+0x200>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8003fde:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003fe2:	4688      	mov	r8, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fe6:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	940c      	str	r4, [sp, #48]	; 0x30
 8003fea:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fec:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8003ff0:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 80041e0 <MX_GPIO_Init+0x214>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ff4:	f040 0010 	orr.w	r0, r0, #16
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8003ff8:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 80041e4 <MX_GPIO_Init+0x218>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ffc:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004000:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004002:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 8004006:	f00e 0e10 	and.w	lr, lr, #16
 800400a:	f8cd e004 	str.w	lr, [sp, #4]
 800400e:	f8dd e004 	ldr.w	lr, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004012:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 8004016:	f04e 0e04 	orr.w	lr, lr, #4
 800401a:	f8c3 e0e0 	str.w	lr, [r3, #224]	; 0xe0
 800401e:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 8004022:	f00e 0e04 	and.w	lr, lr, #4
 8004026:	f8cd e008 	str.w	lr, [sp, #8]
 800402a:	f8dd e008 	ldr.w	lr, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800402e:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 8004032:	f04e 0e20 	orr.w	lr, lr, #32
 8004036:	f8c3 e0e0 	str.w	lr, [r3, #224]	; 0xe0
 800403a:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 800403e:	f00e 0e20 	and.w	lr, lr, #32
 8004042:	f8cd e00c 	str.w	lr, [sp, #12]
 8004046:	f8dd e00c 	ldr.w	lr, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800404a:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 800404e:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
 8004052:	f8c3 e0e0 	str.w	lr, [r3, #224]	; 0xe0
 8004056:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 800405a:	f00e 0e80 	and.w	lr, lr, #128	; 0x80
 800405e:	f8cd e010 	str.w	lr, [sp, #16]
 8004062:	f8dd e010 	ldr.w	lr, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004066:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 800406a:	ea4e 0e06 	orr.w	lr, lr, r6
 800406e:	f8c3 e0e0 	str.w	lr, [r3, #224]	; 0xe0
 8004072:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 8004076:	ea0e 0e06 	and.w	lr, lr, r6
 800407a:	f8cd e014 	str.w	lr, [sp, #20]
 800407e:	f8dd e014 	ldr.w	lr, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004082:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 8004086:	ea4e 0e01 	orr.w	lr, lr, r1
 800408a:	f8c3 e0e0 	str.w	lr, [r3, #224]	; 0xe0
 800408e:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 8004092:	ea0e 0e01 	and.w	lr, lr, r1
 8004096:	f8cd e018 	str.w	lr, [sp, #24]
 800409a:	f8dd e018 	ldr.w	lr, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800409e:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 80040a2:	f04e 0e40 	orr.w	lr, lr, #64	; 0x40
 80040a6:	f8c3 e0e0 	str.w	lr, [r3, #224]	; 0xe0
 80040aa:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 80040ae:	f00e 0e40 	and.w	lr, lr, #64	; 0x40
 80040b2:	f8cd e01c 	str.w	lr, [sp, #28]
 80040b6:	f8dd e01c 	ldr.w	lr, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040ba:	f8d3 e0e0 	ldr.w	lr, [r3, #224]	; 0xe0
 80040be:	f04e 0e08 	orr.w	lr, lr, #8
 80040c2:	f8c3 e0e0 	str.w	lr, [r3, #224]	; 0xe0
 80040c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	9308      	str	r3, [sp, #32]
 80040d0:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80040d2:	f7fd f87d 	bl	80011d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 80040d6:	4622      	mov	r2, r4
 80040d8:	4650      	mov	r0, sl
 80040da:	4631      	mov	r1, r6
 80040dc:	f7fd f878 	bl	80011d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80040e0:	4648      	mov	r0, r9
 80040e2:	4632      	mov	r2, r6
 80040e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040e8:	f7fd f872 	bl	80011d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80040ec:	4632      	mov	r2, r6
 80040ee:	4638      	mov	r0, r7
 80040f0:	2110      	movs	r1, #16
 80040f2:	f7fd f86d 	bl	80011d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80040f6:	f64a 33ff 	movw	r3, #44031	; 0xabff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040fa:	a909      	add	r1, sp, #36	; 0x24
 80040fc:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80040fe:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004102:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004104:	f7fc ff54 	bl	8000fb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8004108:	f64f 73f7 	movw	r3, #65527	; 0xfff7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800410c:	a909      	add	r1, sp, #36	; 0x24
 800410e:	4830      	ldr	r0, [pc, #192]	; (80041d0 <MX_GPIO_Init+0x204>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8004110:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004112:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004116:	f7fc ff4b 	bl	8000fb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800411a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800411e:	a909      	add	r1, sp, #36	; 0x24
 8004120:	482c      	ldr	r0, [pc, #176]	; (80041d4 <MX_GPIO_Init+0x208>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004122:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004124:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004126:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004128:	f7fc ff42 	bl	8000fb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800412c:	f649 73ce 	movw	r3, #40910	; 0x9fce
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004130:	a909      	add	r1, sp, #36	; 0x24
 8004132:	4829      	ldr	r0, [pc, #164]	; (80041d8 <MX_GPIO_Init+0x20c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8004134:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004136:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004138:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413a:	f7fc ff39 	bl	8000fb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800413e:	f64f 73c5 	movw	r3, #65477	; 0xffc5
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004142:	a909      	add	r1, sp, #36	; 0x24
 8004144:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004146:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8004148:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414c:	f7fc ff30 	bl	8000fb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004150:	a909      	add	r1, sp, #36	; 0x24
 8004152:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004154:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004156:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800415a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800415e:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004160:	f7fc ff26 	bl	8000fb0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004164:	a909      	add	r1, sp, #36	; 0x24
 8004166:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004168:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416e:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004170:	f7fc ff1e 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 PG7 PG8
                           PG9 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8004174:	f64f 73fe 	movw	r3, #65534	; 0xfffe
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004178:	4650      	mov	r0, sl
 800417a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800417c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800417e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004182:	f7fc ff15 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004186:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800418a:	4648      	mov	r0, r9
 800418c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004190:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004192:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004194:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004196:	f7fc ff0b 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800419a:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800419e:	a909      	add	r1, sp, #36	; 0x24
 80041a0:	480e      	ldr	r0, [pc, #56]	; (80041dc <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80041a2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041a4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041a8:	f7fc ff02 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041ac:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ae:	a909      	add	r1, sp, #36	; 0x24
 80041b0:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041b2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041b6:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041ba:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041bc:	f7fc fef8 	bl	8000fb0 <HAL_GPIO_Init>

}
 80041c0:	b00e      	add	sp, #56	; 0x38
 80041c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c6:	bf00      	nop
 80041c8:	58024400 	.word	0x58024400
 80041cc:	58020400 	.word	0x58020400
 80041d0:	58020800 	.word	0x58020800
 80041d4:	58021400 	.word	0x58021400
 80041d8:	58020000 	.word	0x58020000
 80041dc:	58020c00 	.word	0x58020c00
 80041e0:	58021800 	.word	0x58021800
 80041e4:	58021000 	.word	0x58021000

080041e8 <PID_vInit>:
				PIDInput =ADCvalue;
			}
	 return(PIDInput);
}
void PID_vInit(tPID* pPID)
{                                          ///< Zeiger auf Reglerstruktur
 80041e8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	pPID-> _Ki				= 		0;
	pPID-> _Kd				= 		0.0;
	pPID-> _max				= 		3;
	pPID-> _min				= 		-3;
	pPID-> _Kaw				= 		0.0;
	pPID-> _EnKc			= 		1;
 80041ec:	2301      	movs	r3, #1
	pPID-> _min				= 		-3;
 80041ee:	2400      	movs	r4, #0
 80041f0:	4d23      	ldr	r5, [pc, #140]	; (8004280 <PID_vInit+0x98>)
	pPID-> _Ki				= 		0;
 80041f2:	2200      	movs	r2, #0
	pPID-> _max				= 		3;
 80041f4:	f04f 0a00 	mov.w	sl, #0
 80041f8:	f8df b090 	ldr.w	fp, [pc, #144]	; 800428c <PID_vInit+0xa4>
	pPID-> _fc				= 		10;
 80041fc:	f04f 0800 	mov.w	r8, #0
 8004200:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004290 <PID_vInit+0xa8>
	pPID-> _EnKc			= 		1;
 8004204:	6383      	str	r3, [r0, #56]	; 0x38
	pPID->error_1lag        =        0;
	pPID->error_2lag        =        0;
	pPID->error_AnWi        =        0;
	pPID->preout            =        0;
	pPID->_kt               =        -1;
	pPID->En                =        1.0;
 8004206:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	pPID-> _Ki				= 		0;
 800420a:	2300      	movs	r3, #0
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 800420c:	a71a      	add	r7, pc, #104	; (adr r7, 8004278 <PID_vInit+0x90>)
 800420e:	e9d7 6700 	ldrd	r6, r7, [r7]
	pPID-> _min				= 		-3;
 8004212:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 8004216:	e9c0 6700 	strd	r6, r7, [r0]
	pPID->_kt               =        -1;
 800421a:	2400      	movs	r4, #0
	pPID-> _Kp				= 		1;
 800421c:	2600      	movs	r6, #0
 800421e:	4f19      	ldr	r7, [pc, #100]	; (8004284 <PID_vInit+0x9c>)
	pPID->_kt               =        -1;
 8004220:	4d19      	ldr	r5, [pc, #100]	; (8004288 <PID_vInit+0xa0>)
	pPID-> _max				= 		3;
 8004222:	e9c0 ab08 	strd	sl, fp, [r0, #32]
	pPID-> _fc				= 		10;
 8004226:	e9c0 8910 	strd	r8, r9, [r0, #64]	; 0x40
	pPID-> _Kp				= 		1;
 800422a:	e9c0 6702 	strd	r6, r7, [r0, #8]
	pPID->a0                =        0.0;
	pPID->a1 				= 		0.0;
	pPID->a2      			= 		0.0;
	pPID->aw				=		0.0;
	pPID->omega 			=		0;
	pPID->a0 				= 		pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts+pPID->_Ki*V2MV*pPID->_Ts;
 800422e:	e9c0 6724 	strd	r6, r7, [r0, #144]	; 0x90
	pPID->_kt               =        -1;
 8004232:	e9c0 451e 	strd	r4, r5, [r0, #120]	; 0x78
	pPID->a1 				= 		-(pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts*2.0);
 8004236:	e9c0 4526 	strd	r4, r5, [r0, #152]	; 0x98
	pPID-> _Ki				= 		0;
 800423a:	e9c0 2304 	strd	r2, r3, [r0, #16]
	pPID-> _Kd				= 		0.0;
 800423e:	e9c0 2306 	strd	r2, r3, [r0, #24]
	pPID-> _Kaw				= 		0.0;
 8004242:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    pPID-> _PIDHold			= 		0.0;
 8004246:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	pPID->error             =        0;
 800424a:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	pPID->error_1lag        =        0;
 800424e:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	pPID->error_2lag        =        0;
 8004252:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
	pPID->error_AnWi        =        0;
 8004256:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	pPID->preout            =        0;
 800425a:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
	pPID->ref               =       0.0;
 800425e:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
	pPID->a2      			= 		0.0;
 8004262:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
	pPID->aw				=		0.0;
 8004266:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
	pPID->omega 			=		0;
 800426a:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
	pPID->a2 				=		pPID->_Kd/V2MUV/pPID->_Ts;
	pPID->aw   				=		pPID->_Kaw*pPID->_Ts;
};
 800426e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004272:	4770      	bx	lr
 8004274:	f3af 8000 	nop.w
 8004278:	88e368f1 	.word	0x88e368f1
 800427c:	3ed4f8b5 	.word	0x3ed4f8b5
 8004280:	c0080000 	.word	0xc0080000
 8004284:	3ff00000 	.word	0x3ff00000
 8004288:	bff00000 	.word	0xbff00000
 800428c:	40080000 	.word	0x40080000
 8004290:	40240000 	.word	0x40240000

08004294 <SPI1_start>:
	pPID->error_1lag = pPID->error;
//   tty3 =Kd/pPID->_Ts;
	pPID->outvalue= outputsat;
}
void SPI1_start()
{
 8004294:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004296:	2201      	movs	r2, #1
 8004298:	2110      	movs	r1, #16
 800429a:	4806      	ldr	r0, [pc, #24]	; (80042b4 <SPI1_start+0x20>)
 800429c:	f7fc ff98 	bl	80011d0 <HAL_GPIO_WritePin>
	  SPI1->CR1 |= SPI_CR1_SPE_Msk;    // enable SPI
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <SPI1_start+0x24>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
	  SPI1->CR1 |= SPI_CR1_CSTART_Msk; // master transfer start
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	bd08      	pop	{r3, pc}
 80042b4:	58020400 	.word	0x58020400
 80042b8:	40013000 	.word	0x40013000
 80042bc:	00000000 	.word	0x00000000

080042c0 <HAL_TIM_PeriodElapsedCallback>:

//	  DACOut=(uint32_t)(2.0/(3.3/65536));

}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_0);
 80042c2:	2101      	movs	r1, #1
 80042c4:	4880      	ldr	r0, [pc, #512]	; (80044c8 <HAL_TIM_PeriodElapsedCallback+0x208>)

		//HAL_GPIO_WritePin(GPIOG,GPIO_PIN_0,GPIO_PIN_SET);
		SPI_Anf =DWT->CYCCNT;
		SPI1_transmit(DACoutput1);
 80042c6:	4d81      	ldr	r5, [pc, #516]	; (80044cc <HAL_TIM_PeriodElapsedCallback+0x20c>)
    GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 80042c8:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80042cc:	4c80      	ldr	r4, [pc, #512]	; (80044d0 <HAL_TIM_PeriodElapsedCallback+0x210>)
{
 80042ce:	ed2d 8b02 	vpush	{d8}
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_0);
 80042d2:	f7fc ff81 	bl	80011d8 <HAL_GPIO_TogglePin>
		SPI_Anf =DWT->CYCCNT;
 80042d6:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80042d8:	4a7f      	ldr	r2, [pc, #508]	; (80044d8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80042da:	6858      	ldr	r0, [r3, #4]
    *ptxdr_16bits = data;
 80042dc:	4b7f      	ldr	r3, [pc, #508]	; (80044dc <HAL_TIM_PeriodElapsedCallback+0x21c>)
		SPI_Anf =DWT->CYCCNT;
 80042de:	6010      	str	r0, [r2, #0]
		SPI1_transmit(DACoutput1);
 80042e0:	8829      	ldrh	r1, [r5, #0]
    *ptxdr_16bits = data;
 80042e2:	681b      	ldr	r3, [r3, #0]
    while( !(SPI1->SR & SPI_SR_TXC_Msk));  // check if FiFo transmission complete
 80042e4:	4a7e      	ldr	r2, [pc, #504]	; (80044e0 <HAL_TIM_PeriodElapsedCallback+0x220>)
    GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 80042e6:	61a6      	str	r6, [r4, #24]
    *ptxdr_16bits = data;
 80042e8:	8019      	strh	r1, [r3, #0]
    while( !(SPI1->SR & SPI_SR_TXC_Msk));  // check if FiFo transmission complete
 80042ea:	6953      	ldr	r3, [r2, #20]
 80042ec:	04d9      	lsls	r1, r3, #19
 80042ee:	d5fc      	bpl.n	80042ea <HAL_TIM_PeriodElapsedCallback+0x2a>
    GPIOB->BSRR = GPIO_PIN_4; // Set
 80042f0:	4b77      	ldr	r3, [pc, #476]	; (80044d0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80042f2:	2210      	movs	r2, #16
		PT_Anf =PT_End;
 80042f4:	4c7b      	ldr	r4, [pc, #492]	; (80044e4 <HAL_TIM_PeriodElapsedCallback+0x224>)
    GPIOB->BSRR = GPIO_PIN_4; // Set
 80042f6:	619a      	str	r2, [r3, #24]
		PT_Anf =PT_End;
 80042f8:	4a7b      	ldr	r2, [pc, #492]	; (80044e8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80042fa:	6826      	ldr	r6, [r4, #0]
		SPI_End =DWT->CYCCNT;
 80042fc:	4b75      	ldr	r3, [pc, #468]	; (80044d4 <HAL_TIM_PeriodElapsedCallback+0x214>)
		PT_Anf =PT_End;
 80042fe:	6016      	str	r6, [r2, #0]
		SPI_End =DWT->CYCCNT;
 8004300:	497a      	ldr	r1, [pc, #488]	; (80044ec <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8004302:	685a      	ldr	r2, [r3, #4]
	 ADC1->ISR |=ADC_ISR_EOC_Msk;
 8004304:	4b7a      	ldr	r3, [pc, #488]	; (80044f0 <HAL_TIM_PeriodElapsedCallback+0x230>)
		SPI_End =DWT->CYCCNT;
 8004306:	600a      	str	r2, [r1, #0]
	 ADC1->ISR |=ADC_ISR_EOC_Msk;
 8004308:	681f      	ldr	r7, [r3, #0]
	 while ((ADC1->ISR  & ADC_ISR_EOC_Msk) == 0UL);
 800430a:	4619      	mov	r1, r3
	 ADC1->ISR |=ADC_ISR_EOC_Msk;
 800430c:	f047 0704 	orr.w	r7, r7, #4
 8004310:	601f      	str	r7, [r3, #0]
	 ADC1->CR |=ADC_CR_ADSTART_Msk;
 8004312:	689f      	ldr	r7, [r3, #8]
 8004314:	f047 0704 	orr.w	r7, r7, #4
 8004318:	609f      	str	r7, [r3, #8]
	 while ((ADC1->ISR  & ADC_ISR_EOC_Msk) == 0UL);
 800431a:	680b      	ldr	r3, [r1, #0]
 800431c:	075b      	lsls	r3, r3, #29
 800431e:	d5fc      	bpl.n	800431a <HAL_TIM_PeriodElapsedCallback+0x5a>
	 adc_value =ADC1->DR;
 8004320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		adc_value=ADC_read(&hadc1);
 8004322:	4f74      	ldr	r7, [pc, #464]	; (80044f4 <HAL_TIM_PeriodElapsedCallback+0x234>)
		ADC_End =DWT->CYCCNT;
		volt_value = DIG2WOLT*(float)(adc_value);
 8004324:	ee07 3a90 	vmov	s15, r3
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 8004328:	4973      	ldr	r1, [pc, #460]	; (80044f8 <HAL_TIM_PeriodElapsedCallback+0x238>)
		adc_value=ADC_read(&hadc1);
 800432a:	603b      	str	r3, [r7, #0]
		volt_value = DIG2WOLT*(float)(adc_value);
 800432c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 8004330:	4f72      	ldr	r7, [pc, #456]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0x23c>)
	 if (PIDInputOption == 0)
 8004332:	7809      	ldrb	r1, [r1, #0]
		ADC_End =DWT->CYCCNT;
 8004334:	4b67      	ldr	r3, [pc, #412]	; (80044d4 <HAL_TIM_PeriodElapsedCallback+0x214>)
		volt_value = DIG2WOLT*(float)(adc_value);
 8004336:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	 if (PIDInputOption == 0)
 800433a:	2900      	cmp	r1, #0
		volt_value = DIG2WOLT*(float)(adc_value);
 800433c:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8004518 <HAL_TIM_PeriodElapsedCallback+0x258>
		ADC_End =DWT->CYCCNT;
 8004340:	6859      	ldr	r1, [r3, #4]
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 8004342:	4b6f      	ldr	r3, [pc, #444]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x240>)
		volt_value = DIG2WOLT*(float)(adc_value);
 8004344:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80044a8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 8004348:	ed97 5b00 	vldr	d5, [r7]
 800434c:	681b      	ldr	r3, [r3, #0]
		volt_value = DIG2WOLT*(float)(adc_value);
 800434e:	ee27 7b06 	vmul.f64	d7, d7, d6
		ADC_End =DWT->CYCCNT;
 8004352:	4f6c      	ldr	r7, [pc, #432]	; (8004504 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004354:	6039      	str	r1, [r7, #0]
	if (pPID->En>=1)
 8004356:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 800435a:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
		volt_value = DIG2WOLT*(float)(adc_value);
 800435e:	ed8e 7b00 	vstr	d7, [lr]
	 if (PIDInputOption == 0)
 8004362:	bf08      	it	eq
 8004364:	eeb0 7b45 	vmoveq.f64	d7, d5
	if (pPID->En>=1)
 8004368:	2f00      	cmp	r7, #0
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 800436a:	ed93 2b1e 	vldr	d2, [r3, #120]	; 0x78
	pd          				= 	PIDInputSWitch(PIDInputOption, ADCvalue, LockIn);
 800436e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004372:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 8004376:	ee36 7b47 	vsub.f64	d7, d6, d7
 800437a:	ee27 2b02 	vmul.f64	d2, d7, d2
 800437e:	ed83 2b18 	vstr	d2, [r3, #96]	; 0x60
	if (pPID->En>=1)
 8004382:	f340 8085 	ble.w	8004490 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		output = (pPID->preout+pPID->a0*pPID->error + pPID->a1*pPID->error_1lag + pPID->a2*pPID->error_2lag+pPID->aw*pPID->error_AnWi)/(1+pPID->omega*pPID->_Ts);
 8004386:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800438a:	ed93 6b28 	vldr	d6, [r3, #160]	; 0xa0
 800438e:	ed93 8b1c 	vldr	d8, [r3, #112]	; 0x70
 8004392:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8004396:	ed93 1b1a 	vldr	d1, [r3, #104]	; 0x68
 800439a:	ee26 8b08 	vmul.f64	d8, d6, d8
 800439e:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 80043a2:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 80043a6:	eea7 8b01 	vfma.f64	d8, d7, d1
 80043aa:	ed93 4b2a 	vldr	d4, [r3, #168]	; 0xa8
 80043ae:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80043b2:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80043b6:	ee38 3b03 	vadd.f64	d3, d8, d3
 80043ba:	eea4 3b05 	vfma.f64	d3, d4, d5
 80043be:	ed93 5b00 	vldr	d5, [r3]
 80043c2:	eea6 0b05 	vfma.f64	d0, d6, d5
 80043c6:	eea2 3b07 	vfma.f64	d3, d2, d7
 80043ca:	ee83 6b00 	vdiv.f64	d6, d3, d0
	if( output > pPID->_max )
 80043ce:	ed93 5b08 	vldr	d5, [r3, #32]
	pPID->preout = output;
 80043d2:	ed83 6b20 	vstr	d6, [r3, #128]	; 0x80
	if( output > pPID->_max )
 80043d6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	dc03      	bgt.n	80043e8 <HAL_TIM_PeriodElapsedCallback+0x128>
 80043e0:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 80043e4:	fe86 5b05 	vmaxnm.f64	d5, d6, d5
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
		PID_End=DWT->CYCCNT;
		PID_duration =(PID_End-ADC_End)*0.0025;
		ADC_duration = (ADC_End-SPI_End)*0.0025;
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 80043e8:	1a10      	subs	r0, r2, r0
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 80043ea:	f8df e130 	ldr.w	lr, [pc, #304]	; 800451c <HAL_TIM_PeriodElapsedCallback+0x25c>
	pPID->error_AnWi              =   outputsat-output;
 80043ee:	ee35 6b46 	vsub.f64	d6, d5, d6
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 80043f2:	1a8a      	subs	r2, r1, r2
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 80043f4:	ee04 0a10 	vmov	s8, r0
		PID_End=DWT->CYCCNT;
 80043f8:	4836      	ldr	r0, [pc, #216]	; (80044d4 <HAL_TIM_PeriodElapsedCallback+0x214>)
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 80043fa:	ee07 2a10 	vmov	s14, r2
		PID_End=DWT->CYCCNT;
 80043fe:	f8df c120 	ldr.w	ip, [pc, #288]	; 8004520 <HAL_TIM_PeriodElapsedCallback+0x260>
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 8004402:	eeb8 3b44 	vcvt.f64.u32	d3, s8
		PID_duration =(PID_End-ADC_End)*0.0025;
 8004406:	4f40      	ldr	r7, [pc, #256]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x248>)
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 8004408:	eeb8 7b47 	vcvt.f64.u32	d7, s14
	pPID->outvalue= outputsat;
 800440c:	ed83 5b2e 	vstr	d5, [r3, #184]	; 0xb8
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 8004410:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80044b0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8004414:	ed9e 4b2e 	vldr	d4, [lr, #184]	; 0xb8
	pPID->error_AnWi              =   outputsat-output;
 8004418:	ed83 6b16 	vstr	d6, [r3, #88]	; 0x58
		PID_duration =(PID_End-ADC_End)*0.0025;
 800441c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80044b8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 8004420:	ee24 4b00 	vmul.f64	d4, d4, d0
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 8004424:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8004524 <HAL_TIM_PeriodElapsedCallback+0x264>
 8004428:	ee27 7b05 	vmul.f64	d7, d7, d5
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 800442c:	eefc 6bc4 	vcvt.u32.f64	s13, d4
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 8004430:	ee23 3b05 	vmul.f64	d3, d3, d5
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 8004434:	ee16 2a90 	vmov	r2, s13
 8004438:	802a      	strh	r2, [r5, #0]
		PID_End=DWT->CYCCNT;
 800443a:	6842      	ldr	r2, [r0, #4]
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 800443c:	4d33      	ldr	r5, [pc, #204]	; (800450c <HAL_TIM_PeriodElapsedCallback+0x24c>)
		PID_duration =(PID_End-ADC_End)*0.0025;
 800443e:	1a51      	subs	r1, r2, r1
		PID_End=DWT->CYCCNT;
 8004440:	f8cc 2000 	str.w	r2, [ip]
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 8004444:	4a32      	ldr	r2, [pc, #200]	; (8004510 <HAL_TIM_PeriodElapsedCallback+0x250>)
		PID_duration =(PID_End-ADC_End)*0.0025;
 8004446:	ee06 1a10 	vmov	s12, r1
		PT_End = DWT->CYCCNT;
		duration = (PT_End-PT_Anf)*0.0025;
 800444a:	4932      	ldr	r1, [pc, #200]	; (8004514 <HAL_TIM_PeriodElapsedCallback+0x254>)
		PID_duration =(PID_End-ADC_End)*0.0025;
 800444c:	eeb8 6b46 	vcvt.f64.u32	d6, s12
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 8004450:	ed8e 7b00 	vstr	d7, [lr]
		PID_duration =(PID_End-ADC_End)*0.0025;
 8004454:	ee26 6b05 	vmul.f64	d6, d6, d5
		//HAL_GPIO_WritePin(GPIOG,GPIO_PIN_0,GPIO_PIN_RESET);
      //  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
}
 8004458:	ecbd 8b02 	vpop	{d8}
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 800445c:	ee36 7b07 	vadd.f64	d7, d6, d7
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 8004460:	ed85 3b00 	vstr	d3, [r5]
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 8004464:	ee37 7b03 	vadd.f64	d7, d7, d3
		PID_duration =(PID_End-ADC_End)*0.0025;
 8004468:	ed87 6b00 	vstr	d6, [r7]
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 800446c:	ed82 7b00 	vstr	d7, [r2]
		PT_End = DWT->CYCCNT;
 8004470:	6842      	ldr	r2, [r0, #4]
		duration = (PT_End-PT_Anf)*0.0025;
 8004472:	1b90      	subs	r0, r2, r6
		PT_End = DWT->CYCCNT;
 8004474:	6022      	str	r2, [r4, #0]
		duration = (PT_End-PT_Anf)*0.0025;
 8004476:	ee07 0a10 	vmov	s14, r0
 800447a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
	pPID->error_2lag = pPID->error_1lag;
 800447e:	ed83 1b1c 	vstr	d1, [r3, #112]	; 0x70
		duration = (PT_End-PT_Anf)*0.0025;
 8004482:	ee27 7b05 	vmul.f64	d7, d7, d5
	pPID->error_1lag = pPID->error;
 8004486:	ed83 2b1a 	vstr	d2, [r3, #104]	; 0x68
		duration = (PT_End-PT_Anf)*0.0025;
 800448a:	ed81 7b00 	vstr	d7, [r1]
}
 800448e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pPID->error             =        0;
 8004490:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80044c0 <HAL_TIM_PeriodElapsedCallback+0x200>
 8004494:	eeb0 2b47 	vmov.f64	d2, d7
 8004498:	eeb0 1b47 	vmov.f64	d1, d7
		output = 0;
 800449c:	eeb0 6b47 	vmov.f64	d6, d7
		pPID->error             =        0;
 80044a0:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
 80044a4:	e793      	b.n	80043ce <HAL_TIM_PeriodElapsedCallback+0x10e>
 80044a6:	bf00      	nop
 80044a8:	66666666 	.word	0x66666666
 80044ac:	3f0a6666 	.word	0x3f0a6666
 80044b0:	00000000 	.word	0x00000000
 80044b4:	40d36500 	.word	0x40d36500
 80044b8:	47ae147b 	.word	0x47ae147b
 80044bc:	3f647ae1 	.word	0x3f647ae1
	...
 80044c8:	58021800 	.word	0x58021800
 80044cc:	2400035c 	.word	0x2400035c
 80044d0:	58020400 	.word	0x58020400
 80044d4:	e0001000 	.word	0xe0001000
 80044d8:	24000068 	.word	0x24000068
 80044dc:	24000010 	.word	0x24000010
 80044e0:	40013000 	.word	0x40013000
 80044e4:	24000064 	.word	0x24000064
 80044e8:	24000060 	.word	0x24000060
 80044ec:	2400006c 	.word	0x2400006c
 80044f0:	40022000 	.word	0x40022000
 80044f4:	24000078 	.word	0x24000078
 80044f8:	24000008 	.word	0x24000008
 80044fc:	24000048 	.word	0x24000048
 8004500:	2400000c 	.word	0x2400000c
 8004504:	2400003c 	.word	0x2400003c
 8004508:	24000058 	.word	0x24000058
 800450c:	24000070 	.word	0x24000070
 8004510:	24000370 	.word	0x24000370
 8004514:	24000080 	.word	0x24000080
 8004518:	24000088 	.word	0x24000088
 800451c:	24000238 	.word	0x24000238
 8004520:	24000050 	.word	0x24000050
 8004524:	24000040 	.word	0x24000040

08004528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800452c:	224c      	movs	r2, #76	; 0x4c
 800452e:	2100      	movs	r1, #0
 8004530:	a809      	add	r0, sp, #36	; 0x24
 8004532:	f000 fb31 	bl	8004b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004536:	2220      	movs	r2, #32
 8004538:	2100      	movs	r1, #0
 800453a:	a801      	add	r0, sp, #4
 800453c:	f000 fb2c 	bl	8004b98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004540:	2002      	movs	r0, #2
 8004542:	f7fc fe53 	bl	80011ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004546:	4a29      	ldr	r2, [pc, #164]	; (80045ec <SystemClock_Config+0xc4>)
 8004548:	2300      	movs	r3, #0
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800454e:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <SystemClock_Config+0xc8>)
 8004550:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004554:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004556:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004558:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800455a:	f002 0201 	and.w	r2, r2, #1
 800455e:	9200      	str	r2, [sp, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004566:	619a      	str	r2, [r3, #24]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004572:	6983      	ldr	r3, [r0, #24]
 8004574:	049b      	lsls	r3, r3, #18
 8004576:	d5fc      	bpl.n	8004572 <SystemClock_Config+0x4a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004578:	4d1e      	ldr	r5, [pc, #120]	; (80045f4 <SystemClock_Config+0xcc>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800457a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800457c:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800457e:	2101      	movs	r1, #1
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004580:	6aab      	ldr	r3, [r5, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004582:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004586:	2764      	movs	r7, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004588:	260c      	movs	r6, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800458a:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800458e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004590:	4323      	orrs	r3, r4
 8004592:	62ab      	str	r3, [r5, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004594:	921a      	str	r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004596:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004598:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 1;
 800459a:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800459c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045a0:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045a2:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80045a4:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80045a6:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80045a8:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 100;
 80045aa:	9715      	str	r7, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80045ac:	9619      	str	r6, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ae:	f7fc fec7 	bl	8001340 <HAL_RCC_OscConfig>
 80045b2:	4602      	mov	r2, r0
 80045b4:	b108      	cbz	r0, 80045ba <SystemClock_Config+0x92>
  __ASM volatile ("cpsid i" : : : "memory");
 80045b6:	b672      	cpsid	i
 80045b8:	e7fe      	b.n	80045b8 <SystemClock_Config+0x90>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80045ba:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045bc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045c0:	2703      	movs	r7, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80045c2:	2608      	movs	r6, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80045c4:	f44f 6580 	mov.w	r5, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045c8:	4621      	mov	r1, r4
 80045ca:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80045cc:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045ce:	f8cd e004 	str.w	lr, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045d2:	9702      	str	r7, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80045d4:	9604      	str	r6, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80045d6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80045d8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80045da:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80045dc:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045de:	f7fd fa49 	bl	8001a74 <HAL_RCC_ClockConfig>
 80045e2:	b108      	cbz	r0, 80045e8 <SystemClock_Config+0xc0>
 80045e4:	b672      	cpsid	i
 80045e6:	e7fe      	b.n	80045e6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
  }
}
 80045e8:	b01d      	add	sp, #116	; 0x74
 80045ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ec:	58000400 	.word	0x58000400
 80045f0:	58024800 	.word	0x58024800
 80045f4:	58024400 	.word	0x58024400

080045f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80045f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fa:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045fc:	22bc      	movs	r2, #188	; 0xbc
 80045fe:	2100      	movs	r1, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
  PeriphClkInitStruct.PLL3.PLL3N = 25;
  PeriphClkInitStruct.PLL3.PLL3P = 1;
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8004600:	2702      	movs	r7, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004602:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8004604:	2603      	movs	r6, #3
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004606:	f000 fac7 	bl	8004b98 <memset>
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800460a:	2301      	movs	r3, #1
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1
 800460c:	4a10      	ldr	r2, [pc, #64]	; (8004650 <PeriphCommonClock_Config+0x58>)
  PeriphClkInitStruct.PLL3.PLL3N = 25;
 800460e:	f04f 0e19 	mov.w	lr, #25
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8004612:	f44f 6540 	mov.w	r5, #3072	; 0xc00
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8004616:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1
 800461a:	9201      	str	r2, [sp, #4]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 800461c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8004620:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8004622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  PeriphClkInitStruct.PLL3.PLL3P = 1;
 8004626:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8004628:	f44f 4300 	mov.w	r3, #32768	; 0x8000

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800462c:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL3.PLL3N = 25;
 800462e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8004632:	970d      	str	r7, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8004634:	960e      	str	r6, [sp, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8004636:	950f      	str	r5, [sp, #60]	; 0x3c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8004638:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 800463a:	9119      	str	r1, [sp, #100]	; 0x64
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800463c:	9229      	str	r2, [sp, #164]	; 0xa4
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800463e:	932f      	str	r3, [sp, #188]	; 0xbc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004640:	f7fd fc7a 	bl	8001f38 <HAL_RCCEx_PeriphCLKConfig>
 8004644:	b108      	cbz	r0, 800464a <PeriphCommonClock_Config+0x52>
 8004646:	b672      	cpsid	i
 8004648:	e7fe      	b.n	8004648 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
  }
}
 800464a:	b031      	add	sp, #196	; 0xc4
 800464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464e:	bf00      	nop
 8004650:	40083000 	.word	0x40083000
 8004654:	00000000 	.word	0x00000000

08004658 <main>:
{
 8004658:	b580      	push	{r7, lr}
  HAL_Init();
 800465a:	f7fb fe63 	bl	8000324 <HAL_Init>
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 800465e:	4c20      	ldr	r4, [pc, #128]	; (80046e0 <main+0x88>)
  SystemClock_Config();
 8004660:	f7ff ff62 	bl	8004528 <SystemClock_Config>
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 8004664:	2700      	movs	r7, #0
  PeriphCommonClock_Config();
 8004666:	f7ff ffc7 	bl	80045f8 <PeriphCommonClock_Config>
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 800466a:	4e1e      	ldr	r6, [pc, #120]	; (80046e4 <main+0x8c>)
  MX_GPIO_Init();
 800466c:	f7ff fcae 	bl	8003fcc <MX_GPIO_Init>
  paramFreq = CTRLFREQUENCY;
 8004670:	4d1d      	ldr	r5, [pc, #116]	; (80046e8 <main+0x90>)
  MX_DAC1_Init();
 8004672:	f7ff fc43 	bl	8003efc <MX_DAC1_Init>
  MX_ADC1_Init();
 8004676:	f7ff fb4d 	bl	8003d14 <MX_ADC1_Init>
  MX_ADC3_Init();
 800467a:	f7ff fb9d 	bl	8003db8 <MX_ADC3_Init>
  MX_TIM2_Init();
 800467e:	f000 f99d 	bl	80049bc <MX_TIM2_Init>
  MX_SPI1_Init();
 8004682:	f000 f83d 	bl	8004700 <MX_SPI1_Init>
  MX_SPI4_Init();
 8004686:	f000 f86b 	bl	8004760 <MX_SPI4_Init>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800468a:	4818      	ldr	r0, [pc, #96]	; (80046ec <main+0x94>)
  DWT->CTRL |= 1;
 800468c:	4918      	ldr	r1, [pc, #96]	; (80046f0 <main+0x98>)
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 800468e:	f240 33e7 	movw	r3, #999	; 0x3e7
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004692:	68c2      	ldr	r2, [r0, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 8004694:	60e3      	str	r3, [r4, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004696:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  PID_vInit(pPID1);
 800469a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 80046f8 <main+0xa0>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800469e:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= 1;
 80046a0:	680a      	ldr	r2, [r1, #0]
  PID_vInit(pPID1);
 80046a2:	f8de 0000 	ldr.w	r0, [lr]
  DWT->CTRL |= 1;
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	600a      	str	r2, [r1, #0]
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 80046ac:	6822      	ldr	r2, [r4, #0]
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 80046ae:	6033      	str	r3, [r6, #0]
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 80046b0:	6297      	str	r7, [r2, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 80046b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  paramFreq = CTRLFREQUENCY;
 80046b4:	a308      	add	r3, pc, #32	; (adr r3, 80046d8 <main+0x80>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	e9c5 2300 	strd	r2, r3, [r5]
  PID_vInit(pPID1);
 80046be:	f7ff fd93 	bl	80041e8 <PID_vInit>
  ADC_Enable(&hadc1);
 80046c2:	480c      	ldr	r0, [pc, #48]	; (80046f4 <main+0x9c>)
 80046c4:	f7fc f8c2 	bl	800084c <ADC_Enable>
  SPI1_start();
 80046c8:	f7ff fde4 	bl	8004294 <SPI1_start>
  HAL_TIM_Base_Start_IT(&htim2);
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7fe fe85 	bl	80033dc <HAL_TIM_Base_Start_IT>
 80046d2:	e7fe      	b.n	80046d2 <main+0x7a>
 80046d4:	f3af 8000 	nop.w
 80046d8:	00000000 	.word	0x00000000
 80046dc:	41086a00 	.word	0x41086a00
 80046e0:	240004a0 	.word	0x240004a0
 80046e4:	24000388 	.word	0x24000388
 80046e8:	24000378 	.word	0x24000378
 80046ec:	e000edf0 	.word	0xe000edf0
 80046f0:	e0001000 	.word	0xe0001000
 80046f4:	24000170 	.word	0x24000170
 80046f8:	2400000c 	.word	0x2400000c

080046fc <Error_Handler>:
 80046fc:	b672      	cpsid	i
 80046fe:	e7fe      	b.n	80046fe <Error_Handler+0x2>

08004700 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004702:	4815      	ldr	r0, [pc, #84]	; (8004758 <MX_SPI1_Init+0x58>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004704:	2200      	movs	r2, #0
  hspi1.Instance = SPI1;
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <MX_SPI1_Init+0x5c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004708:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800470c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004710:	250f      	movs	r5, #15
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004712:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004716:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  hspi1.Instance = SPI1;
 800471a:	6018      	str	r0, [r3, #0]
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800471c:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800471e:	605f      	str	r7, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8004720:	609e      	str	r6, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004722:	60dd      	str	r5, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004724:	619c      	str	r4, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004726:	61d9      	str	r1, [r3, #28]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004728:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800472a:	615a      	str	r2, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800472c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800472e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004734:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004738:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800473e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004740:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004742:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004744:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004746:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004748:	f7fe fcfa 	bl	8003140 <HAL_SPI_Init>
 800474c:	b900      	cbnz	r0, 8004750 <MX_SPI1_Init+0x50>
 800474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8004754:	f7ff bfd2 	b.w	80046fc <Error_Handler>
 8004758:	40013000 	.word	0x40013000
 800475c:	24000418 	.word	0x24000418

08004760 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004762:	4a16      	ldr	r2, [pc, #88]	; (80047bc <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004764:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  hspi4.Instance = SPI4;
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800476a:	f44f 3700 	mov.w	r7, #131072	; 0x20000
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800476e:	2603      	movs	r6, #3
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004770:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004774:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004778:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi4.Instance = SPI4;
 800477c:	601a      	str	r2, [r3, #0]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800477e:	2200      	movs	r2, #0
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004780:	6058      	str	r0, [r3, #4]
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004782:	4618      	mov	r0, r3
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8004784:	609f      	str	r7, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8004786:	60de      	str	r6, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004788:	611d      	str	r5, [r3, #16]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800478a:	619c      	str	r4, [r3, #24]
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800478c:	6359      	str	r1, [r3, #52]	; 0x34
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800478e:	615a      	str	r2, [r3, #20]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004790:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004792:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004794:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8004798:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800479c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80047a2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80047a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80047a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80047a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80047aa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80047ac:	f7fe fcc8 	bl	8003140 <HAL_SPI_Init>
 80047b0:	b900      	cbnz	r0, 80047b4 <MX_SPI4_Init+0x54>
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80047b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 80047b8:	f7ff bfa0 	b.w	80046fc <Error_Handler>
 80047bc:	40013400 	.word	0x40013400
 80047c0:	24000390 	.word	0x24000390

080047c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80047c4:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c6:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 80047c8:	492c      	ldr	r1, [pc, #176]	; (800487c <HAL_SPI_MspInit+0xb8>)
{
 80047ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(spiHandle->Instance==SPI1)
 80047cc:	428a      	cmp	r2, r1
{
 80047ce:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d0:	9306      	str	r3, [sp, #24]
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	9307      	str	r3, [sp, #28]
 80047d6:	9308      	str	r3, [sp, #32]
 80047d8:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 80047da:	d02b      	beq.n	8004834 <HAL_SPI_MspInit+0x70>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI4)
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_SPI_MspInit+0xbc>)
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80047e2:	b00b      	add	sp, #44	; 0x2c
 80047e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 80047e6:	4b27      	ldr	r3, [pc, #156]	; (8004884 <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80047e8:	f44f 47a0 	mov.w	r7, #20480	; 0x5000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ee:	2503      	movs	r5, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 80047f0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80047f4:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047f6:	a905      	add	r1, sp, #20
 80047f8:	4823      	ldr	r0, [pc, #140]	; (8004888 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 80047fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047fe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004802:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004806:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800480a:	9203      	str	r2, [sp, #12]
 800480c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800480e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004812:	f042 0210 	orr.w	r2, r2, #16
 8004816:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800481a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800481e:	9705      	str	r7, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004820:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004824:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004826:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004828:	9304      	str	r3, [sp, #16]
 800482a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800482c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800482e:	f7fc fbbf 	bl	8000fb0 <HAL_GPIO_Init>
}
 8004832:	e7d6      	b.n	80047e2 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004834:	4b13      	ldr	r3, [pc, #76]	; (8004884 <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004838:	2728      	movs	r7, #40	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800483a:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800483c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004840:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004842:	a905      	add	r1, sp, #20
 8004844:	4811      	ldr	r0, [pc, #68]	; (800488c <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004846:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800484a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800484e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004852:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004856:	9201      	str	r2, [sp, #4]
 8004858:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800485e:	4332      	orrs	r2, r6
 8004860:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004868:	9705      	str	r7, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800486a:	4033      	ands	r3, r6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800486e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004870:	9302      	str	r3, [sp, #8]
 8004872:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004874:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004876:	f7fc fb9b 	bl	8000fb0 <HAL_GPIO_Init>
 800487a:	e7b2      	b.n	80047e2 <HAL_SPI_MspInit+0x1e>
 800487c:	40013000 	.word	0x40013000
 8004880:	40013400 	.word	0x40013400
 8004884:	58024400 	.word	0x58024400
 8004888:	58021000 	.word	0x58021000
 800488c:	58020400 	.word	0x58020400

08004890 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <HAL_MspInit+0x20>)
{
 8004892:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004894:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004898:	f042 0202 	orr.w	r2, r2, #2
 800489c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80048a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ac:	b002      	add	sp, #8
 80048ae:	4770      	bx	lr
 80048b0:	58024400 	.word	0x58024400

080048b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048b4:	e7fe      	b.n	80048b4 <NMI_Handler>
 80048b6:	bf00      	nop

080048b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048b8:	e7fe      	b.n	80048b8 <HardFault_Handler>
 80048ba:	bf00      	nop

080048bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048bc:	e7fe      	b.n	80048bc <MemManage_Handler>
 80048be:	bf00      	nop

080048c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048c0:	e7fe      	b.n	80048c0 <BusFault_Handler>
 80048c2:	bf00      	nop

080048c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048c4:	e7fe      	b.n	80048c4 <UsageFault_Handler>
 80048c6:	bf00      	nop

080048c8 <SVC_Handler>:
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop

080048cc <DebugMon_Handler>:
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop

080048d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop

080048d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048d4:	f7fb bd58 	b.w	8000388 <HAL_IncTick>

080048d8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048d8:	4801      	ldr	r0, [pc, #4]	; (80048e0 <TIM2_IRQHandler+0x8>)
 80048da:	f7ff b903 	b.w	8003ae4 <HAL_TIM_IRQHandler>
 80048de:	bf00      	nop
 80048e0:	240004a0 	.word	0x240004a0

080048e4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048e4:	492a      	ldr	r1, [pc, #168]	; (8004990 <SystemInit+0xac>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80048e6:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <SystemInit+0xb0>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80048ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80048f0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	2b06      	cmp	r3, #6
 80048fe:	d805      	bhi.n	800490c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004900:	6813      	ldr	r3, [r2, #0]
 8004902:	f023 030f 	bic.w	r3, r3, #15
 8004906:	f043 0307 	orr.w	r3, r3, #7
 800490a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800490c:	4b22      	ldr	r3, [pc, #136]	; (8004998 <SystemInit+0xb4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800490e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004910:	4a22      	ldr	r2, [pc, #136]	; (800499c <SystemInit+0xb8>)
  RCC->CR |= RCC_CR_HSION;
 8004912:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004914:	481f      	ldr	r0, [pc, #124]	; (8004994 <SystemInit+0xb0>)
  RCC->CR |= RCC_CR_HSION;
 8004916:	f041 0101 	orr.w	r1, r1, #1
 800491a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800491c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	400a      	ands	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004924:	6803      	ldr	r3, [r0, #0]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	2b07      	cmp	r3, #7
 800492c:	d905      	bls.n	800493a <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800492e:	6803      	ldr	r3, [r0, #0]
 8004930:	f023 030f 	bic.w	r3, r3, #15
 8004934:	f043 0307 	orr.w	r3, r3, #7
 8004938:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <SystemInit+0xb4>)
 800493c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800493e:	4918      	ldr	r1, [pc, #96]	; (80049a0 <SystemInit+0xbc>)
  RCC->PLLCKSELR = 0x02020200;
 8004940:	4c18      	ldr	r4, [pc, #96]	; (80049a4 <SystemInit+0xc0>)
  RCC->PLLCFGR = 0x01FF0000;
 8004942:	4819      	ldr	r0, [pc, #100]	; (80049a8 <SystemInit+0xc4>)
  RCC->D1CFGR = 0x00000000;
 8004944:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8004946:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004948:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800494a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800494c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800494e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004952:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004954:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004956:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004958:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800495a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800495c:	4c13      	ldr	r4, [pc, #76]	; (80049ac <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 800495e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004962:	4913      	ldr	r1, [pc, #76]	; (80049b0 <SystemInit+0xcc>)
  RCC->CR &= 0xFFFBFFFFU;
 8004964:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8004966:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	4019      	ands	r1, r3
 800496c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004970:	d202      	bcs.n	8004978 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <SystemInit+0xd0>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004978:	490f      	ldr	r1, [pc, #60]	; (80049b8 <SystemInit+0xd4>)
 800497a:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <SystemInit+0xac>)
 8004980:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004984:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004986:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00
 8004994:	52002000 	.word	0x52002000
 8004998:	58024400 	.word	0x58024400
 800499c:	eaf6ed7f 	.word	0xeaf6ed7f
 80049a0:	01010280 	.word	0x01010280
 80049a4:	02020200 	.word	0x02020200
 80049a8:	01ff0000 	.word	0x01ff0000
 80049ac:	5c001000 	.word	0x5c001000
 80049b0:	ffff0000 	.word	0xffff0000
 80049b4:	51008108 	.word	0x51008108
 80049b8:	52004000 	.word	0x52004000

080049bc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80049bc:	b570      	push	{r4, r5, r6, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049be:	4c3c      	ldr	r4, [pc, #240]	; (8004ab0 <MX_TIM2_Init+0xf4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049c0:	2300      	movs	r3, #0
{
 80049c2:	b094      	sub	sp, #80	; 0x50
  htim2.Instance = TIM2;
 80049c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049cc:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 80049ce:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = 4294967295;
 80049d0:	60e2      	str	r2, [r4, #12]
  htim2.Init.Prescaler = 0;
 80049d2:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049d4:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049d6:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049d8:	930d      	str	r3, [sp, #52]	; 0x34
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049da:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049dc:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049de:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	9306      	str	r3, [sp, #24]
 80049e4:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049e6:	9302      	str	r3, [sp, #8]
 80049e8:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049ea:	930e      	str	r3, [sp, #56]	; 0x38
 80049ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80049ee:	9310      	str	r3, [sp, #64]	; 0x40
 80049f0:	9311      	str	r3, [sp, #68]	; 0x44
 80049f2:	9312      	str	r3, [sp, #72]	; 0x48
 80049f4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049f6:	f7fe fc59 	bl	80032ac <HAL_TIM_Base_Init>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d13e      	bne.n	8004a7c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a02:	a904      	add	r1, sp, #16
 8004a04:	482a      	ldr	r0, [pc, #168]	; (8004ab0 <MX_TIM2_Init+0xf4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a06:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a08:	f7fe ffa6 	bl	8003958 <HAL_TIM_ConfigClockSource>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d12b      	bne.n	8004a68 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a10:	4827      	ldr	r0, [pc, #156]	; (8004ab0 <MX_TIM2_Init+0xf4>)
 8004a12:	f7fe fd3d 	bl	8003490 <HAL_TIM_PWM_Init>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d12d      	bne.n	8004a76 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a1a:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a1c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a1e:	a901      	add	r1, sp, #4
 8004a20:	4823      	ldr	r0, [pc, #140]	; (8004ab0 <MX_TIM2_Init+0xf4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a22:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a24:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a26:	f7ff f915 	bl	8003c54 <HAL_TIMEx_MasterConfigSynchronization>
 8004a2a:	b9d0      	cbnz	r0, 8004a62 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 2;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a2c:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a2e:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 2;
 8004a30:	2502      	movs	r5, #2
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a32:	a90d      	add	r1, sp, #52	; 0x34
 8004a34:	461a      	mov	r2, r3
 8004a36:	481e      	ldr	r0, [pc, #120]	; (8004ab0 <MX_TIM2_Init+0xf4>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a38:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a3a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a3c:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.Pulse = 2;
 8004a3e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a40:	f7fe fdbe 	bl	80035c0 <HAL_TIM_PWM_ConfigChannel>
 8004a44:	b108      	cbz	r0, 8004a4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004a46:	f7ff fe59 	bl	80046fc <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM2)
 8004a4a:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4c:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM2)
 8004a4e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a52:	9309      	str	r3, [sp, #36]	; 0x24
 8004a54:	9308      	str	r3, [sp, #32]
 8004a56:	930a      	str	r3, [sp, #40]	; 0x28
 8004a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a5a:	930c      	str	r3, [sp, #48]	; 0x30
  if(timHandle->Instance==TIM2)
 8004a5c:	d011      	beq.n	8004a82 <MX_TIM2_Init+0xc6>
}
 8004a5e:	b014      	add	sp, #80	; 0x50
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8004a62:	f7ff fe4b 	bl	80046fc <Error_Handler>
 8004a66:	e7e1      	b.n	8004a2c <MX_TIM2_Init+0x70>
    Error_Handler();
 8004a68:	f7ff fe48 	bl	80046fc <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a6c:	4810      	ldr	r0, [pc, #64]	; (8004ab0 <MX_TIM2_Init+0xf4>)
 8004a6e:	f7fe fd0f 	bl	8003490 <HAL_TIM_PWM_Init>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d0d1      	beq.n	8004a1a <MX_TIM2_Init+0x5e>
    Error_Handler();
 8004a76:	f7ff fe41 	bl	80046fc <Error_Handler>
 8004a7a:	e7ce      	b.n	8004a1a <MX_TIM2_Init+0x5e>
    Error_Handler();
 8004a7c:	f7ff fe3e 	bl	80046fc <Error_Handler>
 8004a80:	e7bd      	b.n	80049fe <MX_TIM2_Init+0x42>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <MX_TIM2_Init+0xf8>)
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a84:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a86:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a88:	a908      	add	r1, sp, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8e:	480a      	ldr	r0, [pc, #40]	; (8004ab8 <MX_TIM2_Init+0xfc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a90:	4322      	orrs	r2, r4
 8004a92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a9a:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9c:	4023      	ands	r3, r4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a9e:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa0:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa6:	f7fc fa83 	bl	8000fb0 <HAL_GPIO_Init>
}
 8004aaa:	b014      	add	sp, #80	; 0x50
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	bf00      	nop
 8004ab0:	240004a0 	.word	0x240004a0
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	58020000 	.word	0x58020000

08004abc <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM2)
 8004abc:	6803      	ldr	r3, [r0, #0]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d000      	beq.n	8004ac6 <HAL_TIM_Base_MspInit+0xa>
 8004ac4:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <HAL_TIM_Base_MspInit+0x3c>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	201c      	movs	r0, #28
 8004acc:	4611      	mov	r1, r2
{
 8004ace:	b510      	push	{r4, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ad0:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8004ad4:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ad6:	f044 0401 	orr.w	r4, r4, #1
 8004ada:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8004ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004aea:	f7fc f943 	bl	8000d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004aee:	201c      	movs	r0, #28
 8004af0:	f7fc f97a 	bl	8000de8 <HAL_NVIC_EnableIRQ>
}
 8004af4:	b002      	add	sp, #8
 8004af6:	bd10      	pop	{r4, pc}
 8004af8:	58024400 	.word	0x58024400

08004afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b00:	f7ff fef0 	bl	80048e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b04:	480c      	ldr	r0, [pc, #48]	; (8004b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b06:	490d      	ldr	r1, [pc, #52]	; (8004b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b08:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b0c:	e002      	b.n	8004b14 <LoopCopyDataInit>

08004b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b12:	3304      	adds	r3, #4

08004b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b18:	d3f9      	bcc.n	8004b0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b1c:	4c0a      	ldr	r4, [pc, #40]	; (8004b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b20:	e001      	b.n	8004b26 <LoopFillZerobss>

08004b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b24:	3204      	adds	r2, #4

08004b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b28:	d3fb      	bcc.n	8004b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b2a:	f000 f811 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b2e:	f7ff fd93 	bl	8004658 <main>
  bx  lr
 8004b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004b3c:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8004b40:	08004bd8 	.word	0x08004bd8
  ldr r2, =_sbss
 8004b44:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8004b48:	240004ec 	.word	0x240004ec

08004b4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b4c:	e7fe      	b.n	8004b4c <ADC3_IRQHandler>
	...

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4e0d      	ldr	r6, [pc, #52]	; (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1ba4      	subs	r4, r4, r6
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2500      	movs	r5, #0
 8004b5c:	42a5      	cmp	r5, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4e0b      	ldr	r6, [pc, #44]	; (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <__libc_init_array+0x44>)
 8004b64:	f000 f820 	bl	8004ba8 <_init>
 8004b68:	1ba4      	subs	r4, r4, r6
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2500      	movs	r5, #0
 8004b6e:	42a5      	cmp	r5, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b78:	4798      	blx	r3
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b82:	4798      	blx	r3
 8004b84:	3501      	adds	r5, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	08004bd0 	.word	0x08004bd0
 8004b8c:	08004bd0 	.word	0x08004bd0
 8004b90:	08004bd0 	.word	0x08004bd0
 8004b94:	08004bd4 	.word	0x08004bd4

08004b98 <memset>:
 8004b98:	4402      	add	r2, r0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d100      	bne.n	8004ba2 <memset+0xa>
 8004ba0:	4770      	bx	lr
 8004ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba6:	e7f9      	b.n	8004b9c <memset+0x4>

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr

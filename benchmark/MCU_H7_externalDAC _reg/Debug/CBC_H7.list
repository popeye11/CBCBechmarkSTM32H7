
CBC_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  24000000  08006250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002514  24000020  0800626c  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00003400  24002534  0800626c  00022534  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002a998  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003a91  00000000  00000000  0004a9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000fcc8  00000000  00000000  0004e473  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000011c0  00000000  00000000  0005e140  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c08  00000000  00000000  0005f300  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00039301  00000000  00000000  00060f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001079b  00000000  00000000  0009a209  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00172bad  00000000  00000000  000aa9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0021d551  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000317c  00000000  00000000  0021d5d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005e50 	.word	0x08005e50

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	08005e50 	.word	0x08005e50

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <HAL_InitTick+0x44>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
 80002e0:	4770      	bx	lr
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <HAL_InitTick+0x48>)
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 fe95 	bl	8001024 <HAL_SYSTICK_Config>
 80002fa:	b968      	cbnz	r0, 8000318 <HAL_InitTick+0x40>
    {
      return HAL_ERROR;
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fc:	2c0f      	cmp	r4, #15
 80002fe:	d901      	bls.n	8000304 <HAL_InitTick+0x2c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295
 800030c:	f000 fe4c 	bl	8000fa8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <HAL_InitTick+0x4c>)
 8000312:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000314:	2000      	movs	r0, #0
 8000316:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8000318:	2001      	movs	r0, #1
 800031a:	bd10      	pop	{r4, pc}
 800031c:	24000000 	.word	0x24000000
 8000320:	24000014 	.word	0x24000014
 8000324:	24000004 	.word	0x24000004

08000328 <HAL_Init>:
{
 8000328:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	2003      	movs	r0, #3
 800032c:	f000 fe2a 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f001 fba4 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8000334:	490f      	ldr	r1, [pc, #60]	; (8000374 <HAL_Init+0x4c>)
 8000336:	698b      	ldr	r3, [r1, #24]
 8000338:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <HAL_Init+0x50>)
 800033e:	5cd3      	ldrb	r3, [r2, r3]
 8000340:	f003 031f 	and.w	r3, r3, #31
 8000344:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000346:	698b      	ldr	r3, [r1, #24]
 8000348:	f003 030f 	and.w	r3, r3, #15
 800034c:	5cd3      	ldrb	r3, [r2, r3]
 800034e:	f003 031f 	and.w	r3, r3, #31
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
 8000356:	4a09      	ldr	r2, [pc, #36]	; (800037c <HAL_Init+0x54>)
 8000358:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <HAL_Init+0x58>)
 800035c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ffba 	bl	80002d8 <HAL_InitTick>
 8000364:	b110      	cbz	r0, 800036c <HAL_Init+0x44>
    return HAL_ERROR;
 8000366:	2401      	movs	r4, #1
}
 8000368:	4620      	mov	r0, r4
 800036a:	bd10      	pop	{r4, pc}
 800036c:	4604      	mov	r4, r0
  HAL_MspInit();
 800036e:	f004 febd 	bl	80050ec <HAL_MspInit>
  return HAL_OK;
 8000372:	e7f9      	b.n	8000368 <HAL_Init+0x40>
 8000374:	58024400 	.word	0x58024400
 8000378:	08005e68 	.word	0x08005e68
 800037c:	24000018 	.word	0x24000018
 8000380:	24000014 	.word	0x24000014

08000384 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <HAL_IncTick+0x10>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4a03      	ldr	r2, [pc, #12]	; (8000398 <HAL_IncTick+0x14>)
 800038a:	6811      	ldr	r1, [r2, #0]
 800038c:	440b      	add	r3, r1
 800038e:	6013      	str	r3, [r2, #0]
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	24000000 	.word	0x24000000
 8000398:	24000090 	.word	0x24000090

0800039c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800039c:	4b01      	ldr	r3, [pc, #4]	; (80003a4 <HAL_GetTick+0x8>)
 800039e:	6818      	ldr	r0, [r3, #0]
}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	24000090 	.word	0x24000090

080003a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a8:	b538      	push	{r3, r4, r5, lr}
 80003aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003ac:	f7ff fff6 	bl	800039c <HAL_GetTick>
 80003b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80003b6:	d002      	beq.n	80003be <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <HAL_Delay+0x24>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003be:	f7ff ffed 	bl	800039c <HAL_GetTick>
 80003c2:	1b40      	subs	r0, r0, r5
 80003c4:	4284      	cmp	r4, r0
 80003c6:	d8fa      	bhi.n	80003be <HAL_Delay+0x16>
  {
  }
}
 80003c8:	bd38      	pop	{r3, r4, r5, pc}
 80003ca:	bf00      	nop
 80003cc:	24000000 	.word	0x24000000

080003d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_GetREVID+0x8>)
 80003d2:	6818      	ldr	r0, [r3, #0]
}
 80003d4:	0c00      	lsrs	r0, r0, #16
 80003d6:	4770      	bx	lr
 80003d8:	5c001000 	.word	0x5c001000

080003dc <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80003de:	6853      	ldr	r3, [r2, #4]
 80003e0:	ea23 0000 	bic.w	r0, r3, r0
 80003e4:	4308      	orrs	r0, r1
 80003e6:	6050      	str	r0, [r2, #4]
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	58000400 	.word	0x58000400

080003f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80003f4:	2200      	movs	r2, #0
 80003f6:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80003f8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80003fc:	2a01      	cmp	r2, #1
 80003fe:	f000 826c 	beq.w	80008da <HAL_ADC_ConfigChannel+0x4ea>
 8000402:	4603      	mov	r3, r0
 8000404:	2201      	movs	r2, #1
 8000406:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800040a:	6800      	ldr	r0, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800040c:	6882      	ldr	r2, [r0, #8]
 800040e:	f012 0f04 	tst.w	r2, #4
 8000412:	f000 80b0 	beq.w	8000576 <HAL_ADC_ConfigChannel+0x186>
 8000416:	2501      	movs	r5, #1
 8000418:	2d00      	cmp	r5, #0
 800041a:	f040 8250 	bne.w	80008be <HAL_ADC_ConfigChannel+0x4ce>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800041e:	680a      	ldr	r2, [r1, #0]
 8000420:	f3c2 0413 	ubfx	r4, r2, #0, #20
 8000424:	2c00      	cmp	r4, #0
 8000426:	f040 80a8 	bne.w	800057a <HAL_ADC_ConfigChannel+0x18a>
 800042a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800042e:	2401      	movs	r4, #1
 8000430:	fa04 f202 	lsl.w	r2, r4, r2
 8000434:	69c4      	ldr	r4, [r0, #28]
 8000436:	4322      	orrs	r2, r4
 8000438:	61c2      	str	r2, [r0, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800043a:	681f      	ldr	r7, [r3, #0]
 800043c:	684e      	ldr	r6, [r1, #4]
 800043e:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000440:	3730      	adds	r7, #48	; 0x30
 8000442:	0a32      	lsrs	r2, r6, #8
 8000444:	0092      	lsls	r2, r2, #2
 8000446:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 800044a:	58b8      	ldr	r0, [r7, r2]
 800044c:	f006 061f 	and.w	r6, r6, #31
 8000450:	f04f 0e1f 	mov.w	lr, #31
 8000454:	fa0e fe06 	lsl.w	lr, lr, r6
 8000458:	ea20 000e 	bic.w	r0, r0, lr
 800045c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8000460:	40b4      	lsls	r4, r6
 8000462:	4320      	orrs	r0, r4
 8000464:	50b8      	str	r0, [r7, r2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000466:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000468:	68a2      	ldr	r2, [r4, #8]
 800046a:	f012 0f04 	tst.w	r2, #4
 800046e:	f000 8091 	beq.w	8000594 <HAL_ADC_ConfigChannel+0x1a4>
 8000472:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000474:	68a2      	ldr	r2, [r4, #8]
 8000476:	f012 0f08 	tst.w	r2, #8
 800047a:	f000 808d 	beq.w	8000598 <HAL_ADC_ConfigChannel+0x1a8>
 800047e:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000480:	f080 0001 	eor.w	r0, r0, #1
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000484:	f082 0201 	eor.w	r2, r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000488:	4210      	tst	r0, r2
 800048a:	d04f      	beq.n	800052c <HAL_ADC_ConfigChannel+0x13c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800048c:	680f      	ldr	r7, [r1, #0]
 800048e:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000490:	3414      	adds	r4, #20
 8000492:	0e7a      	lsrs	r2, r7, #25
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 800049a:	58a6      	ldr	r6, [r4, r2]
 800049c:	f3c7 5704 	ubfx	r7, r7, #20, #5
 80004a0:	f04f 0e07 	mov.w	lr, #7
 80004a4:	fa0e fe07 	lsl.w	lr, lr, r7
 80004a8:	ea26 060e 	bic.w	r6, r6, lr
 80004ac:	40b8      	lsls	r0, r7
 80004ae:	4330      	orrs	r0, r6
 80004b0:	50a0      	str	r0, [r4, r2]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80004b2:	4ab4      	ldr	r2, [pc, #720]	; (8000784 <HAL_ADC_ConfigChannel+0x394>)
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80004ba:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80004be:	d06d      	beq.n	800059c <HAL_ADC_ConfigChannel+0x1ac>
 80004c0:	6818      	ldr	r0, [r3, #0]
 80004c2:	68c2      	ldr	r2, [r0, #12]
 80004c4:	f012 0f10 	tst.w	r2, #16
 80004c8:	d170      	bne.n	80005ac <HAL_ADC_ConfigChannel+0x1bc>
 80004ca:	694a      	ldr	r2, [r1, #20]
 80004cc:	68c0      	ldr	r0, [r0, #12]
 80004ce:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80004d2:	0040      	lsls	r0, r0, #1
 80004d4:	4082      	lsls	r2, r0
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80004d6:	690f      	ldr	r7, [r1, #16]
 80004d8:	2f04      	cmp	r7, #4
 80004da:	d075      	beq.n	80005c8 <HAL_ADC_ConfigChannel+0x1d8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80004dc:	681c      	ldr	r4, [r3, #0]
 80004de:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004e0:	3460      	adds	r4, #96	; 0x60
    MODIFY_REG(*preg,
 80004e2:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 80004e6:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004ea:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80004ee:	4332      	orrs	r2, r6
 80004f0:	4302      	orrs	r2, r0
 80004f2:	f844 2027 	str.w	r2, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	690e      	ldr	r6, [r1, #16]
 80004fa:	7e48      	ldrb	r0, [r1, #25]
 80004fc:	2801      	cmp	r0, #1
 80004fe:	d05d      	beq.n	80005bc <HAL_ADC_ConfigChannel+0x1cc>
 8000500:	4628      	mov	r0, r5
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000502:	3260      	adds	r2, #96	; 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000504:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8000508:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800050c:	4320      	orrs	r0, r4
 800050e:	f842 0026 	str.w	r0, [r2, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000512:	681c      	ldr	r4, [r3, #0]
 8000514:	6908      	ldr	r0, [r1, #16]
 8000516:	7e0a      	ldrb	r2, [r1, #24]
 8000518:	2a01      	cmp	r2, #1
 800051a:	d052      	beq.n	80005c2 <HAL_ADC_ConfigChannel+0x1d2>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800051c:	6922      	ldr	r2, [r4, #16]
 800051e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000522:	f000 001f 	and.w	r0, r0, #31
 8000526:	4085      	lsls	r5, r0
 8000528:	4315      	orrs	r5, r2
 800052a:	6125      	str	r5, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800052c:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800052e:	6882      	ldr	r2, [r0, #8]
 8000530:	f012 0f01 	tst.w	r2, #1
 8000534:	d07c      	beq.n	8000630 <HAL_ADC_ConfigChannel+0x240>
 8000536:	2201      	movs	r2, #1
 8000538:	2a00      	cmp	r2, #0
 800053a:	f040 81ca 	bne.w	80008d2 <HAL_ADC_ConfigChannel+0x4e2>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800053e:	680a      	ldr	r2, [r1, #0]
 8000540:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000542:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8000546:	f3c2 0613 	ubfx	r6, r2, #0, #20
 800054a:	ea24 0406 	bic.w	r4, r4, r6
 800054e:	f005 0618 	and.w	r6, r5, #24
 8000552:	4d8d      	ldr	r5, [pc, #564]	; (8000788 <HAL_ADC_ConfigChannel+0x398>)
 8000554:	40f5      	lsrs	r5, r6
 8000556:	402a      	ands	r2, r5
 8000558:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800055c:	4322      	orrs	r2, r4
 800055e:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000562:	68c8      	ldr	r0, [r1, #12]
 8000564:	4a89      	ldr	r2, [pc, #548]	; (800078c <HAL_ADC_ConfigChannel+0x39c>)
 8000566:	4290      	cmp	r0, r2
 8000568:	d064      	beq.n	8000634 <HAL_ADC_ConfigChannel+0x244>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800056a:	680a      	ldr	r2, [r1, #0]
 800056c:	2a00      	cmp	r2, #0
 800056e:	f2c0 8121 	blt.w	80007b4 <HAL_ADC_ConfigChannel+0x3c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000572:	2000      	movs	r0, #0
 8000574:	e1a8      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000576:	2500      	movs	r5, #0
 8000578:	e74e      	b.n	8000418 <HAL_ADC_ConfigChannel+0x28>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800057a:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800057e:	b112      	cbz	r2, 8000586 <HAL_ADC_ConfigChannel+0x196>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000580:	fab2 f282 	clz	r2, r2
 8000584:	e000      	b.n	8000588 <HAL_ADC_ConfigChannel+0x198>
    return 32U;
 8000586:	2220      	movs	r2, #32
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000588:	f002 021f 	and.w	r2, r2, #31
 800058c:	2401      	movs	r4, #1
 800058e:	fa04 f202 	lsl.w	r2, r4, r2
 8000592:	e74f      	b.n	8000434 <HAL_ADC_ConfigChannel+0x44>
 8000594:	2000      	movs	r0, #0
 8000596:	e76d      	b.n	8000474 <HAL_ADC_ConfigChannel+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000598:	2200      	movs	r2, #0
 800059a:	e771      	b.n	8000480 <HAL_ADC_ConfigChannel+0x90>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800059c:	694a      	ldr	r2, [r1, #20]
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	68c0      	ldr	r0, [r0, #12]
 80005a2:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80005a6:	0040      	lsls	r0, r0, #1
 80005a8:	4082      	lsls	r2, r0
 80005aa:	e794      	b.n	80004d6 <HAL_ADC_ConfigChannel+0xe6>
 80005ac:	694a      	ldr	r2, [r1, #20]
 80005ae:	68c0      	ldr	r0, [r0, #12]
 80005b0:	0880      	lsrs	r0, r0, #2
 80005b2:	f000 0004 	and.w	r0, r0, #4
 80005b6:	0040      	lsls	r0, r0, #1
 80005b8:	4082      	lsls	r2, r0
 80005ba:	e78c      	b.n	80004d6 <HAL_ADC_ConfigChannel+0xe6>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80005bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80005c0:	e79f      	b.n	8000502 <HAL_ADC_ConfigChannel+0x112>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80005c2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80005c6:	e7a9      	b.n	800051c <HAL_ADC_ConfigChannel+0x12c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80005c8:	6818      	ldr	r0, [r3, #0]
 80005ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80005cc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80005d0:	680c      	ldr	r4, [r1, #0]
 80005d2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80005d6:	d01c      	beq.n	8000612 <HAL_ADC_ConfigChannel+0x222>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80005dc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80005e0:	680c      	ldr	r4, [r1, #0]
 80005e2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80005e6:	d019      	beq.n	800061c <HAL_ADC_ConfigChannel+0x22c>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80005ec:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80005f0:	680c      	ldr	r4, [r1, #0]
 80005f2:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 80005f6:	d016      	beq.n	8000626 <HAL_ADC_ConfigChannel+0x236>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80005fc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000600:	680c      	ldr	r4, [r1, #0]
 8000602:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000606:	d191      	bne.n	800052c <HAL_ADC_ConfigChannel+0x13c>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8000608:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800060a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800060e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8000610:	e78c      	b.n	800052c <HAL_ADC_ConfigChannel+0x13c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000612:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000614:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000618:	6602      	str	r2, [r0, #96]	; 0x60
 800061a:	e7dd      	b.n	80005d8 <HAL_ADC_ConfigChannel+0x1e8>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800061c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800061e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000622:	6642      	str	r2, [r0, #100]	; 0x64
 8000624:	e7e0      	b.n	80005e8 <HAL_ADC_ConfigChannel+0x1f8>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000626:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000628:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800062c:	6682      	str	r2, [r0, #104]	; 0x68
 800062e:	e7e3      	b.n	80005f8 <HAL_ADC_ConfigChannel+0x208>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000630:	2200      	movs	r2, #0
 8000632:	e781      	b.n	8000538 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000634:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000636:	680a      	ldr	r2, [r1, #0]
 8000638:	f3c2 0613 	ubfx	r6, r2, #0, #20
 800063c:	2e00      	cmp	r6, #0
 800063e:	d135      	bne.n	80006ac <HAL_ADC_ConfigChannel+0x2bc>
 8000640:	0e90      	lsrs	r0, r2, #26
 8000642:	3001      	adds	r0, #1
 8000644:	f000 001f 	and.w	r0, r0, #31
 8000648:	2809      	cmp	r0, #9
 800064a:	bf8c      	ite	hi
 800064c:	2000      	movhi	r0, #0
 800064e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000650:	2800      	cmp	r0, #0
 8000652:	d062      	beq.n	800071a <HAL_ADC_ConfigChannel+0x32a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000654:	2e00      	cmp	r6, #0
 8000656:	d138      	bne.n	80006ca <HAL_ADC_ConfigChannel+0x2da>
 8000658:	0e90      	lsrs	r0, r2, #26
 800065a:	3001      	adds	r0, #1
 800065c:	0680      	lsls	r0, r0, #26
 800065e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000662:	2e00      	cmp	r6, #0
 8000664:	d13d      	bne.n	80006e2 <HAL_ADC_ConfigChannel+0x2f2>
 8000666:	0e95      	lsrs	r5, r2, #26
 8000668:	3501      	adds	r5, #1
 800066a:	f005 071f 	and.w	r7, r5, #31
 800066e:	2501      	movs	r5, #1
 8000670:	40bd      	lsls	r5, r7
 8000672:	4328      	orrs	r0, r5
 8000674:	2e00      	cmp	r6, #0
 8000676:	d142      	bne.n	80006fe <HAL_ADC_ConfigChannel+0x30e>
 8000678:	0e92      	lsrs	r2, r2, #26
 800067a:	3201      	adds	r2, #1
 800067c:	f002 021f 	and.w	r2, r2, #31
 8000680:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000684:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000686:	4302      	orrs	r2, r0
 8000688:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800068a:	3414      	adds	r4, #20
 800068c:	0e50      	lsrs	r0, r2, #25
 800068e:	0080      	lsls	r0, r0, #2
 8000690:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8000694:	5826      	ldr	r6, [r4, r0]
 8000696:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800069a:	2707      	movs	r7, #7
 800069c:	4097      	lsls	r7, r2
 800069e:	ea26 0607 	bic.w	r6, r6, r7
 80006a2:	fa05 f202 	lsl.w	r2, r5, r2
 80006a6:	4332      	orrs	r2, r6
 80006a8:	5022      	str	r2, [r4, r0]
 80006aa:	e75e      	b.n	800056a <HAL_ADC_ConfigChannel+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ac:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80006b0:	b148      	cbz	r0, 80006c6 <HAL_ADC_ConfigChannel+0x2d6>
  return __builtin_clz(value);
 80006b2:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006b6:	3001      	adds	r0, #1
 80006b8:	f000 001f 	and.w	r0, r0, #31
 80006bc:	2809      	cmp	r0, #9
 80006be:	bf8c      	ite	hi
 80006c0:	2000      	movhi	r0, #0
 80006c2:	2001      	movls	r0, #1
 80006c4:	e7c4      	b.n	8000650 <HAL_ADC_ConfigChannel+0x260>
    return 32U;
 80006c6:	2020      	movs	r0, #32
 80006c8:	e7f5      	b.n	80006b6 <HAL_ADC_ConfigChannel+0x2c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ca:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80006ce:	b130      	cbz	r0, 80006de <HAL_ADC_ConfigChannel+0x2ee>
  return __builtin_clz(value);
 80006d0:	fab0 f080 	clz	r0, r0
 80006d4:	3001      	adds	r0, #1
 80006d6:	0680      	lsls	r0, r0, #26
 80006d8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80006dc:	e7c1      	b.n	8000662 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80006de:	2020      	movs	r0, #32
 80006e0:	e7f8      	b.n	80006d4 <HAL_ADC_ConfigChannel+0x2e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006e2:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80006e6:	b145      	cbz	r5, 80006fa <HAL_ADC_ConfigChannel+0x30a>
  return __builtin_clz(value);
 80006e8:	fab5 f585 	clz	r5, r5
 80006ec:	3501      	adds	r5, #1
 80006ee:	f005 051f 	and.w	r5, r5, #31
 80006f2:	2701      	movs	r7, #1
 80006f4:	fa07 f505 	lsl.w	r5, r7, r5
 80006f8:	e7bb      	b.n	8000672 <HAL_ADC_ConfigChannel+0x282>
    return 32U;
 80006fa:	2520      	movs	r5, #32
 80006fc:	e7f6      	b.n	80006ec <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006fe:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8000702:	b142      	cbz	r2, 8000716 <HAL_ADC_ConfigChannel+0x326>
  return __builtin_clz(value);
 8000704:	fab2 f282 	clz	r2, r2
 8000708:	3201      	adds	r2, #1
 800070a:	f002 021f 	and.w	r2, r2, #31
 800070e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000712:	0512      	lsls	r2, r2, #20
 8000714:	e7b7      	b.n	8000686 <HAL_ADC_ConfigChannel+0x296>
    return 32U;
 8000716:	2220      	movs	r2, #32
 8000718:	e7f6      	b.n	8000708 <HAL_ADC_ConfigChannel+0x318>
 800071a:	b9ce      	cbnz	r6, 8000750 <HAL_ADC_ConfigChannel+0x360>
 800071c:	0e95      	lsrs	r5, r2, #26
 800071e:	3501      	adds	r5, #1
 8000720:	06ad      	lsls	r5, r5, #26
 8000722:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000726:	b9fe      	cbnz	r6, 8000768 <HAL_ADC_ConfigChannel+0x378>
 8000728:	0e90      	lsrs	r0, r2, #26
 800072a:	3001      	adds	r0, #1
 800072c:	f000 071f 	and.w	r7, r0, #31
 8000730:	2001      	movs	r0, #1
 8000732:	40b8      	lsls	r0, r7
 8000734:	4305      	orrs	r5, r0
 8000736:	bb5e      	cbnz	r6, 8000790 <HAL_ADC_ConfigChannel+0x3a0>
 8000738:	0e90      	lsrs	r0, r2, #26
 800073a:	3001      	adds	r0, #1
 800073c:	f000 001f 	and.w	r0, r0, #31
 8000740:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000744:	3a1e      	subs	r2, #30
 8000746:	0512      	lsls	r2, r2, #20
 8000748:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800074c:	432a      	orrs	r2, r5
 800074e:	e79b      	b.n	8000688 <HAL_ADC_ConfigChannel+0x298>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000750:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8000754:	b135      	cbz	r5, 8000764 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8000756:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800075a:	3501      	adds	r5, #1
 800075c:	06ad      	lsls	r5, r5, #26
 800075e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000762:	e7e0      	b.n	8000726 <HAL_ADC_ConfigChannel+0x336>
    return 32U;
 8000764:	2520      	movs	r5, #32
 8000766:	e7f8      	b.n	800075a <HAL_ADC_ConfigChannel+0x36a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000768:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800076c:	b140      	cbz	r0, 8000780 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800076e:	fab0 f080 	clz	r0, r0
 8000772:	3001      	adds	r0, #1
 8000774:	f000 001f 	and.w	r0, r0, #31
 8000778:	2701      	movs	r7, #1
 800077a:	fa07 f000 	lsl.w	r0, r7, r0
 800077e:	e7d9      	b.n	8000734 <HAL_ADC_ConfigChannel+0x344>
    return 32U;
 8000780:	2020      	movs	r0, #32
 8000782:	e7f6      	b.n	8000772 <HAL_ADC_ConfigChannel+0x382>
 8000784:	5c001000 	.word	0x5c001000
 8000788:	000fffff 	.word	0x000fffff
 800078c:	47ff0000 	.word	0x47ff0000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000790:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8000794:	b162      	cbz	r2, 80007b0 <HAL_ADC_ConfigChannel+0x3c0>
  return __builtin_clz(value);
 8000796:	fab2 f282 	clz	r2, r2
 800079a:	1c50      	adds	r0, r2, #1
 800079c:	f000 001f 	and.w	r0, r0, #31
 80007a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80007a4:	f1a0 021e 	sub.w	r2, r0, #30
 80007a8:	0512      	lsls	r2, r2, #20
 80007aa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80007ae:	e7cd      	b.n	800074c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80007b0:	2220      	movs	r2, #32
 80007b2:	e7f2      	b.n	800079a <HAL_ADC_ConfigChannel+0x3aa>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80007b4:	6819      	ldr	r1, [r3, #0]
 80007b6:	484a      	ldr	r0, [pc, #296]	; (80008e0 <HAL_ADC_ConfigChannel+0x4f0>)
 80007b8:	4c4a      	ldr	r4, [pc, #296]	; (80008e4 <HAL_ADC_ConfigChannel+0x4f4>)
 80007ba:	42a1      	cmp	r1, r4
 80007bc:	bf18      	it	ne
 80007be:	4281      	cmpne	r1, r0
 80007c0:	bf0c      	ite	eq
 80007c2:	2001      	moveq	r0, #1
 80007c4:	2000      	movne	r0, #0
 80007c6:	d121      	bne.n	800080c <HAL_ADC_ConfigChannel+0x41c>
 80007c8:	4d47      	ldr	r5, [pc, #284]	; (80008e8 <HAL_ADC_ConfigChannel+0x4f8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007ca:	68ac      	ldr	r4, [r5, #8]
 80007cc:	f004 76e0 	and.w	r6, r4, #29360128	; 0x1c00000

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007d0:	b310      	cbz	r0, 8000818 <HAL_ADC_ConfigChannel+0x428>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80007d2:	4843      	ldr	r0, [pc, #268]	; (80008e0 <HAL_ADC_ConfigChannel+0x4f0>)
 80007d4:	6880      	ldr	r0, [r0, #8]
 80007d6:	f010 0f01 	tst.w	r0, #1
 80007da:	d019      	beq.n	8000810 <HAL_ADC_ConfigChannel+0x420>
 80007dc:	2001      	movs	r0, #1
 80007de:	4f41      	ldr	r7, [pc, #260]	; (80008e4 <HAL_ADC_ConfigChannel+0x4f4>)
 80007e0:	68bf      	ldr	r7, [r7, #8]
 80007e2:	f017 0f01 	tst.w	r7, #1
 80007e6:	d015      	beq.n	8000814 <HAL_ADC_ConfigChannel+0x424>
 80007e8:	2701      	movs	r7, #1
 80007ea:	4338      	orrs	r0, r7
 80007ec:	bf0c      	ite	eq
 80007ee:	2001      	moveq	r0, #1
 80007f0:	2000      	movne	r0, #0
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d05d      	beq.n	80008b2 <HAL_ADC_ConfigChannel+0x4c2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80007f6:	483d      	ldr	r0, [pc, #244]	; (80008ec <HAL_ADC_ConfigChannel+0x4fc>)
 80007f8:	4282      	cmp	r2, r0
 80007fa:	d018      	beq.n	800082e <HAL_ADC_ConfigChannel+0x43e>
              {
                wait_loop_index--;
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80007fc:	483c      	ldr	r0, [pc, #240]	; (80008f0 <HAL_ADC_ConfigChannel+0x500>)
 80007fe:	4282      	cmp	r2, r0
 8000800:	d035      	beq.n	800086e <HAL_ADC_ConfigChannel+0x47e>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000802:	483c      	ldr	r0, [pc, #240]	; (80008f4 <HAL_ADC_ConfigChannel+0x504>)
 8000804:	4282      	cmp	r2, r0
 8000806:	d043      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x4a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000808:	2000      	movs	r0, #0
 800080a:	e05d      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800080c:	4d3a      	ldr	r5, [pc, #232]	; (80008f8 <HAL_ADC_ConfigChannel+0x508>)
 800080e:	e7dc      	b.n	80007ca <HAL_ADC_ConfigChannel+0x3da>
 8000810:	2000      	movs	r0, #0
 8000812:	e7e4      	b.n	80007de <HAL_ADC_ConfigChannel+0x3ee>
 8000814:	2700      	movs	r7, #0
 8000816:	e7e8      	b.n	80007ea <HAL_ADC_ConfigChannel+0x3fa>
 8000818:	4838      	ldr	r0, [pc, #224]	; (80008fc <HAL_ADC_ConfigChannel+0x50c>)
 800081a:	6880      	ldr	r0, [r0, #8]
 800081c:	f010 0f01 	tst.w	r0, #1
 8000820:	d003      	beq.n	800082a <HAL_ADC_ConfigChannel+0x43a>
 8000822:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000824:	f080 0001 	eor.w	r0, r0, #1
 8000828:	e7e3      	b.n	80007f2 <HAL_ADC_ConfigChannel+0x402>
 800082a:	2000      	movs	r0, #0
 800082c:	e7fa      	b.n	8000824 <HAL_ADC_ConfigChannel+0x434>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800082e:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8000832:	d1e3      	bne.n	80007fc <HAL_ADC_ConfigChannel+0x40c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000834:	4a31      	ldr	r2, [pc, #196]	; (80008fc <HAL_ADC_ConfigChannel+0x50c>)
 8000836:	4291      	cmp	r1, r2
 8000838:	d001      	beq.n	800083e <HAL_ADC_ConfigChannel+0x44e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800083a:	2000      	movs	r0, #0
 800083c:	e044      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800083e:	f446 0200 	orr.w	r2, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000842:	68a9      	ldr	r1, [r5, #8]
 8000844:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000848:	430a      	orrs	r2, r1
 800084a:	60aa      	str	r2, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800084c:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <HAL_ADC_ConfigChannel+0x510>)
 800084e:	6812      	ldr	r2, [r2, #0]
 8000850:	492c      	ldr	r1, [pc, #176]	; (8000904 <HAL_ADC_ConfigChannel+0x514>)
 8000852:	fbb2 f2f1 	udiv	r2, r2, r1
 8000856:	3201      	adds	r2, #1
 8000858:	0052      	lsls	r2, r2, #1
 800085a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800085c:	e002      	b.n	8000864 <HAL_ADC_ConfigChannel+0x474>
                wait_loop_index--;
 800085e:	9a01      	ldr	r2, [sp, #4]
 8000860:	3a01      	subs	r2, #1
 8000862:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8000864:	9a01      	ldr	r2, [sp, #4]
 8000866:	2a00      	cmp	r2, #0
 8000868:	d1f9      	bne.n	800085e <HAL_ADC_ConfigChannel+0x46e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800086a:	2000      	movs	r0, #0
 800086c:	e02c      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800086e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8000872:	d1c6      	bne.n	8000802 <HAL_ADC_ConfigChannel+0x412>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <HAL_ADC_ConfigChannel+0x50c>)
 8000876:	4291      	cmp	r1, r2
 8000878:	d001      	beq.n	800087e <HAL_ADC_ConfigChannel+0x48e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800087a:	2000      	movs	r0, #0
 800087c:	e024      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800087e:	f046 7280 	orr.w	r2, r6, #16777216	; 0x1000000
 8000882:	68a9      	ldr	r1, [r5, #8]
 8000884:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8000888:	430a      	orrs	r2, r1
 800088a:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800088c:	2000      	movs	r0, #0
 800088e:	e01b      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000890:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8000894:	d11f      	bne.n	80008d6 <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <HAL_ADC_ConfigChannel+0x50c>)
 8000898:	4291      	cmp	r1, r2
 800089a:	d001      	beq.n	80008a0 <HAL_ADC_ConfigChannel+0x4b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800089c:	2000      	movs	r0, #0
 800089e:	e013      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80008a0:	f446 0280 	orr.w	r2, r6, #4194304	; 0x400000
 80008a4:	68a9      	ldr	r1, [r5, #8]
 80008a6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80008aa:	430a      	orrs	r2, r1
 80008ac:	60aa      	str	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ae:	2000      	movs	r0, #0
 80008b0:	e00a      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80008b4:	f042 0220 	orr.w	r2, r2, #32
 80008b8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80008ba:	2001      	movs	r0, #1
 80008bc:	e004      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80008c0:	f042 0220 	orr.w	r2, r2, #32
 80008c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80008c6:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80008ce:	b003      	add	sp, #12
 80008d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d2:	2000      	movs	r0, #0
 80008d4:	e7f8      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
 80008d6:	2000      	movs	r0, #0
 80008d8:	e7f6      	b.n	80008c8 <HAL_ADC_ConfigChannel+0x4d8>
  __HAL_LOCK(hadc);
 80008da:	2002      	movs	r0, #2
 80008dc:	e7f7      	b.n	80008ce <HAL_ADC_ConfigChannel+0x4de>
 80008de:	bf00      	nop
 80008e0:	40022000 	.word	0x40022000
 80008e4:	40022100 	.word	0x40022100
 80008e8:	40022300 	.word	0x40022300
 80008ec:	cb840000 	.word	0xcb840000
 80008f0:	c7520000 	.word	0xc7520000
 80008f4:	cfb80000 	.word	0xcfb80000
 80008f8:	58026300 	.word	0x58026300
 80008fc:	58026000 	.word	0x58026000
 8000900:	24000014 	.word	0x24000014
 8000904:	00030d40 	.word	0x00030d40

08000908 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8000908:	b538      	push	{r3, r4, r5, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800090a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	f012 0f01 	tst.w	r2, #1
 8000912:	d010      	beq.n	8000936 <ADC_Enable+0x2e>
 8000914:	2201      	movs	r2, #1
 8000916:	2a00      	cmp	r2, #0
 8000918:	d15c      	bne.n	80009d4 <ADC_Enable+0xcc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800091a:	6899      	ldr	r1, [r3, #8]
 800091c:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <ADC_Enable+0xd0>)
 800091e:	4211      	tst	r1, r2
 8000920:	d00b      	beq.n	800093a <ADC_Enable+0x32>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000922:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6543      	str	r3, [r0, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800092a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6583      	str	r3, [r0, #88]	; 0x58

      return HAL_ERROR;
 8000932:	2001      	movs	r0, #1
 8000934:	bd38      	pop	{r3, r4, r5, pc}
 8000936:	2200      	movs	r2, #0
 8000938:	e7ed      	b.n	8000916 <ADC_Enable+0xe>
 800093a:	4604      	mov	r4, r0
  MODIFY_REG(ADCx->CR,
 800093c:	6899      	ldr	r1, [r3, #8]
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <ADC_Enable+0xd4>)
 8000940:	400a      	ands	r2, r1
 8000942:	f042 0201 	orr.w	r2, r2, #1
 8000946:	609a      	str	r2, [r3, #8]

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8000948:	f7ff fd28 	bl	800039c <HAL_GetTick>
 800094c:	4605      	mov	r5, r0

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <ADC_Enable+0xd8>)
 8000952:	4924      	ldr	r1, [pc, #144]	; (80009e4 <ADC_Enable+0xdc>)
 8000954:	4293      	cmp	r3, r2
 8000956:	bf18      	it	ne
 8000958:	428b      	cmpne	r3, r1
 800095a:	d130      	bne.n	80009be <ADC_Enable+0xb6>
 800095c:	f502 7200 	add.w	r2, r2, #512	; 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000960:	6892      	ldr	r2, [r2, #8]
 8000962:	f002 021f 	and.w	r2, r2, #31
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000966:	491e      	ldr	r1, [pc, #120]	; (80009e0 <ADC_Enable+0xd8>)
 8000968:	428b      	cmp	r3, r1
 800096a:	d02a      	beq.n	80009c2 <ADC_Enable+0xba>
 800096c:	4619      	mov	r1, r3
 800096e:	4299      	cmp	r1, r3
 8000970:	d000      	beq.n	8000974 <ADC_Enable+0x6c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000972:	bb4a      	cbnz	r2, 80009c8 <ADC_Enable+0xc0>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	f012 0f01 	tst.w	r2, #1
 800097c:	d128      	bne.n	80009d0 <ADC_Enable+0xc8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	f012 0f01 	tst.w	r2, #1
 8000984:	d022      	beq.n	80009cc <ADC_Enable+0xc4>
 8000986:	2201      	movs	r2, #1
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000988:	b92a      	cbnz	r2, 8000996 <ADC_Enable+0x8e>
  MODIFY_REG(ADCx->CR,
 800098a:	6899      	ldr	r1, [r3, #8]
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <ADC_Enable+0xd4>)
 800098e:	400a      	ands	r2, r1
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	609a      	str	r2, [r3, #8]
        {
          LL_ADC_Enable(hadc->Instance);
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000996:	f7ff fd01 	bl	800039c <HAL_GetTick>
 800099a:	1b40      	subs	r0, r0, r5
 800099c:	2802      	cmp	r0, #2
 800099e:	d9e9      	bls.n	8000974 <ADC_Enable+0x6c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f013 0f01 	tst.w	r3, #1
 80009a8:	d1e4      	bne.n	8000974 <ADC_Enable+0x6c>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6563      	str	r3, [r4, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	65a3      	str	r3, [r4, #88]	; 0x58

            return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
 80009bc:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <ADC_Enable+0xe0>)
 80009c0:	e7ce      	b.n	8000960 <ADC_Enable+0x58>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80009c2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80009c6:	e7d2      	b.n	800096e <ADC_Enable+0x66>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80009c8:	2000      	movs	r0, #0
 80009ca:	bd38      	pop	{r3, r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009cc:	2200      	movs	r2, #0
 80009ce:	e7db      	b.n	8000988 <ADC_Enable+0x80>
 80009d0:	2000      	movs	r0, #0
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
 80009d4:	2000      	movs	r0, #0
}
 80009d6:	bd38      	pop	{r3, r4, r5, pc}
 80009d8:	8000003f 	.word	0x8000003f
 80009dc:	7fffffc0 	.word	0x7fffffc0
 80009e0:	40022100 	.word	0x40022100
 80009e4:	40022000 	.word	0x40022000
 80009e8:	58026300 	.word	0x58026300

080009ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80009ec:	b538      	push	{r3, r4, r5, lr}
 80009ee:	4605      	mov	r5, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80009f0:	6803      	ldr	r3, [r0, #0]
 80009f2:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <ADC_ConfigureBoostMode+0x144>)
 80009f4:	494f      	ldr	r1, [pc, #316]	; (8000b34 <ADC_ConfigureBoostMode+0x148>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	bf18      	it	ne
 80009fa:	428b      	cmpne	r3, r1
 80009fc:	d123      	bne.n	8000a46 <ADC_ConfigureBoostMode+0x5a>
 80009fe:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <ADC_ConfigureBoostMode+0x14c>)
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b34b      	cbz	r3, 8000a62 <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8000a0e:	f001 fa75 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8000a12:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8000a14:	686b      	ldr	r3, [r5, #4]
 8000a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a1a:	d01c      	beq.n	8000a56 <ADC_ConfigureBoostMode+0x6a>
 8000a1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000a20:	d01d      	beq.n	8000a5e <ADC_ConfigureBoostMode+0x72>
 8000a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a26:	d016      	beq.n	8000a56 <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000a28:	f7ff fcd2 	bl	80003d0 <HAL_GetREVID>
 8000a2c:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a30:	4298      	cmp	r0, r3
 8000a32:	d856      	bhi.n	8000ae2 <ADC_ConfigureBoostMode+0xf6>
  {
    if (freq > 20000000UL)
 8000a34:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <ADC_ConfigureBoostMode+0x150>)
 8000a36:	429c      	cmp	r4, r3
 8000a38:	d94d      	bls.n	8000ad6 <ADC_ConfigureBoostMode+0xea>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000a3a:	682a      	ldr	r2, [r5, #0]
 8000a3c:	6893      	ldr	r3, [r2, #8]
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6093      	str	r3, [r2, #8]
 8000a44:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <ADC_ConfigureBoostMode+0x154>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	e7da      	b.n	8000a0c <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000a56:	0c1b      	lsrs	r3, r3, #16
 8000a58:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000a5c:	e7e4      	b.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8000a5e:	0884      	lsrs	r4, r0, #2
        break;
 8000a60:	e7e2      	b.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000a62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a66:	f002 fb0f 	bl	8003088 <HAL_RCCEx_GetPeriphCLKFreq>
 8000a6a:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8000a6c:	686b      	ldr	r3, [r5, #4]
 8000a6e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8000a72:	d016      	beq.n	8000aa2 <ADC_ConfigureBoostMode+0xb6>
 8000a74:	d90b      	bls.n	8000a8e <ADC_ConfigureBoostMode+0xa2>
 8000a76:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8000a7a:	d028      	beq.n	8000ace <ADC_ConfigureBoostMode+0xe2>
 8000a7c:	d81d      	bhi.n	8000aba <ADC_ConfigureBoostMode+0xce>
 8000a7e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000a82:	d022      	beq.n	8000aca <ADC_ConfigureBoostMode+0xde>
 8000a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000a88:	d1ce      	bne.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8000a8a:	0944      	lsrs	r4, r0, #5
        break;
 8000a8c:	e7cc      	b.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8000a8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000a92:	d006      	beq.n	8000aa2 <ADC_ConfigureBoostMode+0xb6>
 8000a94:	d80a      	bhi.n	8000aac <ADC_ConfigureBoostMode+0xc0>
 8000a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000a9a:	d002      	beq.n	8000aa2 <ADC_ConfigureBoostMode+0xb6>
 8000a9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000aa0:	d1c2      	bne.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8000aa2:	0c9b      	lsrs	r3, r3, #18
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8000aaa:	e7bd      	b.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8000aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ab0:	d0f7      	beq.n	8000aa2 <ADC_ConfigureBoostMode+0xb6>
 8000ab2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8000ab6:	d1b7      	bne.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
 8000ab8:	e7f3      	b.n	8000aa2 <ADC_ConfigureBoostMode+0xb6>
 8000aba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000abe:	d008      	beq.n	8000ad2 <ADC_ConfigureBoostMode+0xe6>
 8000ac0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8000ac4:	d1b0      	bne.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8000ac6:	0a04      	lsrs	r4, r0, #8
        break;
 8000ac8:	e7ae      	b.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8000aca:	0904      	lsrs	r4, r0, #4
        break;
 8000acc:	e7ac      	b.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8000ace:	0984      	lsrs	r4, r0, #6
        break;
 8000ad0:	e7aa      	b.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8000ad2:	09c4      	lsrs	r4, r0, #7
        break;
 8000ad4:	e7a8      	b.n	8000a28 <ADC_ConfigureBoostMode+0x3c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8000ad6:	682a      	ldr	r2, [r5, #0]
 8000ad8:	6893      	ldr	r3, [r2, #8]
 8000ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ade:	6093      	str	r3, [r2, #8]
 8000ae0:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else /* STM32H7 silicon Rev.V */
  {
    freq /= 2U; /* divider by 2 for Rev.V */
 8000ae2:	0864      	lsrs	r4, r4, #1

    if (freq <= 6250000UL)
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <ADC_ConfigureBoostMode+0x158>)
 8000ae6:	429c      	cmp	r4, r3
 8000ae8:	d90b      	bls.n	8000b02 <ADC_ConfigureBoostMode+0x116>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <ADC_ConfigureBoostMode+0x15c>)
 8000aec:	429c      	cmp	r4, r3
 8000aee:	d90e      	bls.n	8000b0e <ADC_ConfigureBoostMode+0x122>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
    }
    else if (freq <= 25000000UL)
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <ADC_ConfigureBoostMode+0x160>)
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d913      	bls.n	8000b1e <ADC_ConfigureBoostMode+0x132>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000af6:	682a      	ldr	r2, [r5, #0]
 8000af8:	6893      	ldr	r3, [r2, #8]
 8000afa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000afe:	6093      	str	r3, [r2, #8]
 8000b00:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8000b02:	682a      	ldr	r2, [r5, #0]
 8000b04:	6893      	ldr	r3, [r2, #8]
 8000b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b0a:	6093      	str	r3, [r2, #8]
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000b0e:	682a      	ldr	r2, [r5, #0]
 8000b10:	6893      	ldr	r3, [r2, #8]
 8000b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1a:	6093      	str	r3, [r2, #8]
 8000b1c:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000b1e:	682a      	ldr	r2, [r5, #0]
 8000b20:	6893      	ldr	r3, [r2, #8]
 8000b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6093      	str	r3, [r2, #8]
 8000b2c:	bd38      	pop	{r3, r4, r5, pc}
 8000b2e:	bf00      	nop
 8000b30:	40022100 	.word	0x40022100
 8000b34:	40022000 	.word	0x40022000
 8000b38:	40022300 	.word	0x40022300
 8000b3c:	01312d00 	.word	0x01312d00
 8000b40:	58026300 	.word	0x58026300
 8000b44:	005f5e10 	.word	0x005f5e10
 8000b48:	00bebc20 	.word	0x00bebc20
 8000b4c:	017d7840 	.word	0x017d7840

08000b50 <HAL_ADC_Init>:
{
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	f000 8135 	beq.w	8000dc8 <HAL_ADC_Init+0x278>
 8000b5e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b60:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000b62:	b30b      	cbz	r3, 8000ba8 <HAL_ADC_Init+0x58>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b64:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000b6c:	d023      	beq.n	8000bb6 <HAL_ADC_Init+0x66>
 8000b6e:	2201      	movs	r2, #1
 8000b70:	b11a      	cbz	r2, 8000b7a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b72:	6899      	ldr	r1, [r3, #8]
 8000b74:	4a95      	ldr	r2, [pc, #596]	; (8000dcc <HAL_ADC_Init+0x27c>)
 8000b76:	400a      	ands	r2, r1
 8000b78:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b7a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000b82:	d01a      	beq.n	8000bba <HAL_ADC_Init+0x6a>
 8000b84:	2201      	movs	r2, #1
 8000b86:	bb02      	cbnz	r2, 8000bca <HAL_ADC_Init+0x7a>
  MODIFY_REG(ADCx->CR,
 8000b88:	6899      	ldr	r1, [r3, #8]
 8000b8a:	4a91      	ldr	r2, [pc, #580]	; (8000dd0 <HAL_ADC_Init+0x280>)
 8000b8c:	400a      	ands	r2, r1
 8000b8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b92:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b94:	4b8f      	ldr	r3, [pc, #572]	; (8000dd4 <HAL_ADC_Init+0x284>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	099b      	lsrs	r3, r3, #6
 8000b9a:	4a8f      	ldr	r2, [pc, #572]	; (8000dd8 <HAL_ADC_Init+0x288>)
 8000b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba0:	099b      	lsrs	r3, r3, #6
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000ba6:	e00d      	b.n	8000bc4 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8000ba8:	f003 fc04 	bl	80043b4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000bac:	2300      	movs	r3, #0
 8000bae:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000bb0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000bb4:	e7d6      	b.n	8000b64 <HAL_ADC_Init+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	e7da      	b.n	8000b70 <HAL_ADC_Init+0x20>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	e7e3      	b.n	8000b86 <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8000bbe:	9b01      	ldr	r3, [sp, #4]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000bc4:	9b01      	ldr	r3, [sp, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f9      	bne.n	8000bbe <HAL_ADC_Init+0x6e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000bd2:	f000 80a9 	beq.w	8000d28 <HAL_ADC_Init+0x1d8>
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 80a7 	bne.w	8000d2c <HAL_ADC_Init+0x1dc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bde:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000be0:	f042 0210 	orr.w	r2, r2, #16
 8000be4:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000be8:	f042 0201 	orr.w	r2, r2, #1
 8000bec:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000bee:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	f012 0f04 	tst.w	r2, #4
 8000bf6:	f000 809b 	beq.w	8000d30 <HAL_ADC_Init+0x1e0>
 8000bfa:	2101      	movs	r1, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bfc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000bfe:	f012 0f10 	tst.w	r2, #16
 8000c02:	f040 80d9 	bne.w	8000db8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c06:	2900      	cmp	r1, #0
 8000c08:	f040 80d6 	bne.w	8000db8 <HAL_ADC_Init+0x268>
    ADC_STATE_CLR_SET(hadc->State,
 8000c0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c0e:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000c12:	f042 0202 	orr.w	r2, r2, #2
 8000c16:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	f012 0f01 	tst.w	r2, #1
 8000c1e:	f000 8089 	beq.w	8000d34 <HAL_ADC_Init+0x1e4>
 8000c22:	2201      	movs	r2, #1
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c24:	bb12      	cbnz	r2, 8000c6c <HAL_ADC_Init+0x11c>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c26:	496d      	ldr	r1, [pc, #436]	; (8000ddc <HAL_ADC_Init+0x28c>)
 8000c28:	4a6d      	ldr	r2, [pc, #436]	; (8000de0 <HAL_ADC_Init+0x290>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	bf18      	it	ne
 8000c2e:	428b      	cmpne	r3, r1
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	f040 8083 	bne.w	8000d40 <HAL_ADC_Init+0x1f0>
 8000c3a:	688a      	ldr	r2, [r1, #8]
 8000c3c:	f012 0f01 	tst.w	r2, #1
 8000c40:	d07a      	beq.n	8000d38 <HAL_ADC_Init+0x1e8>
 8000c42:	2101      	movs	r1, #1
 8000c44:	4a66      	ldr	r2, [pc, #408]	; (8000de0 <HAL_ADC_Init+0x290>)
 8000c46:	6892      	ldr	r2, [r2, #8]
 8000c48:	f012 0f01 	tst.w	r2, #1
 8000c4c:	d076      	beq.n	8000d3c <HAL_ADC_Init+0x1ec>
 8000c4e:	2201      	movs	r2, #1
 8000c50:	430a      	orrs	r2, r1
 8000c52:	bf0c      	ite	eq
 8000c54:	2201      	moveq	r2, #1
 8000c56:	2200      	movne	r2, #0
 8000c58:	b142      	cbz	r2, 8000c6c <HAL_ADC_Init+0x11c>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d07b      	beq.n	8000d56 <HAL_ADC_Init+0x206>
 8000c5e:	4961      	ldr	r1, [pc, #388]	; (8000de4 <HAL_ADC_Init+0x294>)
 8000c60:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c62:	688a      	ldr	r2, [r1, #8]
 8000c64:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000c6c:	f7ff fbb0 	bl	80003d0 <HAL_GetREVID>
 8000c70:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c74:	4298      	cmp	r0, r3
 8000c76:	d902      	bls.n	8000c7e <HAL_ADC_Init+0x12e>
 8000c78:	68a3      	ldr	r3, [r4, #8]
 8000c7a:	2b10      	cmp	r3, #16
 8000c7c:	d06d      	beq.n	8000d5a <HAL_ADC_Init+0x20a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c7e:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8000c80:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c82:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8000c86:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8000c88:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c8a:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c90:	7f22      	ldrb	r2, [r4, #28]
 8000c92:	2a01      	cmp	r2, #1
 8000c94:	d06c      	beq.n	8000d70 <HAL_ADC_Init+0x220>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c98:	b122      	cbz	r2, 8000ca4 <HAL_ADC_Init+0x154>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c9a:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000c9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ca0:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ca2:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ca4:	6821      	ldr	r1, [r4, #0]
 8000ca6:	68c8      	ldr	r0, [r1, #12]
 8000ca8:	4a4f      	ldr	r2, [pc, #316]	; (8000de8 <HAL_ADC_Init+0x298>)
 8000caa:	4002      	ands	r2, r0
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cb0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	f012 0f04 	tst.w	r2, #4
 8000cb8:	d05f      	beq.n	8000d7a <HAL_ADC_Init+0x22a>
 8000cba:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	f012 0f08 	tst.w	r2, #8
 8000cc2:	d05c      	beq.n	8000d7e <HAL_ADC_Init+0x22e>
 8000cc4:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000cc6:	f081 0101 	eor.w	r1, r1, #1
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000cca:	f082 0201 	eor.w	r2, r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000cce:	4211      	tst	r1, r2
 8000cd0:	d01b      	beq.n	8000d0a <HAL_ADC_Init+0x1ba>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cd2:	7d21      	ldrb	r1, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000cd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      tmpCFGR = (
 8000cd6:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000cda:	68d8      	ldr	r0, [r3, #12]
 8000cdc:	4943      	ldr	r1, [pc, #268]	; (8000dec <HAL_ADC_Init+0x29c>)
 8000cde:	4001      	ands	r1, r0
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000ce4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d04a      	beq.n	8000d82 <HAL_ADC_Init+0x232>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000cec:	6822      	ldr	r2, [r4, #0]
 8000cee:	6913      	ldr	r3, [r2, #16]
 8000cf0:	f023 0301 	bic.w	r3, r3, #1
 8000cf4:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000cf6:	6822      	ldr	r2, [r4, #0]
 8000cf8:	6913      	ldr	r3, [r2, #16]
 8000cfa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000cfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d00:	430b      	orrs	r3, r1
 8000d02:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8000d04:	4620      	mov	r0, r4
 8000d06:	f7ff fe71 	bl	80009ec <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d0a:	68e3      	ldr	r3, [r4, #12]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d04a      	beq.n	8000da6 <HAL_ADC_Init+0x256>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d10:	6822      	ldr	r2, [r4, #0]
 8000d12:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d14:	f023 030f 	bic.w	r3, r3, #15
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d1c:	f023 0303 	bic.w	r3, r3, #3
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6563      	str	r3, [r4, #84]	; 0x54
 8000d26:	e04c      	b.n	8000dc2 <HAL_ADC_Init+0x272>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e755      	b.n	8000bd8 <HAL_ADC_Init+0x88>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	e75f      	b.n	8000bf0 <HAL_ADC_Init+0xa0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d30:	2100      	movs	r1, #0
 8000d32:	e763      	b.n	8000bfc <HAL_ADC_Init+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d34:	2200      	movs	r2, #0
 8000d36:	e775      	b.n	8000c24 <HAL_ADC_Init+0xd4>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e783      	b.n	8000c44 <HAL_ADC_Init+0xf4>
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	e787      	b.n	8000c50 <HAL_ADC_Init+0x100>
 8000d40:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <HAL_ADC_Init+0x2a0>)
 8000d42:	6892      	ldr	r2, [r2, #8]
 8000d44:	f012 0f01 	tst.w	r2, #1
 8000d48:	d003      	beq.n	8000d52 <HAL_ADC_Init+0x202>
 8000d4a:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d4c:	f082 0201 	eor.w	r2, r2, #1
 8000d50:	e782      	b.n	8000c58 <HAL_ADC_Init+0x108>
 8000d52:	2200      	movs	r2, #0
 8000d54:	e7fa      	b.n	8000d4c <HAL_ADC_Init+0x1fc>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d56:	4927      	ldr	r1, [pc, #156]	; (8000df4 <HAL_ADC_Init+0x2a4>)
 8000d58:	e782      	b.n	8000c60 <HAL_ADC_Init+0x110>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d5a:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8000d5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d5e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8000d62:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d64:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d6a:	f043 030c 	orr.w	r3, r3, #12
 8000d6e:	e78f      	b.n	8000c90 <HAL_ADC_Init+0x140>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000d70:	6a22      	ldr	r2, [r4, #32]
 8000d72:	3a01      	subs	r2, #1
 8000d74:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000d78:	e78d      	b.n	8000c96 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e79e      	b.n	8000cbc <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	e7a1      	b.n	8000cc6 <HAL_ADC_Init+0x176>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d82:	6820      	ldr	r0, [r4, #0]
 8000d84:	6902      	ldr	r2, [r0, #16]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_ADC_Init+0x2a8>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000d8c:	1e51      	subs	r1, r2, #1
 8000d8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000d96:	430a      	orrs	r2, r1
 8000d98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6103      	str	r3, [r0, #16]
 8000da4:	e7a7      	b.n	8000cf6 <HAL_ADC_Init+0x1a6>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000da6:	6821      	ldr	r1, [r4, #0]
 8000da8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000daa:	f023 030f 	bic.w	r3, r3, #15
 8000dae:	69a2      	ldr	r2, [r4, #24]
 8000db0:	3a01      	subs	r2, #1
 8000db2:	4313      	orrs	r3, r2
 8000db4:	630b      	str	r3, [r1, #48]	; 0x30
 8000db6:	e7b0      	b.n	8000d1a <HAL_ADC_Init+0x1ca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000db8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000dc0:	2501      	movs	r5, #1
}
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000dc8:	2501      	movs	r5, #1
 8000dca:	e7fa      	b.n	8000dc2 <HAL_ADC_Init+0x272>
 8000dcc:	5fffffc0 	.word	0x5fffffc0
 8000dd0:	6fffffc0 	.word	0x6fffffc0
 8000dd4:	24000014 	.word	0x24000014
 8000dd8:	053e2d63 	.word	0x053e2d63
 8000ddc:	40022000 	.word	0x40022000
 8000de0:	40022100 	.word	0x40022100
 8000de4:	40022300 	.word	0x40022300
 8000de8:	fff0c003 	.word	0xfff0c003
 8000dec:	ffffbffc 	.word	0xffffbffc
 8000df0:	58026000 	.word	0x58026000
 8000df4:	58026300 	.word	0x58026300
 8000df8:	fc00f81e 	.word	0xfc00f81e

08000dfc <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfc:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8000e00:	2a01      	cmp	r2, #1
 8000e02:	f000 80b3 	beq.w	8000f6c <HAL_ADCEx_MultiModeConfigChannel+0x170>
{
 8000e06:	b430      	push	{r4, r5}
 8000e08:	b09a      	sub	sp, #104	; 0x68
 8000e0a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8000e12:	2200      	movs	r2, #0
 8000e14:	9216      	str	r2, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8000e16:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000e18:	6802      	ldr	r2, [r0, #0]
 8000e1a:	4855      	ldr	r0, [pc, #340]	; (8000f70 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	d047      	beq.n	8000eb0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8000e20:	2000      	movs	r0, #0
 8000e22:	9001      	str	r0, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8000e24:	9801      	ldr	r0, [sp, #4]
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d046      	beq.n	8000eb8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e2a:	6880      	ldr	r0, [r0, #8]
 8000e2c:	f010 0f04 	tst.w	r0, #4
 8000e30:	d04b      	beq.n	8000eca <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8000e32:	2401      	movs	r4, #1
 8000e34:	6890      	ldr	r0, [r2, #8]
 8000e36:	f010 0f04 	tst.w	r0, #4
 8000e3a:	d048      	beq.n	8000ece <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8000e3c:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	f040 8085 	bne.w	8000f4e <HAL_ADCEx_MultiModeConfigChannel+0x152>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	f040 8082 	bne.w	8000f4e <HAL_ADCEx_MultiModeConfigChannel+0x152>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8000e4a:	484a      	ldr	r0, [pc, #296]	; (8000f74 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8000e4c:	4c48      	ldr	r4, [pc, #288]	; (8000f70 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8000e4e:	4282      	cmp	r2, r0
 8000e50:	bf18      	it	ne
 8000e52:	42a2      	cmpne	r2, r4
 8000e54:	d13d      	bne.n	8000ed2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8000e56:	f500 7000 	add.w	r0, r0, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000e5a:	680a      	ldr	r2, [r1, #0]
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d049      	beq.n	8000ef4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000e60:	6882      	ldr	r2, [r0, #8]
 8000e62:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000e66:	684c      	ldr	r4, [r1, #4]
 8000e68:	4322      	orrs	r2, r4
 8000e6a:	6082      	str	r2, [r0, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4c41      	ldr	r4, [pc, #260]	; (8000f74 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8000e70:	4d3f      	ldr	r5, [pc, #252]	; (8000f70 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8000e72:	42a2      	cmp	r2, r4
 8000e74:	bf18      	it	ne
 8000e76:	42aa      	cmpne	r2, r5
 8000e78:	d131      	bne.n	8000ede <HAL_ADCEx_MultiModeConfigChannel+0xe2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e7a:	68aa      	ldr	r2, [r5, #8]
 8000e7c:	f012 0f01 	tst.w	r2, #1
 8000e80:	d029      	beq.n	8000ed6 <HAL_ADCEx_MultiModeConfigChannel+0xda>
 8000e82:	2401      	movs	r4, #1
 8000e84:	4a3b      	ldr	r2, [pc, #236]	; (8000f74 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8000e86:	6892      	ldr	r2, [r2, #8]
 8000e88:	f012 0f01 	tst.w	r2, #1
 8000e8c:	d025      	beq.n	8000eda <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4322      	orrs	r2, r4
 8000e92:	bf0c      	ite	eq
 8000e94:	2201      	moveq	r2, #1
 8000e96:	2200      	movne	r2, #0
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	d063      	beq.n	8000f64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8000e9c:	6884      	ldr	r4, [r0, #8]
 8000e9e:	4a36      	ldr	r2, [pc, #216]	; (8000f78 <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8000ea0:	4022      	ands	r2, r4
 8000ea2:	680c      	ldr	r4, [r1, #0]
 8000ea4:	6889      	ldr	r1, [r1, #8]
 8000ea6:	4321      	orrs	r1, r4
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eac:	2000      	movs	r0, #0
 8000eae:	e053      	b.n	8000f58 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000eb0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000eb4:	9001      	str	r0, [sp, #4]
 8000eb6:	e7b5      	b.n	8000e24 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000eba:	f042 0220 	orr.w	r2, r2, #32
 8000ebe:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e049      	b.n	8000f5e <HAL_ADCEx_MultiModeConfigChannel+0x162>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000eca:	2400      	movs	r4, #0
 8000ecc:	e7b2      	b.n	8000e34 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8000ece:	2000      	movs	r0, #0
 8000ed0:	e7b5      	b.n	8000e3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8000ed2:	482a      	ldr	r0, [pc, #168]	; (8000f7c <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8000ed4:	e7c1      	b.n	8000e5a <HAL_ADCEx_MultiModeConfigChannel+0x5e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	e7d4      	b.n	8000e84 <HAL_ADCEx_MultiModeConfigChannel+0x88>
 8000eda:	2200      	movs	r2, #0
 8000edc:	e7d8      	b.n	8000e90 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8000ede:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000ee0:	6892      	ldr	r2, [r2, #8]
 8000ee2:	f012 0f01 	tst.w	r2, #1
 8000ee6:	d003      	beq.n	8000ef0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8000ee8:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000eea:	f082 0201 	eor.w	r2, r2, #1
 8000eee:	e7d3      	b.n	8000e98 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	e7fa      	b.n	8000eea <HAL_ADCEx_MultiModeConfigChannel+0xee>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8000ef4:	6881      	ldr	r1, [r0, #8]
 8000ef6:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8000efa:	6081      	str	r1, [r0, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000efc:	6819      	ldr	r1, [r3, #0]
 8000efe:	4c1d      	ldr	r4, [pc, #116]	; (8000f74 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8000f00:	4d1b      	ldr	r5, [pc, #108]	; (8000f70 <HAL_ADCEx_MultiModeConfigChannel+0x174>)
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	bf18      	it	ne
 8000f06:	42a9      	cmpne	r1, r5
 8000f08:	d117      	bne.n	8000f3a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8000f0a:	68a9      	ldr	r1, [r5, #8]
 8000f0c:	f011 0f01 	tst.w	r1, #1
 8000f10:	d011      	beq.n	8000f36 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8000f12:	2401      	movs	r4, #1
 8000f14:	4917      	ldr	r1, [pc, #92]	; (8000f74 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8000f16:	6889      	ldr	r1, [r1, #8]
 8000f18:	f011 0f01 	tst.w	r1, #1
 8000f1c:	d000      	beq.n	8000f20 <HAL_ADCEx_MultiModeConfigChannel+0x124>
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4322      	orrs	r2, r4
 8000f22:	bf0c      	ite	eq
 8000f24:	2201      	moveq	r2, #1
 8000f26:	2200      	movne	r2, #0
 8000f28:	b1f2      	cbz	r2, 8000f68 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000f2a:	6881      	ldr	r1, [r0, #8]
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8000f2e:	400a      	ands	r2, r1
 8000f30:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f32:	2000      	movs	r0, #0
 8000f34:	e010      	b.n	8000f58 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8000f36:	4614      	mov	r4, r2
 8000f38:	e7ec      	b.n	8000f14 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8000f3a:	4911      	ldr	r1, [pc, #68]	; (8000f80 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000f3c:	6889      	ldr	r1, [r1, #8]
 8000f3e:	f011 0f01 	tst.w	r1, #1
 8000f42:	d000      	beq.n	8000f46 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 8000f44:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f46:	fab2 f282 	clz	r2, r2
 8000f4a:	0952      	lsrs	r2, r2, #5
 8000f4c:	e7ec      	b.n	8000f28 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f50:	f042 0220 	orr.w	r2, r2, #32
 8000f54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f56:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8000f5e:	b01a      	add	sp, #104	; 0x68
 8000f60:	bc30      	pop	{r4, r5}
 8000f62:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f64:	2000      	movs	r0, #0
 8000f66:	e7f7      	b.n	8000f58 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8000f68:	2000      	movs	r0, #0
 8000f6a:	e7f5      	b.n	8000f58 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
  __HAL_LOCK(hadc);
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	4770      	bx	lr
 8000f70:	40022000 	.word	0x40022000
 8000f74:	40022100 	.word	0x40022100
 8000f78:	fffff0e0 	.word	0xfffff0e0
 8000f7c:	58026300 	.word	0x58026300
 8000f80:	58026000 	.word	0x58026000

08000f84 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000f86:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	0200      	lsls	r0, r0, #8
 8000f92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f96:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000f98:	4a02      	ldr	r2, [pc, #8]	; (8000fa4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f9a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000f9c:	60ca      	str	r2, [r1, #12]
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	05fa0000 	.word	0x05fa0000

08000fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_NVIC_SetPriority+0x54>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb2:	f1c3 0407 	rsb	r4, r3, #7
 8000fb6:	2c04      	cmp	r4, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbc:	1d1d      	adds	r5, r3, #4
 8000fbe:	2d06      	cmp	r5, #6
 8000fc0:	d913      	bls.n	8000fea <HAL_NVIC_SetPriority+0x42>
 8000fc2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	2501      	movs	r5, #1
 8000fc6:	fa05 f404 	lsl.w	r4, r5, r4
 8000fca:	3c01      	subs	r4, #1
 8000fcc:	4021      	ands	r1, r4
 8000fce:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	fa05 f303 	lsl.w	r3, r5, r3
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	db07      	blt.n	8000fee <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	0109      	lsls	r1, r1, #4
 8000fe0:	b2c9      	uxtb	r1, r1
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_NVIC_SetPriority+0x58>)
 8000fe4:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fe6:	bc30      	pop	{r4, r5}
 8000fe8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	2300      	movs	r3, #0
 8000fec:	e7ea      	b.n	8000fc4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	f000 000f 	and.w	r0, r0, #15
 8000ff2:	0109      	lsls	r1, r1, #4
 8000ff4:	b2c9      	uxtb	r1, r1
 8000ff6:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_NVIC_SetPriority+0x5c>)
 8000ff8:	5419      	strb	r1, [r3, r0]
 8000ffa:	e7f4      	b.n	8000fe6 <HAL_NVIC_SetPriority+0x3e>
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	e000e400 	.word	0xe000e400
 8001004:	e000ed14 	.word	0xe000ed14

08001008 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001008:	2800      	cmp	r0, #0
 800100a:	db08      	blt.n	800101e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100c:	0942      	lsrs	r2, r0, #5
 800100e:	f000 001f 	and.w	r0, r0, #31
 8001012:	2301      	movs	r3, #1
 8001014:	fa03 f000 	lsl.w	r0, r3, r0
 8001018:	4b01      	ldr	r3, [pc, #4]	; (8001020 <HAL_NVIC_EnableIRQ+0x18>)
 800101a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    __COMPILER_BARRIER();
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100

08001024 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	3801      	subs	r0, #1
 8001026:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800102a:	d20a      	bcs.n	8001042 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_SYSTICK_Config+0x24>)
 800102e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	21f0      	movs	r1, #240	; 0xf0
 8001032:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_SYSTICK_Config+0x28>)
 8001034:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	2000      	movs	r0, #0
 800103a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8001050:	b170      	cbz	r0, 8001070 <HAL_DAC_Init+0x20>
{
 8001052:	b510      	push	{r4, lr}
 8001054:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001056:	7903      	ldrb	r3, [r0, #4]
 8001058:	b133      	cbz	r3, 8001068 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800105a:	2302      	movs	r3, #2
 800105c:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800105e:	2000      	movs	r0, #0
 8001060:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001062:	2301      	movs	r3, #1
 8001064:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001066:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001068:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800106a:	f003 fa2f 	bl	80044cc <HAL_DAC_MspInit>
 800106e:	e7f4      	b.n	800105a <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8001070:	2001      	movs	r0, #1
 8001072:	4770      	bx	lr

08001074 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001076:	7943      	ldrb	r3, [r0, #5]
 8001078:	2b01      	cmp	r3, #1
 800107a:	f000 80a5 	beq.w	80011c8 <HAL_DAC_ConfigChannel+0x154>
 800107e:	4617      	mov	r7, r2
 8001080:	460d      	mov	r5, r1
 8001082:	4604      	mov	r4, r0
 8001084:	2301      	movs	r3, #1
 8001086:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001088:	2302      	movs	r3, #2
 800108a:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800108c:	680b      	ldr	r3, [r1, #0]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d016      	beq.n	80010c0 <HAL_DAC_ConfigChannel+0x4c>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001092:	692b      	ldr	r3, [r5, #16]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d05e      	beq.n	8001156 <HAL_DAC_ConfigChannel+0xe2>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001098:	6826      	ldr	r6, [r4, #0]
 800109a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800109c:	f007 0210 	and.w	r2, r7, #16
 80010a0:	2107      	movs	r1, #7
 80010a2:	4091      	lsls	r1, r2
 80010a4:	ea23 0301 	bic.w	r3, r3, r1
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80010a8:	68e9      	ldr	r1, [r5, #12]
 80010aa:	2901      	cmp	r1, #1
 80010ac:	d060      	beq.n	8001170 <HAL_DAC_ConfigChannel+0xfc>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80010ae:	2902      	cmp	r1, #2
 80010b0:	f000 8086 	beq.w	80011c0 <HAL_DAC_ConfigChannel+0x14c>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80010b4:	68a9      	ldr	r1, [r5, #8]
 80010b6:	2900      	cmp	r1, #0
 80010b8:	f040 8084 	bne.w	80011c4 <HAL_DAC_ConfigChannel+0x150>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80010bc:	2101      	movs	r1, #1
 80010be:	e058      	b.n	8001172 <HAL_DAC_ConfigChannel+0xfe>
    tickstart = HAL_GetTick();
 80010c0:	f7ff f96c 	bl	800039c <HAL_GetTick>
 80010c4:	4606      	mov	r6, r0
    if (Channel == DAC_CHANNEL_1)
 80010c6:	b17f      	cbz	r7, 80010e8 <HAL_DAC_ConfigChannel+0x74>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da3b      	bge.n	8001148 <HAL_DAC_ConfigChannel+0xd4>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80010d0:	f7ff f964 	bl	800039c <HAL_GetTick>
 80010d4:	1b80      	subs	r0, r0, r6
 80010d6:	2801      	cmp	r0, #1
 80010d8:	d9f6      	bls.n	80010c8 <HAL_DAC_ConfigChannel+0x54>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80010da:	6923      	ldr	r3, [r4, #16]
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
 80010e4:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <HAL_DAC_ConfigChannel+0x158>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	b15b      	cbz	r3, 800110a <HAL_DAC_ConfigChannel+0x96>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80010f2:	f7ff f953 	bl	800039c <HAL_GetTick>
 80010f6:	1b80      	subs	r0, r0, r6
 80010f8:	2801      	cmp	r0, #1
 80010fa:	d9f5      	bls.n	80010e8 <HAL_DAC_ConfigChannel+0x74>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80010fc:	6923      	ldr	r3, [r4, #16]
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001104:	2003      	movs	r0, #3
 8001106:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8001108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff f94c 	bl	80003a8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	69aa      	ldr	r2, [r5, #24]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001116:	6820      	ldr	r0, [r4, #0]
 8001118:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800111a:	f007 0210 	and.w	r2, r7, #16
 800111e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001122:	4091      	lsls	r1, r2
 8001124:	ea23 0301 	bic.w	r3, r3, r1
 8001128:	69e9      	ldr	r1, [r5, #28]
 800112a:	4091      	lsls	r1, r2
 800112c:	430b      	orrs	r3, r1
 800112e:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001130:	6820      	ldr	r0, [r4, #0]
 8001132:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001134:	21ff      	movs	r1, #255	; 0xff
 8001136:	4091      	lsls	r1, r2
 8001138:	ea23 0301 	bic.w	r3, r3, r1
 800113c:	6a29      	ldr	r1, [r5, #32]
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	4313      	orrs	r3, r2
 8001144:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001146:	e7a4      	b.n	8001092 <HAL_DAC_ConfigChannel+0x1e>
      HAL_Delay(1U);
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff f92d 	bl	80003a8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	69aa      	ldr	r2, [r5, #24]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
 8001154:	e7df      	b.n	8001116 <HAL_DAC_ConfigChannel+0xa2>
    tmpreg1 = hdac->Instance->CCR;
 8001156:	6820      	ldr	r0, [r4, #0]
 8001158:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800115a:	f007 0610 	and.w	r6, r7, #16
 800115e:	211f      	movs	r1, #31
 8001160:	40b1      	lsls	r1, r6
 8001162:	ea23 0301 	bic.w	r3, r3, r1
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001166:	696a      	ldr	r2, [r5, #20]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001168:	40b2      	lsls	r2, r6
 800116a:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 800116c:	6383      	str	r3, [r0, #56]	; 0x38
 800116e:	e793      	b.n	8001098 <HAL_DAC_ConfigChannel+0x24>
    connectOnChip = 0x00000000UL;
 8001170:	2100      	movs	r1, #0
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001172:	6828      	ldr	r0, [r5, #0]
 8001174:	68af      	ldr	r7, [r5, #8]
 8001176:	4338      	orrs	r0, r7
 8001178:	4301      	orrs	r1, r0
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800117a:	4091      	lsls	r1, r2
 800117c:	430b      	orrs	r3, r1
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800117e:	63f3      	str	r3, [r6, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001180:	6820      	ldr	r0, [r4, #0]
 8001182:	6803      	ldr	r3, [r0, #0]
 8001184:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001188:	4091      	lsls	r1, r2
 800118a:	ea23 0301 	bic.w	r3, r3, r1
 800118e:	6003      	str	r3, [r0, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	6803      	ldr	r3, [r0, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001194:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001198:	4091      	lsls	r1, r2
 800119a:	ea23 0301 	bic.w	r3, r3, r1
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800119e:	6869      	ldr	r1, [r5, #4]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011a0:	4091      	lsls	r1, r2
 80011a2:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011a4:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80011a6:	6820      	ldr	r0, [r4, #0]
 80011a8:	6803      	ldr	r3, [r0, #0]
 80011aa:	21c0      	movs	r1, #192	; 0xc0
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	ea23 0202 	bic.w	r2, r3, r2
 80011b4:	6002      	str	r2, [r0, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011b6:	2301      	movs	r3, #1
 80011b8:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011ba:	2000      	movs	r0, #0
 80011bc:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80011be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 80011c0:	2101      	movs	r1, #1
 80011c2:	e7d6      	b.n	8001172 <HAL_DAC_ConfigChannel+0xfe>
      connectOnChip = 0x00000000UL;
 80011c4:	2100      	movs	r1, #0
 80011c6:	e7d4      	b.n	8001172 <HAL_DAC_ConfigChannel+0xfe>
  __HAL_LOCK(hdac);
 80011c8:	2002      	movs	r0, #2
}
 80011ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011cc:	20008000 	.word	0x20008000

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80011d4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011d6:	e03b      	b.n	8001250 <HAL_GPIO_Init+0x80>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011d8:	2609      	movs	r6, #9
 80011da:	e000      	b.n	80011de <HAL_GPIO_Init+0xe>
 80011dc:	2600      	movs	r6, #0
 80011de:	fa06 f60e 	lsl.w	r6, r6, lr
 80011e2:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	3402      	adds	r4, #2
 80011e6:	4e71      	ldr	r6, [pc, #452]	; (80013ac <HAL_GPIO_Init+0x1dc>)
 80011e8:	f846 5024 	str.w	r5, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011ec:	4c70      	ldr	r4, [pc, #448]	; (80013b0 <HAL_GPIO_Init+0x1e0>)
 80011ee:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80011f0:	43d4      	mvns	r4, r2
 80011f2:	ea05 0604 	and.w	r6, r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f6:	684f      	ldr	r7, [r1, #4]
 80011f8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80011fc:	d001      	beq.n	8001202 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 80011fe:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001202:	4d6b      	ldr	r5, [pc, #428]	; (80013b0 <HAL_GPIO_Init+0x1e0>)
 8001204:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001206:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8001208:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120c:	684f      	ldr	r7, [r1, #4]
 800120e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001212:	d001      	beq.n	8001218 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8001214:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001218:	4e65      	ldr	r6, [pc, #404]	; (80013b0 <HAL_GPIO_Init+0x1e0>)
 800121a:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001220:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001222:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001226:	684f      	ldr	r7, [r1, #4]
 8001228:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800122c:	d001      	beq.n	8001232 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800122e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001232:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001236:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001238:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800123a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	684e      	ldr	r6, [r1, #4]
 800123e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001242:	d001      	beq.n	8001248 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8001244:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124c:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 800124e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001250:	680a      	ldr	r2, [r1, #0]
 8001252:	fa32 f403 	lsrs.w	r4, r2, r3
 8001256:	f000 80a7 	beq.w	80013a8 <HAL_GPIO_Init+0x1d8>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800125a:	2401      	movs	r4, #1
 800125c:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 800125e:	4022      	ands	r2, r4
 8001260:	d0f5      	beq.n	800124e <HAL_GPIO_Init+0x7e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001262:	684d      	ldr	r5, [r1, #4]
 8001264:	1e6e      	subs	r6, r5, #1
 8001266:	2d11      	cmp	r5, #17
 8001268:	bf18      	it	ne
 800126a:	2e01      	cmpne	r6, #1
 800126c:	d901      	bls.n	8001272 <HAL_GPIO_Init+0xa2>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	2d12      	cmp	r5, #18
 8001270:	d115      	bne.n	800129e <HAL_GPIO_Init+0xce>
        temp = GPIOx->OSPEEDR;
 8001272:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001274:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001278:	2703      	movs	r7, #3
 800127a:	fa07 f70e 	lsl.w	r7, r7, lr
 800127e:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	68ce      	ldr	r6, [r1, #12]
 8001284:	fa06 f60e 	lsl.w	r6, r6, lr
 8001288:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800128a:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800128c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128e:	ea25 0404 	bic.w	r4, r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001292:	684d      	ldr	r5, [r1, #4]
 8001294:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8001298:	409d      	lsls	r5, r3
 800129a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800129c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800129e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a0:	005f      	lsls	r7, r3, #1
 80012a2:	2403      	movs	r4, #3
 80012a4:	40bc      	lsls	r4, r7
 80012a6:	43e4      	mvns	r4, r4
 80012a8:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012aa:	688d      	ldr	r5, [r1, #8]
 80012ac:	40bd      	lsls	r5, r7
 80012ae:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 80012b0:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b2:	684d      	ldr	r5, [r1, #4]
 80012b4:	2d12      	cmp	r5, #18
 80012b6:	bf18      	it	ne
 80012b8:	2d02      	cmpne	r5, #2
 80012ba:	d114      	bne.n	80012e6 <HAL_GPIO_Init+0x116>
        temp = GPIOx->AFR[position >> 3U];
 80012bc:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80012c0:	f10c 0c08 	add.w	ip, ip, #8
 80012c4:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012c8:	f003 0e07 	and.w	lr, r3, #7
 80012cc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80012d0:	260f      	movs	r6, #15
 80012d2:	fa06 f60e 	lsl.w	r6, r6, lr
 80012d6:	ea25 0506 	bic.w	r5, r5, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012da:	690e      	ldr	r6, [r1, #16]
 80012dc:	fa06 f60e 	lsl.w	r6, r6, lr
 80012e0:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 80012e2:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
      temp = GPIOx->MODER;
 80012e6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012e8:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ea:	684d      	ldr	r5, [r1, #4]
 80012ec:	f005 0503 	and.w	r5, r5, #3
 80012f0:	40bd      	lsls	r5, r7
 80012f2:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80012f4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f6:	684c      	ldr	r4, [r1, #4]
 80012f8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80012fc:	d0a7      	beq.n	800124e <HAL_GPIO_Init+0x7e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4c2d      	ldr	r4, [pc, #180]	; (80013b4 <HAL_GPIO_Init+0x1e4>)
 8001300:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8001304:	f045 0502 	orr.w	r5, r5, #2
 8001308:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800130c:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8001310:	f004 0402 	and.w	r4, r4, #2
 8001314:	9401      	str	r4, [sp, #4]
 8001316:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001318:	089c      	lsrs	r4, r3, #2
 800131a:	1ca6      	adds	r6, r4, #2
 800131c:	4d23      	ldr	r5, [pc, #140]	; (80013ac <HAL_GPIO_Init+0x1dc>)
 800131e:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001322:	f003 0603 	and.w	r6, r3, #3
 8001326:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800132a:	260f      	movs	r6, #15
 800132c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001330:	ea25 0506 	bic.w	r5, r5, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001334:	4f20      	ldr	r7, [pc, #128]	; (80013b8 <HAL_GPIO_Init+0x1e8>)
 8001336:	42b8      	cmp	r0, r7
 8001338:	f43f af50 	beq.w	80011dc <HAL_GPIO_Init+0xc>
 800133c:	4e1f      	ldr	r6, [pc, #124]	; (80013bc <HAL_GPIO_Init+0x1ec>)
 800133e:	42b0      	cmp	r0, r6
 8001340:	d022      	beq.n	8001388 <HAL_GPIO_Init+0x1b8>
 8001342:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001346:	42b0      	cmp	r0, r6
 8001348:	d020      	beq.n	800138c <HAL_GPIO_Init+0x1bc>
 800134a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800134e:	42b0      	cmp	r0, r6
 8001350:	d01e      	beq.n	8001390 <HAL_GPIO_Init+0x1c0>
 8001352:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001356:	42b0      	cmp	r0, r6
 8001358:	d01c      	beq.n	8001394 <HAL_GPIO_Init+0x1c4>
 800135a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800135e:	42b0      	cmp	r0, r6
 8001360:	d01a      	beq.n	8001398 <HAL_GPIO_Init+0x1c8>
 8001362:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001366:	42b0      	cmp	r0, r6
 8001368:	d018      	beq.n	800139c <HAL_GPIO_Init+0x1cc>
 800136a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800136e:	42b0      	cmp	r0, r6
 8001370:	d016      	beq.n	80013a0 <HAL_GPIO_Init+0x1d0>
 8001372:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001376:	42b0      	cmp	r0, r6
 8001378:	d014      	beq.n	80013a4 <HAL_GPIO_Init+0x1d4>
 800137a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800137e:	42b0      	cmp	r0, r6
 8001380:	f43f af2a 	beq.w	80011d8 <HAL_GPIO_Init+0x8>
 8001384:	260a      	movs	r6, #10
 8001386:	e72a      	b.n	80011de <HAL_GPIO_Init+0xe>
 8001388:	2601      	movs	r6, #1
 800138a:	e728      	b.n	80011de <HAL_GPIO_Init+0xe>
 800138c:	2602      	movs	r6, #2
 800138e:	e726      	b.n	80011de <HAL_GPIO_Init+0xe>
 8001390:	2603      	movs	r6, #3
 8001392:	e724      	b.n	80011de <HAL_GPIO_Init+0xe>
 8001394:	2604      	movs	r6, #4
 8001396:	e722      	b.n	80011de <HAL_GPIO_Init+0xe>
 8001398:	2605      	movs	r6, #5
 800139a:	e720      	b.n	80011de <HAL_GPIO_Init+0xe>
 800139c:	2606      	movs	r6, #6
 800139e:	e71e      	b.n	80011de <HAL_GPIO_Init+0xe>
 80013a0:	2607      	movs	r6, #7
 80013a2:	e71c      	b.n	80011de <HAL_GPIO_Init+0xe>
 80013a4:	2608      	movs	r6, #8
 80013a6:	e71a      	b.n	80011de <HAL_GPIO_Init+0xe>
  }
}
 80013a8:	b003      	add	sp, #12
 80013aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ac:	58000400 	.word	0x58000400
 80013b0:	58000080 	.word	0x58000080
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020000 	.word	0x58020000
 80013bc:	58020400 	.word	0x58020400

080013c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c0:	b912      	cbnz	r2, 80013c8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013c2:	0409      	lsls	r1, r1, #16
 80013c4:	6181      	str	r1, [r0, #24]
 80013c6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80013c8:	6181      	str	r1, [r0, #24]
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013cc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ce:	ea03 0201 	and.w	r2, r3, r1
 80013d2:	ea21 0103 	bic.w	r1, r1, r3
 80013d6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80013da:	6181      	str	r1, [r0, #24]
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_PWREx_ConfigSupply+0x50>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f013 0f04 	tst.w	r3, #4
 80013e8:	d107      	bne.n	80013fa <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_PWREx_ConfigSupply+0x50>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	4283      	cmp	r3, r0
 80013f4:	d01a      	beq.n	800142c <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013f6:	2001      	movs	r0, #1
 80013f8:	4770      	bx	lr
{
 80013fa:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013fc:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <HAL_PWREx_ConfigSupply+0x50>)
 80013fe:	68d3      	ldr	r3, [r2, #12]
 8001400:	f023 0307 	bic.w	r3, r3, #7
 8001404:	4318      	orrs	r0, r3
 8001406:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001408:	f7fe ffc8 	bl	800039c <HAL_GetTick>
 800140c:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_PWREx_ConfigSupply+0x50>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001416:	d107      	bne.n	8001428 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001418:	f7fe ffc0 	bl	800039c <HAL_GetTick>
 800141c:	1b00      	subs	r0, r0, r4
 800141e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001422:	d9f4      	bls.n	800140e <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8001424:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001426:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001428:	2000      	movs	r0, #0
 800142a:	bd10      	pop	{r4, pc}
      return HAL_OK;
 800142c:	2000      	movs	r0, #0
 800142e:	4770      	bx	lr
 8001430:	58024800 	.word	0x58024800

08001434 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001434:	2800      	cmp	r0, #0
 8001436:	f000 830e 	beq.w	8001a56 <HAL_RCC_OscConfig+0x622>
{
 800143a:	b538      	push	{r3, r4, r5, lr}
 800143c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	6803      	ldr	r3, [r0, #0]
 8001440:	f013 0f01 	tst.w	r3, #1
 8001444:	d036      	beq.n	80014b4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001446:	4a9d      	ldr	r2, [pc, #628]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001448:	6913      	ldr	r3, [r2, #16]
 800144a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800144e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001450:	2b10      	cmp	r3, #16
 8001452:	d026      	beq.n	80014a2 <HAL_RCC_OscConfig+0x6e>
 8001454:	2b18      	cmp	r3, #24
 8001456:	d020      	beq.n	800149a <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001458:	6863      	ldr	r3, [r4, #4]
 800145a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145e:	d04f      	beq.n	8001500 <HAL_RCC_OscConfig+0xcc>
 8001460:	2b00      	cmp	r3, #0
 8001462:	d153      	bne.n	800150c <HAL_RCC_OscConfig+0xd8>
 8001464:	4b95      	ldr	r3, [pc, #596]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001474:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001476:	6863      	ldr	r3, [r4, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05e      	beq.n	800153a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7fe ff8e 	bl	800039c <HAL_GetTick>
 8001480:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001482:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800148a:	d113      	bne.n	80014b4 <HAL_RCC_OscConfig+0x80>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7fe ff86 	bl	800039c <HAL_GetTick>
 8001490:	1b40      	subs	r0, r0, r5
 8001492:	2864      	cmp	r0, #100	; 0x64
 8001494:	d9f5      	bls.n	8001482 <HAL_RCC_OscConfig+0x4e>
          {
            return HAL_TIMEOUT;
 8001496:	2003      	movs	r0, #3
 8001498:	bd38      	pop	{r3, r4, r5, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800149a:	f002 0203 	and.w	r2, r2, #3
 800149e:	2a02      	cmp	r2, #2
 80014a0:	d1da      	bne.n	8001458 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a2:	4b86      	ldr	r3, [pc, #536]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014aa:	d003      	beq.n	80014b4 <HAL_RCC_OscConfig+0x80>
 80014ac:	6863      	ldr	r3, [r4, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 82d3 	beq.w	8001a5a <HAL_RCC_OscConfig+0x626>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	f013 0f02 	tst.w	r3, #2
 80014ba:	d07a      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014bc:	4a7f      	ldr	r2, [pc, #508]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80014be:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014c2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80014c6:	d04a      	beq.n	800155e <HAL_RCC_OscConfig+0x12a>
 80014c8:	2b18      	cmp	r3, #24
 80014ca:	d045      	beq.n	8001558 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014cc:	68e3      	ldr	r3, [r4, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80b8 	beq.w	8001644 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014d4:	4979      	ldr	r1, [pc, #484]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80014d6:	680a      	ldr	r2, [r1, #0]
 80014d8:	f022 0219 	bic.w	r2, r2, #25
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7fe ff5c 	bl	800039c <HAL_GetTick>
 80014e4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014e6:	4b75      	ldr	r3, [pc, #468]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f013 0f04 	tst.w	r3, #4
 80014ee:	f040 8087 	bne.w	8001600 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f2:	f7fe ff53 	bl	800039c <HAL_GetTick>
 80014f6:	1b40      	subs	r0, r0, r5
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9f4      	bls.n	80014e6 <HAL_RCC_OscConfig+0xb2>
          {
            return HAL_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	4a6e      	ldr	r2, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e7b4      	b.n	8001476 <HAL_RCC_OscConfig+0x42>
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d009      	beq.n	8001526 <HAL_RCC_OscConfig+0xf2>
 8001512:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e7a7      	b.n	8001476 <HAL_RCC_OscConfig+0x42>
 8001526:	4b65      	ldr	r3, [pc, #404]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e79d      	b.n	8001476 <HAL_RCC_OscConfig+0x42>
        tickstart = HAL_GetTick();
 800153a:	f7fe ff2f 	bl	800039c <HAL_GetTick>
 800153e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001540:	4b5e      	ldr	r3, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001548:	d0b4      	beq.n	80014b4 <HAL_RCC_OscConfig+0x80>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154a:	f7fe ff27 	bl	800039c <HAL_GetTick>
 800154e:	1b40      	subs	r0, r0, r5
 8001550:	2864      	cmp	r0, #100	; 0x64
 8001552:	d9f5      	bls.n	8001540 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8001554:	2003      	movs	r0, #3
 8001556:	bd38      	pop	{r3, r4, r5, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001558:	f012 0f03 	tst.w	r2, #3
 800155c:	d1b6      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155e:	4b57      	ldr	r3, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f013 0f04 	tst.w	r3, #4
 8001566:	d003      	beq.n	8001570 <HAL_RCC_OscConfig+0x13c>
 8001568:	68e3      	ldr	r3, [r4, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8277 	beq.w	8001a5e <HAL_RCC_OscConfig+0x62a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	f7fe ff2e 	bl	80003d0 <HAL_GetREVID>
 8001574:	f241 0303 	movw	r3, #4099	; 0x1003
 8001578:	4298      	cmp	r0, r3
 800157a:	d812      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x16e>
 800157c:	6922      	ldr	r2, [r4, #16]
 800157e:	2a40      	cmp	r2, #64	; 0x40
 8001580:	d007      	beq.n	8001592 <HAL_RCC_OscConfig+0x15e>
 8001582:	494e      	ldr	r1, [pc, #312]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001584:	684b      	ldr	r3, [r1, #4]
 8001586:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800158a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800158e:	604b      	str	r3, [r1, #4]
 8001590:	e00f      	b.n	80015b2 <HAL_RCC_OscConfig+0x17e>
 8001592:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001594:	6853      	ldr	r3, [r2, #4]
 8001596:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800159a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159e:	6053      	str	r3, [r2, #4]
 80015a0:	e007      	b.n	80015b2 <HAL_RCC_OscConfig+0x17e>
 80015a2:	4a46      	ldr	r2, [pc, #280]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80015a4:	6853      	ldr	r3, [r2, #4]
 80015a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80015aa:	6921      	ldr	r1, [r4, #16]
 80015ac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80015b0:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	f013 0f10 	tst.w	r3, #16
 80015b8:	f000 808a 	beq.w	80016d0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4a3f      	ldr	r2, [pc, #252]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80015be:	6913      	ldr	r3, [r2, #16]
 80015c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d054      	beq.n	8001674 <HAL_RCC_OscConfig+0x240>
 80015ca:	2b18      	cmp	r3, #24
 80015cc:	d04e      	beq.n	800166c <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80015ce:	69e3      	ldr	r3, [r4, #28]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80ba 	beq.w	800174a <HAL_RCC_OscConfig+0x316>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015d6:	4a39      	ldr	r2, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80015d8:	6813      	ldr	r3, [r2, #0]
 80015da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7fe fedc 	bl	800039c <HAL_GetTick>
 80015e4:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015e6:	4b35      	ldr	r3, [pc, #212]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015ee:	f040 808a 	bne.w	8001706 <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015f2:	f7fe fed3 	bl	800039c <HAL_GetTick>
 80015f6:	1b40      	subs	r0, r0, r5
 80015f8:	2802      	cmp	r0, #2
 80015fa:	d9f4      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80015fc:	2003      	movs	r0, #3
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	f7fe fee6 	bl	80003d0 <HAL_GetREVID>
 8001604:	f241 0303 	movw	r3, #4099	; 0x1003
 8001608:	4298      	cmp	r0, r3
 800160a:	d812      	bhi.n	8001632 <HAL_RCC_OscConfig+0x1fe>
 800160c:	6922      	ldr	r2, [r4, #16]
 800160e:	2a40      	cmp	r2, #64	; 0x40
 8001610:	d007      	beq.n	8001622 <HAL_RCC_OscConfig+0x1ee>
 8001612:	492a      	ldr	r1, [pc, #168]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001614:	684b      	ldr	r3, [r1, #4]
 8001616:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800161a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800161e:	604b      	str	r3, [r1, #4]
 8001620:	e7c7      	b.n	80015b2 <HAL_RCC_OscConfig+0x17e>
 8001622:	4a26      	ldr	r2, [pc, #152]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001624:	6853      	ldr	r3, [r2, #4]
 8001626:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800162a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162e:	6053      	str	r3, [r2, #4]
 8001630:	e7bf      	b.n	80015b2 <HAL_RCC_OscConfig+0x17e>
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001634:	6853      	ldr	r3, [r2, #4]
 8001636:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800163a:	6921      	ldr	r1, [r4, #16]
 800163c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001640:	6053      	str	r3, [r2, #4]
 8001642:	e7b6      	b.n	80015b2 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800164e:	f7fe fea5 	bl	800039c <HAL_GetTick>
 8001652:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f013 0f04 	tst.w	r3, #4
 800165c:	d0a9      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165e:	f7fe fe9d 	bl	800039c <HAL_GetTick>
 8001662:	1b40      	subs	r0, r0, r5
 8001664:	2802      	cmp	r0, #2
 8001666:	d9f5      	bls.n	8001654 <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8001668:	2003      	movs	r0, #3
 800166a:	bd38      	pop	{r3, r4, r5, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	2a01      	cmp	r2, #1
 8001672:	d1ac      	bne.n	80015ce <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f413 7f80 	tst.w	r3, #256	; 0x100
 800167c:	d004      	beq.n	8001688 <HAL_RCC_OscConfig+0x254>
 800167e:	69e3      	ldr	r3, [r4, #28]
 8001680:	2b80      	cmp	r3, #128	; 0x80
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x254>
        return HAL_ERROR;
 8001684:	2001      	movs	r0, #1
 8001686:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001688:	f7fe fea2 	bl	80003d0 <HAL_GetREVID>
 800168c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001690:	4298      	cmp	r0, r3
 8001692:	d815      	bhi.n	80016c0 <HAL_RCC_OscConfig+0x28c>
 8001694:	6a22      	ldr	r2, [r4, #32]
 8001696:	2a20      	cmp	r2, #32
 8001698:	d007      	beq.n	80016aa <HAL_RCC_OscConfig+0x276>
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 800169c:	684b      	ldr	r3, [r1, #4]
 800169e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016a2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e012      	b.n	80016d0 <HAL_RCC_OscConfig+0x29c>
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_RCC_OscConfig+0x288>)
 80016ac:	6853      	ldr	r3, [r2, #4]
 80016ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016b6:	6053      	str	r3, [r2, #4]
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x29c>
 80016ba:	bf00      	nop
 80016bc:	58024400 	.word	0x58024400
 80016c0:	4a9a      	ldr	r2, [pc, #616]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80016c2:	68d3      	ldr	r3, [r2, #12]
 80016c4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80016c8:	6a21      	ldr	r1, [r4, #32]
 80016ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80016ce:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	f013 0f08 	tst.w	r3, #8
 80016d6:	d060      	beq.n	800179a <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016d8:	6963      	ldr	r3, [r4, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d049      	beq.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4a93      	ldr	r2, [pc, #588]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80016e0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7fe fe58 	bl	800039c <HAL_GetTick>
 80016ec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ee:	4b8f      	ldr	r3, [pc, #572]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80016f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f2:	f013 0f02 	tst.w	r3, #2
 80016f6:	d150      	bne.n	800179a <HAL_RCC_OscConfig+0x366>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f8:	f7fe fe50 	bl	800039c <HAL_GetTick>
 80016fc:	1b40      	subs	r0, r0, r5
 80016fe:	2802      	cmp	r0, #2
 8001700:	d9f5      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          return HAL_TIMEOUT;
 8001702:	2003      	movs	r0, #3
 8001704:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001706:	f7fe fe63 	bl	80003d0 <HAL_GetREVID>
 800170a:	f241 0303 	movw	r3, #4099	; 0x1003
 800170e:	4298      	cmp	r0, r3
 8001710:	d812      	bhi.n	8001738 <HAL_RCC_OscConfig+0x304>
 8001712:	6a22      	ldr	r2, [r4, #32]
 8001714:	2a20      	cmp	r2, #32
 8001716:	d007      	beq.n	8001728 <HAL_RCC_OscConfig+0x2f4>
 8001718:	4984      	ldr	r1, [pc, #528]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 800171a:	684b      	ldr	r3, [r1, #4]
 800171c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001720:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001724:	604b      	str	r3, [r1, #4]
 8001726:	e7d3      	b.n	80016d0 <HAL_RCC_OscConfig+0x29c>
 8001728:	4a80      	ldr	r2, [pc, #512]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 800172a:	6853      	ldr	r3, [r2, #4]
 800172c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001734:	6053      	str	r3, [r2, #4]
 8001736:	e7cb      	b.n	80016d0 <HAL_RCC_OscConfig+0x29c>
 8001738:	4a7c      	ldr	r2, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 800173a:	68d3      	ldr	r3, [r2, #12]
 800173c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001740:	6a21      	ldr	r1, [r4, #32]
 8001742:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001746:	60d3      	str	r3, [r2, #12]
 8001748:	e7c2      	b.n	80016d0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_CSI_DISABLE();
 800174a:	4a78      	ldr	r2, [pc, #480]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 800174c:	6813      	ldr	r3, [r2, #0]
 800174e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001752:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001754:	f7fe fe22 	bl	800039c <HAL_GetTick>
 8001758:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800175a:	4b74      	ldr	r3, [pc, #464]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001762:	d0b5      	beq.n	80016d0 <HAL_RCC_OscConfig+0x29c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001764:	f7fe fe1a 	bl	800039c <HAL_GetTick>
 8001768:	1b40      	subs	r0, r0, r5
 800176a:	2802      	cmp	r0, #2
 800176c:	d9f5      	bls.n	800175a <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001774:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7fe fe0e 	bl	800039c <HAL_GetTick>
 8001780:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001782:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f013 0f02 	tst.w	r3, #2
 800178a:	d006      	beq.n	800179a <HAL_RCC_OscConfig+0x366>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7fe fe06 	bl	800039c <HAL_GetTick>
 8001790:	1b40      	subs	r0, r0, r5
 8001792:	2802      	cmp	r0, #2
 8001794:	d9f5      	bls.n	8001782 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8001796:	2003      	movs	r0, #3
 8001798:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	f013 0f20 	tst.w	r3, #32
 80017a0:	d029      	beq.n	80017f6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80017a2:	69a3      	ldr	r3, [r4, #24]
 80017a4:	b19b      	cbz	r3, 80017ce <HAL_RCC_OscConfig+0x39a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a6:	4a61      	ldr	r2, [pc, #388]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	6813      	ldr	r3, [r2, #0]
 80017aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017b0:	f7fe fdf4 	bl	800039c <HAL_GetTick>
 80017b4:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80017be:	d11a      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017c0:	f7fe fdec 	bl	800039c <HAL_GetTick>
 80017c4:	1b40      	subs	r0, r0, r5
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d9f5      	bls.n	80017b6 <HAL_RCC_OscConfig+0x382>
        {
          return HAL_TIMEOUT;
 80017ca:	2003      	movs	r0, #3
 80017cc:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ce:	4a57      	ldr	r2, [pc, #348]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017d8:	f7fe fde0 	bl	800039c <HAL_GetTick>
 80017dc:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017de:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80017e6:	d006      	beq.n	80017f6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017e8:	f7fe fdd8 	bl	800039c <HAL_GetTick>
 80017ec:	1b40      	subs	r0, r0, r5
 80017ee:	2802      	cmp	r0, #2
 80017f0:	d9f5      	bls.n	80017de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80017f2:	2003      	movs	r0, #3
 80017f4:	bd38      	pop	{r3, r4, r5, pc}
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	f013 0f04 	tst.w	r3, #4
 80017fc:	d121      	bne.n	8001842 <HAL_RCC_OscConfig+0x40e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 812e 	beq.w	8001a62 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001806:	4a49      	ldr	r2, [pc, #292]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001808:	6912      	ldr	r2, [r2, #16]
 800180a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800180e:	2a18      	cmp	r2, #24
 8001810:	f000 80ee 	beq.w	80019f0 <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001814:	2b02      	cmp	r3, #2
 8001816:	d075      	beq.n	8001904 <HAL_RCC_OscConfig+0x4d0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4a44      	ldr	r2, [pc, #272]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7fe fdbb 	bl	800039c <HAL_GetTick>
 8001826:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001828:	4b40      	ldr	r3, [pc, #256]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001830:	f000 80dc 	beq.w	80019ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7fe fdb2 	bl	800039c <HAL_GetTick>
 8001838:	1b00      	subs	r0, r0, r4
 800183a:	2802      	cmp	r0, #2
 800183c:	d9f4      	bls.n	8001828 <HAL_RCC_OscConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
 8001840:	bd38      	pop	{r3, r4, r5, pc}
    PWR->CR1 |= PWR_CR1_DBP;
 8001842:	4a3b      	ldr	r2, [pc, #236]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001844:	6813      	ldr	r3, [r2, #0]
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800184c:	f7fe fda6 	bl	800039c <HAL_GetTick>
 8001850:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f413 7f80 	tst.w	r3, #256	; 0x100
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x436>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800185c:	f7fe fd9e 	bl	800039c <HAL_GetTick>
 8001860:	1b40      	subs	r0, r0, r5
 8001862:	2864      	cmp	r0, #100	; 0x64
 8001864:	d9f5      	bls.n	8001852 <HAL_RCC_OscConfig+0x41e>
        return HAL_TIMEOUT;
 8001866:	2003      	movs	r0, #3
 8001868:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	68a3      	ldr	r3, [r4, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d01c      	beq.n	80018aa <HAL_RCC_OscConfig+0x476>
 8001870:	bb0b      	cbnz	r3, 80018b6 <HAL_RCC_OscConfig+0x482>
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001874:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	671a      	str	r2, [r3, #112]	; 0x70
 800187c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800187e:	f022 0204 	bic.w	r2, r2, #4
 8001882:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001884:	68a3      	ldr	r3, [r4, #8]
 8001886:	b363      	cbz	r3, 80018e2 <HAL_RCC_OscConfig+0x4ae>
      tickstart = HAL_GetTick();
 8001888:	f7fe fd88 	bl	800039c <HAL_GetTick>
 800188c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	f013 0f02 	tst.w	r3, #2
 8001896:	d1b2      	bne.n	80017fe <HAL_RCC_OscConfig+0x3ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7fe fd80 	bl	800039c <HAL_GetTick>
 800189c:	1b40      	subs	r0, r0, r5
 800189e:	f241 3388 	movw	r3, #5000	; 0x1388
 80018a2:	4298      	cmp	r0, r3
 80018a4:	d9f3      	bls.n	800188e <HAL_RCC_OscConfig+0x45a>
          return HAL_TIMEOUT;
 80018a6:	2003      	movs	r0, #3
 80018a8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	e7e6      	b.n	8001884 <HAL_RCC_OscConfig+0x450>
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_OscConfig+0x49a>
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80018bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	671a      	str	r2, [r3, #112]	; 0x70
 80018c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018c6:	f022 0204 	bic.w	r2, r2, #4
 80018ca:	671a      	str	r2, [r3, #112]	; 0x70
 80018cc:	e7da      	b.n	8001884 <HAL_RCC_OscConfig+0x450>
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80018d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018d2:	f042 0204 	orr.w	r2, r2, #4
 80018d6:	671a      	str	r2, [r3, #112]	; 0x70
 80018d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	671a      	str	r2, [r3, #112]	; 0x70
 80018e0:	e7d0      	b.n	8001884 <HAL_RCC_OscConfig+0x450>
      tickstart = HAL_GetTick();
 80018e2:	f7fe fd5b 	bl	800039c <HAL_GetTick>
 80018e6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	f013 0f02 	tst.w	r3, #2
 80018f0:	d085      	beq.n	80017fe <HAL_RCC_OscConfig+0x3ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7fe fd53 	bl	800039c <HAL_GetTick>
 80018f6:	1b40      	subs	r0, r0, r5
 80018f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80018fc:	4298      	cmp	r0, r3
 80018fe:	d9f3      	bls.n	80018e8 <HAL_RCC_OscConfig+0x4b4>
          return HAL_TIMEOUT;
 8001900:	2003      	movs	r0, #3
 8001902:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_PLL_DISABLE();
 8001904:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001906:	6813      	ldr	r3, [r2, #0]
 8001908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800190e:	f7fe fd45 	bl	800039c <HAL_GetTick>
 8001912:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800191c:	d00a      	beq.n	8001934 <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7fe fd3d 	bl	800039c <HAL_GetTick>
 8001922:	1b40      	subs	r0, r0, r5
 8001924:	2802      	cmp	r0, #2
 8001926:	d9f5      	bls.n	8001914 <HAL_RCC_OscConfig+0x4e0>
            return HAL_TIMEOUT;
 8001928:	2003      	movs	r0, #3
 800192a:	bd38      	pop	{r3, r4, r5, pc}
 800192c:	58024400 	.word	0x58024400
 8001930:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001934:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <HAL_RCC_OscConfig+0x63c>)
 8001936:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001938:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <HAL_RCC_OscConfig+0x640>)
 800193a:	400a      	ands	r2, r1
 800193c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800193e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001940:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8001944:	430a      	orrs	r2, r1
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
 8001948:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800194a:	3a01      	subs	r2, #1
 800194c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001952:	3901      	subs	r1, #1
 8001954:	0249      	lsls	r1, r1, #9
 8001956:	b289      	uxth	r1, r1
 8001958:	430a      	orrs	r2, r1
 800195a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800195c:	3901      	subs	r1, #1
 800195e:	0409      	lsls	r1, r1, #16
 8001960:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8001964:	430a      	orrs	r2, r1
 8001966:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001968:	3901      	subs	r1, #1
 800196a:	0609      	lsls	r1, r1, #24
 800196c:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8001970:	430a      	orrs	r2, r1
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8001974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800197c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197e:	4a3e      	ldr	r2, [pc, #248]	; (8001a78 <HAL_RCC_OscConfig+0x644>)
 8001980:	400a      	ands	r2, r1
 8001982:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001984:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	f022 020c 	bic.w	r2, r2, #12
 8001990:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001992:	430a      	orrs	r2, r1
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001998:	f022 0202 	bic.w	r2, r2, #2
 800199c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80019c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ca:	f7fe fce7 	bl	800039c <HAL_GetTick>
 80019ce:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x63c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019da:	f7fe fcdf 	bl	800039c <HAL_GetTick>
 80019de:	1b00      	subs	r0, r0, r4
 80019e0:	2802      	cmp	r0, #2
 80019e2:	d9f5      	bls.n	80019d0 <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 80019e4:	2003      	movs	r0, #3
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80019e8:	2000      	movs	r0, #0
 80019ea:	bd38      	pop	{r3, r4, r5, pc}
 80019ec:	2000      	movs	r0, #0
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_RCC_OscConfig+0x63c>)
 80019f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019f4:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d035      	beq.n	8001a66 <HAL_RCC_OscConfig+0x632>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	f001 0303 	and.w	r3, r1, #3
 80019fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a08:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8001a0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	4299      	cmp	r1, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x5e2>
        return HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
 8001a14:	bd38      	pop	{r3, r4, r5, pc}
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a16:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8001a1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x5f2>
        return HAL_ERROR;
 8001a22:	2001      	movs	r0, #1
 8001a24:	bd38      	pop	{r3, r4, r5, pc}
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a26:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8001a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a2c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x602>
        return HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a36:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8001a3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x612>
        return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
 8001a44:	bd38      	pop	{r3, r4, r5, pc}
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a46:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8001a4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a4e:	4298      	cmp	r0, r3
 8001a50:	d00b      	beq.n	8001a6a <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
 8001a54:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
 8001a58:	4770      	bx	lr
        return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8001a5e:	2001      	movs	r0, #1
 8001a60:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001a62:	2000      	movs	r0, #0
 8001a64:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8001a66:	2001      	movs	r0, #1
 8001a68:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001a6a:	2000      	movs	r0, #0
}
 8001a6c:	bd38      	pop	{r3, r4, r5, pc}
 8001a6e:	bf00      	nop
 8001a70:	58024400 	.word	0x58024400
 8001a74:	fffffc0c 	.word	0xfffffc0c
 8001a78:	ffff0007 	.word	0xffff0007

08001a7c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7c:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	f000 80df 	beq.w	8001c48 <HAL_RCC_GetSysClockFreq+0x1cc>
 8001a8a:	2b18      	cmp	r3, #24
 8001a8c:	d011      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x36>
 8001a8e:	b10b      	cbz	r3, 8001a94 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a90:	486f      	ldr	r0, [pc, #444]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001a92:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a94:	4b6d      	ldr	r3, [pc, #436]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f013 0f20 	tst.w	r3, #32
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x26>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a9e:	486d      	ldr	r0, [pc, #436]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1d8>)
  default:
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
 8001aa0:	4770      	bx	lr
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001aa2:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001aac:	fa23 f000 	lsr.w	r0, r3, r0
 8001ab0:	4770      	bx	lr
{
 8001ab2:	b410      	push	{r4}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ab4:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001ab6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ab8:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001abc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001abe:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ac2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8001ac4:	f004 0401 	and.w	r4, r4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ac8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001aca:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8001ace:	fb03 f304 	mul.w	r3, r3, r4
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (pllm != 0U)
 8001ada:	2800      	cmp	r0, #0
 8001adc:	f000 8094 	beq.w	8001c08 <HAL_RCC_GetSysClockFreq+0x18c>
      switch (pllsource)
 8001ae0:	2901      	cmp	r1, #1
 8001ae2:	d066      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x136>
 8001ae4:	b1f9      	cbz	r1, 8001b26 <HAL_RCC_GetSysClockFreq+0xaa>
 8001ae6:	2902      	cmp	r1, #2
 8001ae8:	f000 8091 	beq.w	8001c0e <HAL_RCC_GetSysClockFreq+0x192>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001aec:	ee07 0a10 	vmov	s14, r0
 8001af0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001af4:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8001c58 <HAL_RCC_GetSysClockFreq+0x1dc>
 8001af8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b04:	ee06 3a90 	vmov	s13, r3
 8001b08:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001b0c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8001c5c <HAL_RCC_GetSysClockFreq+0x1e0>
 8001b10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b20:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8001b24:	e061      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x16e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f013 0f20 	tst.w	r3, #32
 8001b2e:	d023      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0xfc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b30:	4946      	ldr	r1, [pc, #280]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001b32:	680a      	ldr	r2, [r1, #0]
 8001b34:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001b3a:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b3c:	ee07 3a10 	vmov	s14, r3
 8001b40:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001b44:	ee07 0a10 	vmov	s14, r0
 8001b48:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8001b4c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8001b50:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b56:	ee06 3a90 	vmov	s13, r3
 8001b5a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001b5e:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8001c5c <HAL_RCC_GetSysClockFreq+0x1e0>
 8001b62:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b76:	e038      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x16e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b78:	ee07 0a10 	vmov	s14, r0
 8001b7c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001b80:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8001c60 <HAL_RCC_GetSysClockFreq+0x1e4>
 8001b84:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b90:	ee06 3a90 	vmov	s13, r3
 8001b94:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001b98:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001c5c <HAL_RCC_GetSysClockFreq+0x1e0>
 8001b9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb0:	e01b      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x16e>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001bb2:	ee07 0a10 	vmov	s14, r0
 8001bb6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001bba:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8001c58 <HAL_RCC_GetSysClockFreq+0x1dc>
 8001bbe:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bca:	ee06 3a90 	vmov	s13, r3
 8001bce:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001bd2:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8001c5c <HAL_RCC_GetSysClockFreq+0x1e0>
 8001bd6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001be6:	ee27 7a27 	vmul.f32	s14, s14, s15
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001bf2:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c00:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8001c04:	ee17 0a90 	vmov	r0, s15
}
 8001c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c0c:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c0e:	ee07 0a10 	vmov	s14, r0
 8001c12:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001c16:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8001c64 <HAL_RCC_GetSysClockFreq+0x1e8>
 8001c1a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c26:	ee06 3a90 	vmov	s13, r3
 8001c2a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001c2e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8001c5c <HAL_RCC_GetSysClockFreq+0x1e0>
 8001c32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c42:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8001c46:	e7d0      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x16e>
    sysclockfreq = HSE_VALUE;
 8001c48:	4807      	ldr	r0, [pc, #28]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8001c4a:	4770      	bx	lr
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	003d0900 	.word	0x003d0900
 8001c54:	03d09000 	.word	0x03d09000
 8001c58:	4a742400 	.word	0x4a742400
 8001c5c:	39000000 	.word	0x39000000
 8001c60:	4c742400 	.word	0x4c742400
 8001c64:	4af42400 	.word	0x4af42400
 8001c68:	007a1200 	.word	0x007a1200

08001c6c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	f000 8135 	beq.w	8001edc <HAL_RCC_ClockConfig+0x270>
{
 8001c72:	b570      	push	{r4, r5, r6, lr}
 8001c74:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c76:	4b9b      	ldr	r3, [pc, #620]	; (8001ee4 <HAL_RCC_ClockConfig+0x278>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	428b      	cmp	r3, r1
 8001c80:	d20c      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4a98      	ldr	r2, [pc, #608]	; (8001ee4 <HAL_RCC_ClockConfig+0x278>)
 8001c84:	6813      	ldr	r3, [r2, #0]
 8001c86:	f023 030f 	bic.w	r3, r3, #15
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	4299      	cmp	r1, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	f013 0f04 	tst.w	r3, #4
 8001ca2:	d00c      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ca4:	6922      	ldr	r2, [r4, #16]
 8001ca6:	4b90      	ldr	r3, [pc, #576]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d905      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cb2:	488d      	ldr	r0, [pc, #564]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001cb4:	6983      	ldr	r3, [r0, #24]
 8001cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	6182      	str	r2, [r0, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	f013 0f08 	tst.w	r3, #8
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cc6:	6962      	ldr	r2, [r4, #20]
 8001cc8:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d905      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cd4:	4884      	ldr	r0, [pc, #528]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001cd6:	69c3      	ldr	r3, [r0, #28]
 8001cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	61c2      	str	r2, [r0, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	f013 0f10 	tst.w	r3, #16
 8001ce6:	d00c      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ce8:	69a2      	ldr	r2, [r4, #24]
 8001cea:	4b7f      	ldr	r3, [pc, #508]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d905      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cf6:	487c      	ldr	r0, [pc, #496]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001cf8:	69c3      	ldr	r3, [r0, #28]
 8001cfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	61c2      	str	r2, [r0, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	f013 0f20 	tst.w	r3, #32
 8001d08:	d00c      	beq.n	8001d24 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d0a:	69e2      	ldr	r2, [r4, #28]
 8001d0c:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d905      	bls.n	8001d24 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d18:	4873      	ldr	r0, [pc, #460]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001d1a:	6a03      	ldr	r3, [r0, #32]
 8001d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d20:	431a      	orrs	r2, r3
 8001d22:	6202      	str	r2, [r0, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	f013 0f02 	tst.w	r3, #2
 8001d2a:	d00c      	beq.n	8001d46 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d2c:	68e2      	ldr	r2, [r4, #12]
 8001d2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d905      	bls.n	8001d46 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3a:	486b      	ldr	r0, [pc, #428]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001d3c:	6983      	ldr	r3, [r0, #24]
 8001d3e:	f023 030f 	bic.w	r3, r3, #15
 8001d42:	431a      	orrs	r2, r3
 8001d44:	6182      	str	r2, [r0, #24]
 8001d46:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	f013 0f01 	tst.w	r3, #1
 8001d4e:	d041      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x168>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d50:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001d52:	6993      	ldr	r3, [r2, #24]
 8001d54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d58:	68a1      	ldr	r1, [r4, #8]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	6863      	ldr	r3, [r4, #4]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d023      	beq.n	8001dac <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d027      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d02c      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x15a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d6c:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	f012 0f04 	tst.w	r2, #4
 8001d74:	f000 80b4 	beq.w	8001ee0 <HAL_RCC_ClockConfig+0x274>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d78:	495b      	ldr	r1, [pc, #364]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001d7a:	690a      	ldr	r2, [r1, #16]
 8001d7c:	f022 0207 	bic.w	r2, r2, #7
 8001d80:	4313      	orrs	r3, r2
 8001d82:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8001d84:	f7fe fb0a 	bl	800039c <HAL_GetTick>
 8001d88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d92:	6862      	ldr	r2, [r4, #4]
 8001d94:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001d98:	d01c      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x168>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9a:	f7fe faff 	bl	800039c <HAL_GetTick>
 8001d9e:	1b80      	subs	r0, r0, r6
 8001da0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001da4:	4298      	cmp	r0, r3
 8001da6:	d9f0      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x11e>
            return HAL_TIMEOUT;
 8001da8:	2003      	movs	r0, #3
 8001daa:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001db2:	d1e1      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
          return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
 8001db6:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001db8:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001dc0:	d1da      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
          return HAL_ERROR;
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001dce:	d1d3      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
          return HAL_ERROR;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	f013 0f02 	tst.w	r3, #2
 8001dda:	d00c      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x18a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ddc:	68e2      	ldr	r2, [r4, #12]
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d205      	bcs.n	8001df6 <HAL_RCC_ClockConfig+0x18a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dea:	493f      	ldr	r1, [pc, #252]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001dec:	698b      	ldr	r3, [r1, #24]
 8001dee:	f023 030f 	bic.w	r3, r3, #15
 8001df2:	431a      	orrs	r2, r3
 8001df4:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_ClockConfig+0x278>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	429d      	cmp	r5, r3
 8001e00:	d20c      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x1b0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4a38      	ldr	r2, [pc, #224]	; (8001ee4 <HAL_RCC_ClockConfig+0x278>)
 8001e04:	6813      	ldr	r3, [r2, #0]
 8001e06:	f023 030f 	bic.w	r3, r3, #15
 8001e0a:	432b      	orrs	r3, r5
 8001e0c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	429d      	cmp	r5, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x1b0>
      return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
}
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	f013 0f04 	tst.w	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x1d2>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e24:	6922      	ldr	r2, [r4, #16]
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d205      	bcs.n	8001e3e <HAL_RCC_ClockConfig+0x1d2>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e32:	492d      	ldr	r1, [pc, #180]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001e34:	698b      	ldr	r3, [r1, #24]
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	f013 0f08 	tst.w	r3, #8
 8001e44:	d00c      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x1f4>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e46:	6962      	ldr	r2, [r4, #20]
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d205      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x1f4>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e54:	4924      	ldr	r1, [pc, #144]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001e56:	69cb      	ldr	r3, [r1, #28]
 8001e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	f013 0f10 	tst.w	r3, #16
 8001e66:	d00c      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x216>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e68:	69a2      	ldr	r2, [r4, #24]
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d205      	bcs.n	8001e82 <HAL_RCC_ClockConfig+0x216>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e76:	491c      	ldr	r1, [pc, #112]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001e78:	69cb      	ldr	r3, [r1, #28]
 8001e7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	f013 0f20 	tst.w	r3, #32
 8001e88:	d00c      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x238>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e8a:	69e2      	ldr	r2, [r4, #28]
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d205      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x238>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e98:	4913      	ldr	r1, [pc, #76]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001e9a:	6a0b      	ldr	r3, [r1, #32]
 8001e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ea4:	f7ff fdea 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001ea8:	490f      	ldr	r1, [pc, #60]	; (8001ee8 <HAL_RCC_ClockConfig+0x27c>)
 8001eaa:	698b      	ldr	r3, [r1, #24]
 8001eac:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_RCC_ClockConfig+0x280>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eba:	698b      	ldr	r3, [r1, #24]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	5cd3      	ldrb	r3, [r2, r3]
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	fa20 f303 	lsr.w	r3, r0, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x284>)
 8001ecc:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x288>)
 8001ed0:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x28c>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	f7fe f9ff 	bl	80002d8 <HAL_InitTick>
  return halstatus;
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	4770      	bx	lr
          return HAL_ERROR;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	52002000 	.word	0x52002000
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	08005e68 	.word	0x08005e68
 8001ef0:	24000018 	.word	0x24000018
 8001ef4:	24000014 	.word	0x24000014
 8001ef8:	24000004 	.word	0x24000004

08001efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001efc:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001efe:	f7ff fdbd 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x34>)
 8001f04:	6993      	ldr	r3, [r2, #24]
 8001f06:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001f0a:	490a      	ldr	r1, [pc, #40]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x38>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f16:	6992      	ldr	r2, [r2, #24]
 8001f18:	f002 020f 	and.w	r2, r2, #15
 8001f1c:	5c88      	ldrb	r0, [r1, r2]
 8001f1e:	f000 001f 	and.w	r0, r0, #31
 8001f22:	fa23 f000 	lsr.w	r0, r3, r0
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_RCC_GetHCLKFreq+0x3c>)
 8001f28:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_RCC_GetHCLKFreq+0x40>)
 8001f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001f2e:	bd08      	pop	{r3, pc}
 8001f30:	58024400 	.word	0x58024400
 8001f34:	08005e68 	.word	0x08005e68
 8001f38:	24000018 	.word	0x24000018
 8001f3c:	24000014 	.word	0x24000014

08001f40 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001f40:	4b40      	ldr	r3, [pc, #256]	; (8002044 <RCCEx_PLL2_Config+0x104>)
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d079      	beq.n	8002040 <RCCEx_PLL2_Config+0x100>
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	460e      	mov	r6, r1
 8001f50:	4605      	mov	r5, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001f52:	4a3c      	ldr	r2, [pc, #240]	; (8002044 <RCCEx_PLL2_Config+0x104>)
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fa1e 	bl	800039c <HAL_GetTick>
 8001f60:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <RCCEx_PLL2_Config+0x104>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f6a:	d006      	beq.n	8001f7a <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001f6c:	f7fe fa16 	bl	800039c <HAL_GetTick>
 8001f70:	1b00      	subs	r0, r0, r4
 8001f72:	2802      	cmp	r0, #2
 8001f74:	d9f5      	bls.n	8001f62 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8001f76:	2003      	movs	r0, #3
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <RCCEx_PLL2_Config+0x104>)
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7e:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8001f82:	6829      	ldr	r1, [r5, #0]
 8001f84:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
 8001f8a:	686a      	ldr	r2, [r5, #4]
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f92:	68a9      	ldr	r1, [r5, #8]
 8001f94:	3901      	subs	r1, #1
 8001f96:	0249      	lsls	r1, r1, #9
 8001f98:	b289      	uxth	r1, r1
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	68e9      	ldr	r1, [r5, #12]
 8001f9e:	3901      	subs	r1, #1
 8001fa0:	0409      	lsls	r1, r1, #16
 8001fa2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	6929      	ldr	r1, [r5, #16]
 8001faa:	3901      	subs	r1, #1
 8001fac:	0609      	lsls	r1, r1, #24
 8001fae:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001fbc:	6969      	ldr	r1, [r5, #20]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	f022 0220 	bic.w	r2, r2, #32
 8001fc8:	69a9      	ldr	r1, [r5, #24]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd0:	f022 0210 	bic.w	r2, r2, #16
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001fd6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <RCCEx_PLL2_Config+0x108>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	69e9      	ldr	r1, [r5, #28]
 8001fde:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001fe2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe6:	f042 0210 	orr.w	r2, r2, #16
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8001fec:	b9c6      	cbnz	r6, 8002020 <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001ff8:	4a12      	ldr	r2, [pc, #72]	; (8002044 <RCCEx_PLL2_Config+0x104>)
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002002:	f7fe f9cb 	bl	800039c <HAL_GetTick>
 8002006:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <RCCEx_PLL2_Config+0x104>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002010:	d114      	bne.n	800203c <RCCEx_PLL2_Config+0xfc>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002012:	f7fe f9c3 	bl	800039c <HAL_GetTick>
 8002016:	1b00      	subs	r0, r0, r4
 8002018:	2802      	cmp	r0, #2
 800201a:	d9f5      	bls.n	8002008 <RCCEx_PLL2_Config+0xc8>
      {
        return HAL_TIMEOUT;
 800201c:	2003      	movs	r0, #3

  }


  return status;
}
 800201e:	bd70      	pop	{r4, r5, r6, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8002020:	2e01      	cmp	r6, #1
 8002022:	d005      	beq.n	8002030 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <RCCEx_PLL2_Config+0x104>)
 8002026:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800202e:	e7e3      	b.n	8001ff8 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <RCCEx_PLL2_Config+0x104>)
 8002032:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002038:	62d3      	str	r3, [r2, #44]	; 0x2c
 800203a:	e7dd      	b.n	8001ff8 <RCCEx_PLL2_Config+0xb8>
  return status;
 800203c:	2000      	movs	r0, #0
 800203e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002040:	2001      	movs	r0, #1
 8002042:	4770      	bx	lr
 8002044:	58024400 	.word	0x58024400
 8002048:	ffff0007 	.word	0xffff0007

0800204c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <RCCEx_PLL3_Config+0x104>)
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d079      	beq.n	800214c <RCCEx_PLL3_Config+0x100>
{
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	460e      	mov	r6, r1
 800205c:	4605      	mov	r5, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800205e:	4a3c      	ldr	r2, [pc, #240]	; (8002150 <RCCEx_PLL3_Config+0x104>)
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002068:	f7fe f998 	bl	800039c <HAL_GetTick>
 800206c:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <RCCEx_PLL3_Config+0x104>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002076:	d006      	beq.n	8002086 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002078:	f7fe f990 	bl	800039c <HAL_GetTick>
 800207c:	1b00      	subs	r0, r0, r4
 800207e:	2802      	cmp	r0, #2
 8002080:	d9f5      	bls.n	800206e <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002082:	2003      	movs	r0, #3
 8002084:	bd70      	pop	{r4, r5, r6, pc}
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <RCCEx_PLL3_Config+0x104>)
 8002088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208a:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800208e:	6829      	ldr	r1, [r5, #0]
 8002090:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
 8002096:	686a      	ldr	r2, [r5, #4]
 8002098:	3a01      	subs	r2, #1
 800209a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800209e:	68a9      	ldr	r1, [r5, #8]
 80020a0:	3901      	subs	r1, #1
 80020a2:	0249      	lsls	r1, r1, #9
 80020a4:	b289      	uxth	r1, r1
 80020a6:	430a      	orrs	r2, r1
 80020a8:	68e9      	ldr	r1, [r5, #12]
 80020aa:	3901      	subs	r1, #1
 80020ac:	0409      	lsls	r1, r1, #16
 80020ae:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80020b2:	430a      	orrs	r2, r1
 80020b4:	6929      	ldr	r1, [r5, #16]
 80020b6:	3901      	subs	r1, #1
 80020b8:	0609      	lsls	r1, r1, #24
 80020ba:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80020be:	430a      	orrs	r2, r1
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020c8:	6969      	ldr	r1, [r5, #20]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020d4:	69a9      	ldr	r1, [r5, #24]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80020da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80020e2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <RCCEx_PLL3_Config+0x108>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	69e9      	ldr	r1, [r5, #28]
 80020ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80020f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80020f8:	b9c6      	cbnz	r6, 800212c <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80020fa:	461a      	mov	r2, r3
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002102:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <RCCEx_PLL3_Config+0x104>)
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210e:	f7fe f945 	bl	800039c <HAL_GetTick>
 8002112:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <RCCEx_PLL3_Config+0x104>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800211c:	d114      	bne.n	8002148 <RCCEx_PLL3_Config+0xfc>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800211e:	f7fe f93d 	bl	800039c <HAL_GetTick>
 8002122:	1b00      	subs	r0, r0, r4
 8002124:	2802      	cmp	r0, #2
 8002126:	d9f5      	bls.n	8002114 <RCCEx_PLL3_Config+0xc8>
      {
        return HAL_TIMEOUT;
 8002128:	2003      	movs	r0, #3

  }


  return status;
}
 800212a:	bd70      	pop	{r4, r5, r6, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 800212c:	2e01      	cmp	r6, #1
 800212e:	d005      	beq.n	800213c <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <RCCEx_PLL3_Config+0x104>)
 8002132:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002138:	62d3      	str	r3, [r2, #44]	; 0x2c
 800213a:	e7e3      	b.n	8002104 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <RCCEx_PLL3_Config+0x104>)
 800213e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002140:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002144:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002146:	e7dd      	b.n	8002104 <RCCEx_PLL3_Config+0xb8>
  return status;
 8002148:	2000      	movs	r0, #0
 800214a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800214c:	2001      	movs	r0, #1
 800214e:	4770      	bx	lr
 8002150:	58024400 	.word	0x58024400
 8002154:	ffff0007 	.word	0xffff0007

08002158 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800215c:	6803      	ldr	r3, [r0, #0]
 800215e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002162:	d02b      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002164:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800216a:	d019      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800216c:	d910      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x38>
 800216e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002172:	d01b      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002174:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002178:	d11e      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800217a:	2500      	movs	r5, #0
    if(ret == HAL_OK)
 800217c:	bb65      	cbnz	r5, 80021d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800217e:	4a9b      	ldr	r2, [pc, #620]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002180:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002182:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002186:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002188:	430b      	orrs	r3, r1
 800218a:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800218c:	462e      	mov	r6, r5
 800218e:	e017      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002190:	b993      	cbnz	r3, 80021b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002192:	4a96      	ldr	r2, [pc, #600]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002194:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219a:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800219c:	2500      	movs	r5, #0
      break;
 800219e:	e7ed      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x24>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80021a0:	2102      	movs	r1, #2
 80021a2:	3004      	adds	r0, #4
 80021a4:	f7ff fecc 	bl	8001f40 <RCCEx_PLL2_Config>
 80021a8:	4605      	mov	r5, r0
      break;
 80021aa:	e7e7      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x24>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021ac:	2102      	movs	r1, #2
 80021ae:	3024      	adds	r0, #36	; 0x24
 80021b0:	f7ff ff4c 	bl	800204c <RCCEx_PLL3_Config>
 80021b4:	4605      	mov	r5, r0
      break;
 80021b6:	e7e1      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x24>
      ret = HAL_ERROR;
 80021b8:	2501      	movs	r5, #1
 80021ba:	e7df      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x24>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021bc:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021be:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021c6:	d027      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    switch(PeriphClkInit->Sai1ClockSelection)
 80021c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d821      	bhi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xba>
 80021ce:	e8df f003 	tbb	[pc, r3]
 80021d2:	1305      	.short	0x1305
 80021d4:	0a19      	.short	0x0a19
 80021d6:	0a          	.byte	0x0a
 80021d7:	00          	.byte	0x00
      status = ret;
 80021d8:	462e      	mov	r6, r5
 80021da:	e7f1      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021dc:	4a83      	ldr	r2, [pc, #524]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80021de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80021e6:	b9b5      	cbnz	r5, 8002216 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e8:	4a80      	ldr	r2, [pc, #512]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80021ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80021ec:	f023 0307 	bic.w	r3, r3, #7
 80021f0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80021f2:	430b      	orrs	r3, r1
 80021f4:	6513      	str	r3, [r2, #80]	; 0x50
 80021f6:	e00f      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021f8:	2100      	movs	r1, #0
 80021fa:	1d20      	adds	r0, r4, #4
 80021fc:	f7ff fea0 	bl	8001f40 <RCCEx_PLL2_Config>
 8002200:	4605      	mov	r5, r0
      break;
 8002202:	e7f0      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002204:	2100      	movs	r1, #0
 8002206:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800220a:	f7ff ff1f 	bl	800204c <RCCEx_PLL3_Config>
 800220e:	4605      	mov	r5, r0
      break;
 8002210:	e7e9      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 8002212:	2501      	movs	r5, #1
 8002214:	e7e7      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      status = ret;
 8002216:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800221e:	d029      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002222:	2b80      	cmp	r3, #128	; 0x80
 8002224:	d01e      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002226:	d808      	bhi.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002228:	b173      	cbz	r3, 8002248 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d10a      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800222e:	2100      	movs	r1, #0
 8002230:	1d20      	adds	r0, r4, #4
 8002232:	f7ff fe85 	bl	8001f40 <RCCEx_PLL2_Config>
 8002236:	4605      	mov	r5, r0
      break;
 8002238:	e00b      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch(PeriphClkInit->Sai23ClockSelection)
 800223a:	2bc0      	cmp	r3, #192	; 0xc0
 800223c:	d009      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800223e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002242:	d006      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      ret = HAL_ERROR;
 8002244:	2501      	movs	r5, #1
 8002246:	e004      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002248:	4a68      	ldr	r2, [pc, #416]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800224a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002252:	b975      	cbnz	r5, 8002272 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002254:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002256:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002258:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800225c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800225e:	430b      	orrs	r3, r1
 8002260:	6513      	str	r3, [r2, #80]	; 0x50
 8002262:	e007      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002264:	2100      	movs	r1, #0
 8002266:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800226a:	f7ff feef 	bl	800204c <RCCEx_PLL3_Config>
 800226e:	4605      	mov	r5, r0
      break;
 8002270:	e7ef      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      status = ret;
 8002272:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800227a:	d02e      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x182>
    switch(PeriphClkInit->Sai4AClockSelection)
 800227c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8002280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002284:	d021      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002286:	d809      	bhi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002288:	b183      	cbz	r3, 80022ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 800228a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800228e:	d10b      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002290:	2100      	movs	r1, #0
 8002292:	1d20      	adds	r0, r4, #4
 8002294:	f7ff fe54 	bl	8001f40 <RCCEx_PLL2_Config>
 8002298:	4605      	mov	r5, r0
      break;
 800229a:	e00c      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    switch(PeriphClkInit->Sai4AClockSelection)
 800229c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022a0:	d009      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80022a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022a6:	d006      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = HAL_ERROR;
 80022a8:	2501      	movs	r5, #1
 80022aa:	e004      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ac:	4a4f      	ldr	r2, [pc, #316]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80022ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80022b6:	b97d      	cbnz	r5, 80022d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80022b8:	4a4c      	ldr	r2, [pc, #304]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80022ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80022bc:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80022c0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6593      	str	r3, [r2, #88]	; 0x58
 80022c8:	e007      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x182>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022ca:	2100      	movs	r1, #0
 80022cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022d0:	f7ff febc 	bl	800204c <RCCEx_PLL3_Config>
 80022d4:	4605      	mov	r5, r0
      break;
 80022d6:	e7ee      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      status = ret;
 80022d8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80022e0:	d02e      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Sai4BClockSelection)
 80022e2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80022e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ea:	d021      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80022ec:	d809      	bhi.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022ee:	b183      	cbz	r3, 8002312 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d10b      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022f6:	2100      	movs	r1, #0
 80022f8:	1d20      	adds	r0, r4, #4
 80022fa:	f7ff fe21 	bl	8001f40 <RCCEx_PLL2_Config>
 80022fe:	4605      	mov	r5, r0
      break;
 8002300:	e00c      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002306:	d009      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8002308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800230c:	d006      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      ret = HAL_ERROR;
 800230e:	2501      	movs	r5, #1
 8002310:	e004      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002312:	4a36      	ldr	r2, [pc, #216]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002314:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800231c:	b97d      	cbnz	r5, 800233e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002320:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002322:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002326:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800232a:	430b      	orrs	r3, r1
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
 800232e:	e007      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002330:	2100      	movs	r1, #0
 8002332:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002336:	f7ff fe89 	bl	800204c <RCCEx_PLL3_Config>
 800233a:	4605      	mov	r5, r0
      break;
 800233c:	e7ee      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      status = ret;
 800233e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002346:	d020      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x232>
    switch(PeriphClkInit->QspiClockSelection)
 8002348:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800234a:	2b10      	cmp	r3, #16
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800234e:	d904      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002350:	2b20      	cmp	r3, #32
 8002352:	d013      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x224>
 8002354:	2b30      	cmp	r3, #48	; 0x30
 8002356:	d008      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002358:	e000      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x204>
 800235a:	b133      	cbz	r3, 800236a <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = HAL_ERROR;
 800235c:	2501      	movs	r5, #1
 800235e:	e004      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002360:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002362:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800236a:	b96d      	cbnz	r5, 8002388 <HAL_RCCEx_PeriphCLKConfig+0x230>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800236c:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800236e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002370:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002374:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002376:	430b      	orrs	r3, r1
 8002378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237a:	e006      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x232>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800237c:	2102      	movs	r1, #2
 800237e:	1d20      	adds	r0, r4, #4
 8002380:	f7ff fdde 	bl	8001f40 <RCCEx_PLL2_Config>
 8002384:	4605      	mov	r5, r0
      break;
 8002386:	e7f0      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x212>
      status = ret;
 8002388:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002390:	d02f      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002392:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002398:	d020      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x284>
 800239a:	d809      	bhi.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800239c:	b183      	cbz	r3, 80023c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	d10b      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023a4:	2100      	movs	r1, #0
 80023a6:	1d20      	adds	r0, r4, #4
 80023a8:	f7ff fdca 	bl	8001f40 <RCCEx_PLL2_Config>
 80023ac:	4605      	mov	r5, r0
      break;
 80023ae:	e00c      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x272>
    switch(PeriphClkInit->Spi123ClockSelection)
 80023b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023b4:	d009      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x272>
 80023b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ba:	d006      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x272>
      ret = HAL_ERROR;
 80023bc:	2501      	movs	r5, #1
 80023be:	e004      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80023c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80023ca:	b98d      	cbnz	r5, 80023f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80023ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80023d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80023d6:	430b      	orrs	r3, r1
 80023d8:	6513      	str	r3, [r2, #80]	; 0x50
 80023da:	e00a      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023dc:	2100      	movs	r1, #0
 80023de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023e2:	f7ff fe33 	bl	800204c <RCCEx_PLL3_Config>
 80023e6:	4605      	mov	r5, r0
      break;
 80023e8:	e7ef      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x272>
 80023ea:	bf00      	nop
 80023ec:	58024400 	.word	0x58024400
      status = ret;
 80023f0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80023f8:	d029      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80023fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80023fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002400:	d01d      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002402:	d811      	bhi.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002404:	b13b      	cbz	r3, 8002416 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240a:	d116      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800240c:	2101      	movs	r1, #1
 800240e:	1d20      	adds	r0, r4, #4
 8002410:	f7ff fd96 	bl	8001f40 <RCCEx_PLL2_Config>
 8002414:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002416:	b9cd      	cbnz	r5, 800244c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002418:	4a97      	ldr	r2, [pc, #604]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800241a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800241c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002420:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002422:	430b      	orrs	r3, r1
 8002424:	6513      	str	r3, [r2, #80]	; 0x50
 8002426:	e012      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800242c:	d0f3      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800242e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002432:	d0f0      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002434:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002438:	d0ed      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = HAL_ERROR;
 800243a:	2501      	movs	r5, #1
 800243c:	e7eb      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800243e:	2101      	movs	r1, #1
 8002440:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002444:	f7ff fe02 	bl	800204c <RCCEx_PLL3_Config>
 8002448:	4605      	mov	r5, r0
      break;
 800244a:	e7e4      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      status = ret;
 800244c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002454:	d02b      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002456:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800245a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800245e:	d01e      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x346>
 8002460:	d812      	bhi.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002462:	b13b      	cbz	r3, 8002474 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002468:	d117      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x342>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800246a:	2101      	movs	r1, #1
 800246c:	1d20      	adds	r0, r4, #4
 800246e:	f7ff fd67 	bl	8001f40 <RCCEx_PLL2_Config>
 8002472:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002474:	b9d5      	cbnz	r5, 80024ac <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002476:	4a80      	ldr	r2, [pc, #512]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8002478:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800247a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800247e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8002482:	430b      	orrs	r3, r1
 8002484:	6593      	str	r3, [r2, #88]	; 0x58
 8002486:	e012      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248c:	d0f2      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800248e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002492:	d0ef      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002494:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002498:	d0ec      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 800249a:	2501      	movs	r5, #1
 800249c:	e7ea      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800249e:	2101      	movs	r1, #1
 80024a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024a4:	f7ff fdd2 	bl	800204c <RCCEx_PLL3_Config>
 80024a8:	4605      	mov	r5, r0
      break;
 80024aa:	e7e3      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      status = ret;
 80024ac:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80024b4:	d01e      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FdcanClockSelection)
 80024b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80024b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024bc:	d005      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x372>
 80024be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c2:	d010      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80024c4:	b133      	cbz	r3, 80024d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = HAL_ERROR;
 80024c6:	2501      	movs	r5, #1
 80024c8:	e004      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ca:	4a6b      	ldr	r2, [pc, #428]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80024cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80024d4:	b96d      	cbnz	r5, 80024f2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80024d6:	4a68      	ldr	r2, [pc, #416]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80024d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80024da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80024de:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6513      	str	r3, [r2, #80]	; 0x50
 80024e4:	e006      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024e6:	2101      	movs	r1, #1
 80024e8:	1d20      	adds	r0, r4, #4
 80024ea:	f7ff fd29 	bl	8001f40 <RCCEx_PLL2_Config>
 80024ee:	4605      	mov	r5, r0
      break;
 80024f0:	e7f0      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      status = ret;
 80024f2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80024fa:	d01d      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->FmcClockSelection)
 80024fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d817      	bhi.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8002502:	e8df f003 	tbb	[pc, r3]
 8002506:	0207      	.short	0x0207
 8002508:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800250a:	4a5b      	ldr	r2, [pc, #364]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800250c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800250e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002512:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002514:	b97d      	cbnz	r5, 8002536 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002516:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8002518:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800251a:	f023 0303 	bic.w	r3, r3, #3
 800251e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002520:	430b      	orrs	r3, r1
 8002522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002524:	e008      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002526:	2102      	movs	r1, #2
 8002528:	1d20      	adds	r0, r4, #4
 800252a:	f7ff fd09 	bl	8001f40 <RCCEx_PLL2_Config>
 800252e:	4605      	mov	r5, r0
      break;
 8002530:	e7f0      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      ret = HAL_ERROR;
 8002532:	2501      	movs	r5, #1
 8002534:	e7ee      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      status = ret;
 8002536:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800253e:	d11f      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x428>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f013 0f01 	tst.w	r3, #1
 8002546:	f000 809e 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch(PeriphClkInit->Usart16ClockSelection)
 800254a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800254c:	2b28      	cmp	r3, #40	; 0x28
 800254e:	f200 8090 	bhi.w	8002672 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002552:	e8df f003 	tbb	[pc, r3]
 8002556:	8e7e      	.short	0x8e7e
 8002558:	8e8e8e8e 	.word	0x8e8e8e8e
 800255c:	8e798e8e 	.word	0x8e798e8e
 8002560:	8e8e8e8e 	.word	0x8e8e8e8e
 8002564:	8e878e8e 	.word	0x8e878e8e
 8002568:	8e8e8e8e 	.word	0x8e8e8e8e
 800256c:	8e7e8e8e 	.word	0x8e7e8e8e
 8002570:	8e8e8e8e 	.word	0x8e8e8e8e
 8002574:	8e7e8e8e 	.word	0x8e7e8e8e
 8002578:	8e8e8e8e 	.word	0x8e8e8e8e
 800257c:	8e8e      	.short	0x8e8e
 800257e:	7e          	.byte	0x7e
 800257f:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002580:	4a3e      	ldr	r2, [pc, #248]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8002582:	6813      	ldr	r3, [r2, #0]
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800258a:	f7fd ff07 	bl	800039c <HAL_GetTick>
 800258e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002598:	d105      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fd feff 	bl	800039c <HAL_GetTick>
 800259e:	1bc0      	subs	r0, r0, r7
 80025a0:	2864      	cmp	r0, #100	; 0x64
 80025a2:	d9f5      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x438>
        ret = HAL_TIMEOUT;
 80025a4:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 80025a6:	2d00      	cmp	r5, #0
 80025a8:	d14a      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80025aa:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80025b2:	4053      	eors	r3, r2
 80025b4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80025b8:	d00c      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ba:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80025bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80025c2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80025c4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80025c8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80025cc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80025d0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80025d2:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80025d4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80025d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025dc:	d015      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      if(ret == HAL_OK)
 80025de:	bb8d      	cbnz	r5, 8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025e0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80025e4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80025e8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80025ec:	d01e      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80025f0:	6913      	ldr	r3, [r2, #16]
 80025f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025f6:	6113      	str	r3, [r2, #16]
 80025f8:	491f      	ldr	r1, [pc, #124]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 80025fa:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80025fc:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002600:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002604:	4313      	orrs	r3, r2
 8002606:	670b      	str	r3, [r1, #112]	; 0x70
 8002608:	e79a      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        tickstart = HAL_GetTick();
 800260a:	f7fd fec7 	bl	800039c <HAL_GetTick>
 800260e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	f013 0f02 	tst.w	r3, #2
 8002618:	d1e1      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x486>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fd febf 	bl	800039c <HAL_GetTick>
 800261e:	1bc0      	subs	r0, r0, r7
 8002620:	f241 3388 	movw	r3, #5000	; 0x1388
 8002624:	4298      	cmp	r0, r3
 8002626:	d9f3      	bls.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
            ret = HAL_TIMEOUT;
 8002628:	2503      	movs	r5, #3
 800262a:	e7d8      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x486>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262c:	4812      	ldr	r0, [pc, #72]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 800262e:	6902      	ldr	r2, [r0, #16]
 8002630:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8002634:	4912      	ldr	r1, [pc, #72]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002636:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800263a:	4313      	orrs	r3, r2
 800263c:	6103      	str	r3, [r0, #16]
 800263e:	e7db      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      status = ret;
 8002640:	462e      	mov	r6, r5
 8002642:	e77d      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        status = ret;
 8002644:	462e      	mov	r6, r5
 8002646:	e77b      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002648:	2101      	movs	r1, #1
 800264a:	1d20      	adds	r0, r4, #4
 800264c:	f7ff fc78 	bl	8001f40 <RCCEx_PLL2_Config>
 8002650:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002652:	b9bd      	cbnz	r5, 8002684 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002654:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x520>)
 8002656:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002658:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800265c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800265e:	430b      	orrs	r3, r1
 8002660:	6553      	str	r3, [r2, #84]	; 0x54
 8002662:	e010      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002664:	2101      	movs	r1, #1
 8002666:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800266a:	f7ff fcef 	bl	800204c <RCCEx_PLL3_Config>
 800266e:	4605      	mov	r5, r0
      break;
 8002670:	e7ef      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      ret = HAL_ERROR;
 8002672:	2501      	movs	r5, #1
 8002674:	e7ed      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002676:	bf00      	nop
 8002678:	58024400 	.word	0x58024400
 800267c:	58024800 	.word	0x58024800
 8002680:	00ffffcf 	.word	0x00ffffcf
      status = ret;
 8002684:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	f013 0f02 	tst.w	r3, #2
 800268c:	d01f      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800268e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002690:	2b05      	cmp	r3, #5
 8002692:	d819      	bhi.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002694:	e8df f003 	tbb	[pc, r3]
 8002698:	08110308 	.word	0x08110308
 800269c:	0808      	.short	0x0808
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800269e:	2101      	movs	r1, #1
 80026a0:	1d20      	adds	r0, r4, #4
 80026a2:	f7ff fc4d 	bl	8001f40 <RCCEx_PLL2_Config>
 80026a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026a8:	b985      	cbnz	r5, 80026cc <HAL_RCCEx_PeriphCLKConfig+0x574>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80026aa:	4aaa      	ldr	r2, [pc, #680]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80026ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026ae:	f023 0307 	bic.w	r3, r3, #7
 80026b2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6553      	str	r3, [r2, #84]	; 0x54
 80026b8:	e009      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x576>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026ba:	2101      	movs	r1, #1
 80026bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026c0:	f7ff fcc4 	bl	800204c <RCCEx_PLL3_Config>
 80026c4:	4605      	mov	r5, r0
      break;
 80026c6:	e7ef      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
      ret = HAL_ERROR;
 80026c8:	2501      	movs	r5, #1
 80026ca:	e7ed      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
      status = ret;
 80026cc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	f013 0f04 	tst.w	r3, #4
 80026d4:	d021      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80026d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d81a      	bhi.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80026de:	e8df f003 	tbb	[pc, r3]
 80026e2:	0308      	.short	0x0308
 80026e4:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026e8:	2101      	movs	r1, #1
 80026ea:	1d20      	adds	r0, r4, #4
 80026ec:	f7ff fc28 	bl	8001f40 <RCCEx_PLL2_Config>
 80026f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80026f2:	b98d      	cbnz	r5, 8002718 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026f4:	4a97      	ldr	r2, [pc, #604]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80026f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80026f8:	f023 0307 	bic.w	r3, r3, #7
 80026fc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002700:	430b      	orrs	r3, r1
 8002702:	6593      	str	r3, [r2, #88]	; 0x58
 8002704:	e009      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002706:	2101      	movs	r1, #1
 8002708:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800270c:	f7ff fc9e 	bl	800204c <RCCEx_PLL3_Config>
 8002710:	4605      	mov	r5, r0
      break;
 8002712:	e7ee      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      ret = HAL_ERROR;
 8002714:	2501      	movs	r5, #1
 8002716:	e7ec      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      status = ret;
 8002718:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	f013 0f20 	tst.w	r3, #32
 8002720:	d02b      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002722:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800272a:	d01e      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800272c:	d812      	bhi.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800272e:	b13b      	cbz	r3, 8002740 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8002730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002734:	d117      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002736:	2100      	movs	r1, #0
 8002738:	1d20      	adds	r0, r4, #4
 800273a:	f7ff fc01 	bl	8001f40 <RCCEx_PLL2_Config>
 800273e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002740:	b9d5      	cbnz	r5, 8002778 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002742:	4a84      	ldr	r2, [pc, #528]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002744:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002746:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800274a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800274e:	430b      	orrs	r3, r1
 8002750:	6553      	str	r3, [r2, #84]	; 0x54
 8002752:	e012      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d0f2      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800275a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275e:	d0ef      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8002760:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002764:	d0ec      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      ret = HAL_ERROR;
 8002766:	2501      	movs	r5, #1
 8002768:	e7ea      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800276a:	2102      	movs	r1, #2
 800276c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002770:	f7ff fc6c 	bl	800204c <RCCEx_PLL3_Config>
 8002774:	4605      	mov	r5, r0
      break;
 8002776:	e7e3      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      status = ret;
 8002778:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002780:	d02b      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x682>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002782:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800278a:	d01e      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 800278c:	d812      	bhi.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800278e:	b13b      	cbz	r3, 80027a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002794:	d117      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002796:	2100      	movs	r1, #0
 8002798:	1d20      	adds	r0, r4, #4
 800279a:	f7ff fbd1 	bl	8001f40 <RCCEx_PLL2_Config>
 800279e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80027a0:	b9d5      	cbnz	r5, 80027d8 <HAL_RCCEx_PeriphCLKConfig+0x680>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027a2:	4a6c      	ldr	r2, [pc, #432]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80027a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80027a6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80027aa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80027ae:	430b      	orrs	r3, r1
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
 80027b2:	e012      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x682>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b8:	d0f2      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80027ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80027be:	d0ef      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80027c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027c4:	d0ec      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      ret = HAL_ERROR;
 80027c6:	2501      	movs	r5, #1
 80027c8:	e7ea      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027ca:	2102      	movs	r1, #2
 80027cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027d0:	f7ff fc3c 	bl	800204c <RCCEx_PLL3_Config>
 80027d4:	4605      	mov	r5, r0
      break;
 80027d6:	e7e3      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      status = ret;
 80027d8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027e0:	d02b      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80027e2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80027e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ea:	d01e      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 80027ec:	d812      	bhi.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80027ee:	b13b      	cbz	r3, 8002800 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80027f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f4:	d117      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027f6:	2100      	movs	r1, #0
 80027f8:	1d20      	adds	r0, r4, #4
 80027fa:	f7ff fba1 	bl	8001f40 <RCCEx_PLL2_Config>
 80027fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002800:	b9d5      	cbnz	r5, 8002838 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002802:	4a54      	ldr	r2, [pc, #336]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002804:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002806:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800280a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800280e:	430b      	orrs	r3, r1
 8002810:	6593      	str	r3, [r2, #88]	; 0x58
 8002812:	e012      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002818:	d0f2      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800281a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800281e:	d0ef      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8002820:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002824:	d0ec      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      ret = HAL_ERROR;
 8002826:	2501      	movs	r5, #1
 8002828:	e7ea      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800282a:	2102      	movs	r1, #2
 800282c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002830:	f7ff fc0c 	bl	800204c <RCCEx_PLL3_Config>
 8002834:	4605      	mov	r5, r0
      break;
 8002836:	e7e3      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      status = ret;
 8002838:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	f013 0f08 	tst.w	r3, #8
 8002840:	d00c      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x704>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002842:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	d027      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x744>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800284c:	4a41      	ldr	r2, [pc, #260]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800284e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002850:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002854:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002858:	430b      	orrs	r3, r1
 800285a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	f013 0f10 	tst.w	r3, #16
 8002862:	d00c      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x726>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002864:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286c:	d01f      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x756>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800286e:	4a39      	ldr	r2, [pc, #228]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002870:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002876:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800287a:	430b      	orrs	r3, r1
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002884:	d033      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x796>
    switch(PeriphClkInit->AdcClockSelection)
 8002886:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288e:	d026      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x786>
 8002890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002894:	d019      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x772>
 8002896:	b19b      	cbz	r3, 80028c0 <HAL_RCCEx_PeriphCLKConfig+0x768>
      ret = HAL_ERROR;
 8002898:	2501      	movs	r5, #1
 800289a:	e016      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x772>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800289c:	2102      	movs	r1, #2
 800289e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028a2:	f7ff fbd3 	bl	800204c <RCCEx_PLL3_Config>
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d0d0      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
          status = HAL_ERROR;
 80028aa:	2601      	movs	r6, #1
 80028ac:	e7ce      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80028ae:	2102      	movs	r1, #2
 80028b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028b4:	f7ff fbca 	bl	800204c <RCCEx_PLL3_Config>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d0d8      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x716>
        status = HAL_ERROR;
 80028bc:	2601      	movs	r6, #1
 80028be:	e7d6      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x716>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028c0:	2100      	movs	r1, #0
 80028c2:	1d20      	adds	r0, r4, #4
 80028c4:	f7ff fb3c 	bl	8001f40 <RCCEx_PLL2_Config>
 80028c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80028ca:	b97d      	cbnz	r5, 80028ec <HAL_RCCEx_PeriphCLKConfig+0x794>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80028ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028d4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80028d8:	430b      	orrs	r3, r1
 80028da:	6593      	str	r3, [r2, #88]	; 0x58
 80028dc:	e007      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x796>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028de:	2102      	movs	r1, #2
 80028e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028e4:	f7ff fbb2 	bl	800204c <RCCEx_PLL3_Config>
 80028e8:	4605      	mov	r5, r0
      break;
 80028ea:	e7ee      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 80028ec:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80028f4:	d023      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch(PeriphClkInit->UsbClockSelection)
 80028f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80028fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028fe:	d016      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8002900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002904:	d009      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8002906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290a:	d001      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = HAL_ERROR;
 800290c:	2501      	movs	r5, #1
 800290e:	e004      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002910:	4a10      	ldr	r2, [pc, #64]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8002912:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800291a:	b97d      	cbnz	r5, 800293c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800291e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002920:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002924:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002928:	430b      	orrs	r3, r1
 800292a:	6553      	str	r3, [r2, #84]	; 0x54
 800292c:	e007      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800292e:	2101      	movs	r1, #1
 8002930:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002934:	f7ff fb8a 	bl	800204c <RCCEx_PLL3_Config>
 8002938:	4605      	mov	r5, r0
      break;
 800293a:	e7ee      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 800293c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002944:	d01d      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x82a>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002946:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002948:	b133      	cbz	r3, 8002958 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294e:	d011      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      ret = HAL_ERROR;
 8002950:	2501      	movs	r5, #1
 8002952:	e006      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002954:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002958:	4a47      	ldr	r2, [pc, #284]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800295a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800295c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002960:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002962:	b96d      	cbnz	r5, 8002980 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002964:	4a44      	ldr	r2, [pc, #272]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002966:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800296e:	430b      	orrs	r3, r1
 8002970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002972:	e006      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002974:	2102      	movs	r1, #2
 8002976:	1d20      	adds	r0, r4, #4
 8002978:	f7ff fae2 	bl	8001f40 <RCCEx_PLL2_Config>
 800297c:	4605      	mov	r5, r0
      break;
 800297e:	e7f0      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      status = ret;
 8002980:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002988:	d10f      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x852>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002990:	d026      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x888>
    switch(PeriphClkInit->RngClockSelection)
 8002992:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002998:	d013      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800299a:	d90f      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x864>
 800299c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a0:	d014      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x874>
 80029a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a6:	d10a      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x866>
 80029a8:	e010      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x874>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80029aa:	2102      	movs	r1, #2
 80029ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029b0:	f7ff fb4c 	bl	800204c <RCCEx_PLL3_Config>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d0e8      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x832>
      status=HAL_ERROR;
 80029b8:	2601      	movs	r6, #1
 80029ba:	e7e6      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch(PeriphClkInit->RngClockSelection)
 80029bc:	b133      	cbz	r3, 80029cc <HAL_RCCEx_PeriphCLKConfig+0x874>
      ret = HAL_ERROR;
 80029be:	2501      	movs	r5, #1
 80029c0:	e004      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80029c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80029cc:	b93d      	cbnz	r5, 80029de <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029ce:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80029d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80029d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80029d8:	430b      	orrs	r3, r1
 80029da:	6553      	str	r3, [r2, #84]	; 0x54
 80029dc:	e000      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x888>
      status = ret;
 80029de:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80029e6:	d006      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80029ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80029ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029f0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80029f2:	430b      	orrs	r3, r1
 80029f4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80029fc:	d007      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002a00:	6913      	ldr	r3, [r2, #16]
 8002a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a06:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002a14:	d006      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a16:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002a18:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8002a2a:	d009      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0f      	blt.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x90e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002a4c:	d007      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x906>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002a50:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002a52:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a56:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 8002a5e:	b106      	cbz	r6, 8002a62 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  return HAL_ERROR;
 8002a60:	2601      	movs	r6, #1
}
 8002a62:	4630      	mov	r0, r6
 8002a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8002a68:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002a6a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a6e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a70:	430b      	orrs	r3, r1
 8002a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a74:	e7e7      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002a76:	bf00      	nop
 8002a78:	58024400 	.word	0x58024400

08002a7c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002a7c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002a7e:	f7ff fa3d 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	f003 031f 	and.w	r3, r3, #31
}
 8002a92:	40d8      	lsrs	r0, r3
 8002a94:	bd08      	pop	{r3, pc}
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	08005e68 	.word	0x08005e68

08002aa0 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8002aa0:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aa2:	4977      	ldr	r1, [pc, #476]	; (8002c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8002aa4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002aa6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002aa8:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002aac:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8002aae:	f3c5 1500 	ubfx	r5, r5, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002ab2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002ab4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002ab8:	fb03 f305 	mul.w	r3, r3, r5
  if (pll2m != 0U)
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	f000 80da 	beq.w	8002c76 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
 8002ac2:	f004 0403 	and.w	r4, r4, #3
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8002ace:	2c01      	cmp	r4, #1
 8002ad0:	d066      	beq.n	8002ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8002ad2:	b1fc      	cbz	r4, 8002b14 <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 8002ad4:	2c02      	cmp	r4, #2
 8002ad6:	f000 80b1 	beq.w	8002c3c <HAL_RCCEx_GetPLL2ClockFreq+0x19c>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002ada:	ee07 2a10 	vmov	s14, r2
 8002ade:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ae2:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8002c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8002ae6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af2:	ee07 3a10 	vmov	s14, r3
 8002af6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002afa:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8002c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8002afe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8002b12:	e061      	b.n	8002bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b14:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f013 0f20 	tst.w	r3, #32
 8002b1c:	d023      	beq.n	8002b66 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b1e:	4c58      	ldr	r4, [pc, #352]	; (8002c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8002b20:	6821      	ldr	r1, [r4, #0]
 8002b22:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002b26:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8002b28:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b2a:	ee07 3a10 	vmov	s14, r3
 8002b2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002b32:	ee06 2a90 	vmov	s13, r2
 8002b36:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8002b3a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8002b3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b44:	ee07 3a10 	vmov	s14, r3
 8002b48:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002b4c:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8002c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8002b50:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b64:	e038      	b.n	8002bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b66:	ee07 2a10 	vmov	s14, r2
 8002b6a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002b6e:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8002c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8002b72:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002b76:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7e:	ee07 3a10 	vmov	s14, r3
 8002b82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002b86:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8002c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8002b8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b9e:	e01b      	b.n	8002bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002ba0:	ee07 2a10 	vmov	s14, r2
 8002ba4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ba8:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8002c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8002bac:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002bb0:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	ee07 3a10 	vmov	s14, r3
 8002bbc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002bc0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8002bc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002bd8:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8002bda:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002bdc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002be0:	ee07 3a10 	vmov	s14, r3
 8002be4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002be8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002bec:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf8:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002bfc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002bfe:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002c02:	ee07 3a10 	vmov	s14, r3
 8002c06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002c0a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c16:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002c1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002c1c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c28:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c30:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002c34:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002c38:	bc30      	pop	{r4, r5}
 8002c3a:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002c3c:	ee07 2a10 	vmov	s14, r2
 8002c40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002c44:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8002c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8002c48:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c54:	ee07 3a10 	vmov	s14, r3
 8002c58:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002c5c:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8002c88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8002c60:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c70:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8002c74:	e7b0      	b.n	8002bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002c7a:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002c7c:	6083      	str	r3, [r0, #8]
}
 8002c7e:	e7db      	b.n	8002c38 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8002c80:	58024400 	.word	0x58024400
 8002c84:	4a742400 	.word	0x4a742400
 8002c88:	39000000 	.word	0x39000000
 8002c8c:	03d09000 	.word	0x03d09000
 8002c90:	4c742400 	.word	0x4c742400
 8002c94:	4af42400 	.word	0x4af42400

08002c98 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8002c98:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c9a:	4977      	ldr	r1, [pc, #476]	; (8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8002c9c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002c9e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002ca0:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002ca4:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8002ca6:	f3c5 2500 	ubfx	r5, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002caa:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8002cac:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002cb0:	fb03 f305 	mul.w	r3, r3, r5
  if (pll3m != 0U)
 8002cb4:	2a00      	cmp	r2, #0
 8002cb6:	f000 80da 	beq.w	8002e6e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
 8002cba:	f004 0403 	and.w	r4, r4, #3
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8002cc6:	2c01      	cmp	r4, #1
 8002cc8:	d066      	beq.n	8002d98 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8002cca:	b1fc      	cbz	r4, 8002d0c <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8002ccc:	2c02      	cmp	r4, #2
 8002cce:	f000 80b1 	beq.w	8002e34 <HAL_RCCEx_GetPLL3ClockFreq+0x19c>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002cd2:	ee07 2a10 	vmov	s14, r2
 8002cd6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002cda:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8002e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8002cde:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cea:	ee07 3a10 	vmov	s14, r3
 8002cee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002cf2:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8002e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8002cf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d06:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8002d0a:	e061      	b.n	8002dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f013 0f20 	tst.w	r3, #32
 8002d14:	d023      	beq.n	8002d5e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d16:	4c58      	ldr	r4, [pc, #352]	; (8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8002d18:	6821      	ldr	r1, [r4, #0]
 8002d1a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002d1e:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 8002d20:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d22:	ee07 3a10 	vmov	s14, r3
 8002d26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002d2a:	ee06 2a90 	vmov	s13, r2
 8002d2e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8002d32:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8002d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3c:	ee07 3a10 	vmov	s14, r3
 8002d40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002d44:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8002e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8002d48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d5c:	e038      	b.n	8002dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d5e:	ee07 2a10 	vmov	s14, r2
 8002d62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002d66:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8002e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8002d6a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002d6e:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d76:	ee07 3a10 	vmov	s14, r3
 8002d7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002d7e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8002e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8002d82:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d96:	e01b      	b.n	8002dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002d98:	ee07 2a10 	vmov	s14, r2
 8002d9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002da0:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8002e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8002da4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002da8:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	ee07 3a10 	vmov	s14, r3
 8002db4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002db8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8002dbc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002dd0:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8002dd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002dd4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002dd8:	ee07 3a10 	vmov	s14, r3
 8002ddc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002de0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002de4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df0:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002df4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002df6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002dfa:	ee07 3a10 	vmov	s14, r3
 8002dfe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002e02:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0e:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002e12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e14:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e20:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e28:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002e2c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002e30:	bc30      	pop	{r4, r5}
 8002e32:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002e34:	ee07 2a10 	vmov	s14, r2
 8002e38:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002e3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8002e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8002e40:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4c:	ee07 3a10 	vmov	s14, r3
 8002e50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002e54:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8002e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8002e58:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e68:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8002e6c:	e7b0      	b.n	8002dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002e72:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002e74:	6083      	str	r3, [r0, #8]
}
 8002e76:	e7db      	b.n	8002e30 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	4a742400 	.word	0x4a742400
 8002e80:	39000000 	.word	0x39000000
 8002e84:	03d09000 	.word	0x03d09000
 8002e88:	4c742400 	.word	0x4c742400
 8002e8c:	4af42400 	.word	0x4af42400

08002e90 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8002e90:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e92:	4977      	ldr	r1, [pc, #476]	; (8003070 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8002e94:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8002e96:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002e98:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002e9c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8002e9e:	f005 0501 	and.w	r5, r5, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ea2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002ea4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002ea8:	fb03 f305 	mul.w	r3, r3, r5
  if (pll1m != 0U)
 8002eac:	2a00      	cmp	r2, #0
 8002eae:	f000 80da 	beq.w	8003066 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
 8002eb2:	f004 0403 	and.w	r4, r4, #3
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8002ebe:	2c01      	cmp	r4, #1
 8002ec0:	d066      	beq.n	8002f90 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8002ec2:	b1fc      	cbz	r4, 8002f04 <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 8002ec4:	2c02      	cmp	r4, #2
 8002ec6:	f000 80b1 	beq.w	800302c <HAL_RCCEx_GetPLL1ClockFreq+0x19c>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eca:	ee07 2a10 	vmov	s14, r2
 8002ece:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ed2:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8003074 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8002ed6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002eda:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	ee07 3a10 	vmov	s14, r3
 8002ee6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002eea:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8003078 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8002eee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002efe:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8002f02:	e061      	b.n	8002fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f04:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f013 0f20 	tst.w	r3, #32
 8002f0c:	d023      	beq.n	8002f56 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f0e:	4c58      	ldr	r4, [pc, #352]	; (8003070 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8002f10:	6821      	ldr	r1, [r4, #0]
 8002f12:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002f16:	4b59      	ldr	r3, [pc, #356]	; (800307c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 8002f18:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f1a:	ee07 3a10 	vmov	s14, r3
 8002f1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002f22:	ee06 2a90 	vmov	s13, r2
 8002f26:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8002f2a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8002f2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f34:	ee07 3a10 	vmov	s14, r3
 8002f38:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002f3c:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8003078 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8002f40:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f54:	e038      	b.n	8002fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f56:	ee07 2a10 	vmov	s14, r2
 8002f5a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002f5e:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8003074 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8002f62:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002f66:	4b42      	ldr	r3, [pc, #264]	; (8003070 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6e:	ee07 3a10 	vmov	s14, r3
 8002f72:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002f76:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003078 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8002f7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f8e:	e01b      	b.n	8002fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f90:	ee07 2a10 	vmov	s14, r2
 8002f94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002f98:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8003080 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8002f9c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa8:	ee07 3a10 	vmov	s14, r3
 8002fac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002fb0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8003078 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8002fb4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8002fca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002fcc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002fd0:	ee07 3a10 	vmov	s14, r3
 8002fd4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002fd8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002fdc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe8:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8002fec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002fee:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002ff2:	ee07 3a10 	vmov	s14, r3
 8002ff6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ffa:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003006:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800300a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800300c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003018:	ee77 7a86 	vadd.f32	s15, s15, s12
 800301c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003020:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003024:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003028:	bc30      	pop	{r4, r5}
 800302a:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800302c:	ee07 2a10 	vmov	s14, r2
 8003030:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003034:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003084 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8003038:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003044:	ee07 3a10 	vmov	s14, r3
 8003048:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800304c:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8003078 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8003050:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800305c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003060:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003064:	e7b0      	b.n	8002fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800306a:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800306c:	6083      	str	r3, [r0, #8]
}
 800306e:	e7db      	b.n	8003028 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8003070:	58024400 	.word	0x58024400
 8003074:	4c742400 	.word	0x4c742400
 8003078:	39000000 	.word	0x39000000
 800307c:	03d09000 	.word	0x03d09000
 8003080:	4a742400 	.word	0x4a742400
 8003084:	4af42400 	.word	0x4af42400

08003088 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8003088:	b500      	push	{lr}
 800308a:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800308c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003090:	d020      	beq.n	80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003092:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003096:	d074      	beq.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003098:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800309c:	f000 80cd 	beq.w	800323a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80030a0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80030a4:	f000 8128 	beq.w	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80030a8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80030ac:	f000 818b 	beq.w	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80030b0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80030b4:	f000 81e6 	beq.w	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80030b8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80030bc:	f000 822a 	beq.w	8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80030c0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80030c4:	f000 8245 	beq.w	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80030c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80030cc:	f000 828d 	beq.w	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0x562>
      frequency = 0;
 80030d0:	2000      	movs	r0, #0
 80030d2:	e00c      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80030d4:	4ba7      	ldr	r3, [pc, #668]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80030d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80030d8:	f000 0007 	and.w	r0, r0, #7
      switch (saiclocksource)
 80030dc:	2804      	cmp	r0, #4
 80030de:	f200 82bb 	bhi.w	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 80030e2:	e8df f000 	tbb	[pc, r0]
 80030e6:	1107      	.short	0x1107
 80030e8:	031d      	.short	0x031d
 80030ea:	29          	.byte	0x29
 80030eb:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 80030ec:	48a2      	ldr	r0, [pc, #648]	; (8003378 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
}
 80030ee:	b00b      	add	sp, #44	; 0x2c
 80030f0:	f85d fb04 	ldr.w	pc, [sp], #4
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80030f4:	4b9f      	ldr	r3, [pc, #636]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030fc:	d0f7      	beq.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80030fe:	a807      	add	r0, sp, #28
 8003100:	f7ff fec6 	bl	8002e90 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8003104:	9808      	ldr	r0, [sp, #32]
 8003106:	e7f2      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003108:	4b9a      	ldr	r3, [pc, #616]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003110:	d101      	bne.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
           frequency = 0;
 8003112:	2000      	movs	r0, #0
 8003114:	e7eb      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003116:	a804      	add	r0, sp, #16
 8003118:	f7ff fcc2 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800311c:	9804      	ldr	r0, [sp, #16]
 800311e:	e7e6      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003120:	4b94      	ldr	r3, [pc, #592]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
           frequency = 0;
 800312a:	2000      	movs	r0, #0
 800312c:	e7df      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800312e:	a801      	add	r0, sp, #4
 8003130:	f7ff fdb2 	bl	8002c98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003134:	9801      	ldr	r0, [sp, #4]
 8003136:	e7da      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003138:	4a8e      	ldr	r2, [pc, #568]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800313a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800313c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	f012 0f04 	tst.w	r2, #4
 8003146:	d000      	beq.n	800314a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8003148:	b1a3      	cbz	r3, 8003174 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800314a:	4a8a      	ldr	r2, [pc, #552]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003152:	d003      	beq.n	800315c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8003154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003158:	f000 8280 	beq.w	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800315c:	4a85      	ldr	r2, [pc, #532]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003164:	f000 827c 	beq.w	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8003168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800316c:	f000 827a 	beq.w	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            frequency = 0;
 8003170:	2000      	movs	r0, #0
 8003172:	e7bc      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003174:	4b7f      	ldr	r3, [pc, #508]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800317c:	487f      	ldr	r0, [pc, #508]	; (800337c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800317e:	40d8      	lsrs	r0, r3
 8003180:	e7b5      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003182:	4b7c      	ldr	r3, [pc, #496]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003184:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003186:	f400 70e0 	and.w	r0, r0, #448	; 0x1c0
      switch (saiclocksource)
 800318a:	2880      	cmp	r0, #128	; 0x80
 800318c:	d042      	beq.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800318e:	d80a      	bhi.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8003190:	b380      	cbz	r0, 80031f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8003192:	2840      	cmp	r0, #64	; 0x40
 8003194:	f040 8268 	bne.w	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003198:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80031a0:	d133      	bne.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
           frequency = 0;
 80031a2:	2000      	movs	r0, #0
 80031a4:	e7a3      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (saiclocksource)
 80031a6:	28c0      	cmp	r0, #192	; 0xc0
 80031a8:	d022      	beq.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80031aa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80031ae:	f040 825b 	bne.w	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80031b2:	4a70      	ldr	r2, [pc, #448]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80031b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80031b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	f012 0f04 	tst.w	r2, #4
 80031c0:	d001      	beq.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d032      	beq.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80031c6:	4a6b      	ldr	r2, [pc, #428]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	f412 7f80 	tst.w	r2, #256	; 0x100
 80031ce:	d003      	beq.n	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80031d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d4:	f000 824a 	beq.w	800366c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80031d8:	4a66      	ldr	r2, [pc, #408]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80031e0:	f000 8246 	beq.w	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80031e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e8:	f000 8244 	beq.w	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
            frequency = 0;
 80031ec:	2000      	movs	r0, #0
 80031ee:	e77e      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = EXTERNAL_CLOCK_VALUE;
 80031f0:	4861      	ldr	r0, [pc, #388]	; (8003378 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80031f2:	e77c      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80031f4:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80031fc:	f43f af77 	beq.w	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003200:	a807      	add	r0, sp, #28
 8003202:	f7ff fe45 	bl	8002e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003206:	9808      	ldr	r0, [sp, #32]
 8003208:	e771      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800320a:	a804      	add	r0, sp, #16
 800320c:	f7ff fc48 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003210:	9804      	ldr	r0, [sp, #16]
 8003212:	e76c      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003214:	4b57      	ldr	r3, [pc, #348]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
           frequency = 0;
 800321e:	2000      	movs	r0, #0
 8003220:	e765      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003222:	a801      	add	r0, sp, #4
 8003224:	f7ff fd38 	bl	8002c98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003228:	9801      	ldr	r0, [sp, #4]
 800322a:	e760      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800322c:	4b51      	ldr	r3, [pc, #324]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003234:	4851      	ldr	r0, [pc, #324]	; (800337c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003236:	40d8      	lsrs	r0, r3
 8003238:	e759      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800323a:	4b4e      	ldr	r3, [pc, #312]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800323c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800323e:	f400 0060 	and.w	r0, r0, #14680064	; 0xe00000
      switch (saiclocksource)
 8003242:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8003246:	d044      	beq.n	80032d2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8003248:	d80b      	bhi.n	8003262 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 800324a:	b390      	cbz	r0, 80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 800324c:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 8003250:	f040 8212 	bne.w	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003254:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800325c:	d134      	bne.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
           frequency = 0;
 800325e:	2000      	movs	r0, #0
 8003260:	e745      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (saiclocksource)
 8003262:	f5b0 0fc0 	cmp.w	r0, #6291456	; 0x600000
 8003266:	d022      	beq.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8003268:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800326c:	f040 8204 	bne.w	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003270:	4a40      	ldr	r2, [pc, #256]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003272:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	f012 0f04 	tst.w	r2, #4
 800327e:	d001      	beq.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d032      	beq.n	80032ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003284:	4a3b      	ldr	r2, [pc, #236]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	f412 7f80 	tst.w	r2, #256	; 0x100
 800328c:	d003      	beq.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800328e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003292:	f000 81f3 	beq.w	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003296:	4a37      	ldr	r2, [pc, #220]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800329e:	f000 81ef 	beq.w	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 80032a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a6:	f000 81ed 	beq.w	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 80032aa:	2000      	movs	r0, #0
 80032ac:	e71f      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = EXTERNAL_CLOCK_VALUE;
 80032ae:	4832      	ldr	r0, [pc, #200]	; (8003378 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80032b0:	e71d      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80032b2:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80032ba:	f43f af18 	beq.w	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80032be:	a807      	add	r0, sp, #28
 80032c0:	f7ff fde6 	bl	8002e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80032c4:	9808      	ldr	r0, [sp, #32]
 80032c6:	e712      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80032c8:	a804      	add	r0, sp, #16
 80032ca:	f7ff fbe9 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80032ce:	9804      	ldr	r0, [sp, #16]
 80032d0:	e70d      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80032d2:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80032da:	d101      	bne.n	80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
           frequency = 0;
 80032dc:	2000      	movs	r0, #0
 80032de:	e706      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80032e0:	a801      	add	r0, sp, #4
 80032e2:	f7ff fcd9 	bl	8002c98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80032e6:	9801      	ldr	r0, [sp, #4]
 80032e8:	e701      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80032f2:	4822      	ldr	r0, [pc, #136]	; (800337c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032f4:	40d8      	lsrs	r0, r3
 80032f6:	e6fa      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80032f8:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80032fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80032fc:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
      switch (saiclocksource)
 8003300:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8003304:	d04c      	beq.n	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8003306:	d80c      	bhi.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8003308:	2800      	cmp	r0, #0
 800330a:	d039      	beq.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
 800330c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003310:	f040 81ba 	bne.w	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800331c:	d13b      	bne.n	8003396 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
           frequency = 0;
 800331e:	2000      	movs	r0, #0
 8003320:	e6e5      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (saiclocksource)
 8003322:	f1b0 7f40 	cmp.w	r0, #50331648	; 0x3000000
 8003326:	d022      	beq.n	800336e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8003328:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800332c:	f040 81ac 	bne.w	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003330:	4a10      	ldr	r2, [pc, #64]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003332:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003334:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	f012 0f04 	tst.w	r2, #4
 800333e:	d001      	beq.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d039      	beq.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	f412 7f80 	tst.w	r2, #256	; 0x100
 800334c:	d003      	beq.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800334e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003352:	f000 819b 	beq.w	800368c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003356:	4a07      	ldr	r2, [pc, #28]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800335e:	f000 8197 	beq.w	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
 8003362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003366:	f000 8195 	beq.w	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            frequency = 0;
 800336a:	2000      	movs	r0, #0
 800336c:	e6bf      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = EXTERNAL_CLOCK_VALUE;
 800336e:	4802      	ldr	r0, [pc, #8]	; (8003378 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003370:	e6bd      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8003372:	bf00      	nop
 8003374:	58024400 	.word	0x58024400
 8003378:	00bb8000 	.word	0x00bb8000
 800337c:	03d09000 	.word	0x03d09000
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003380:	4ba4      	ldr	r3, [pc, #656]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003388:	f43f aeb1 	beq.w	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800338c:	a807      	add	r0, sp, #28
 800338e:	f7ff fd7f 	bl	8002e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003392:	9808      	ldr	r0, [sp, #32]
 8003394:	e6ab      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003396:	a804      	add	r0, sp, #16
 8003398:	f7ff fb82 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800339c:	9804      	ldr	r0, [sp, #16]
 800339e:	e6a6      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80033a0:	4b9c      	ldr	r3, [pc, #624]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80033a8:	d101      	bne.n	80033ae <HAL_RCCEx_GetPeriphCLKFreq+0x326>
           frequency = 0;
 80033aa:	2000      	movs	r0, #0
 80033ac:	e69f      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80033ae:	a801      	add	r0, sp, #4
 80033b0:	f7ff fc72 	bl	8002c98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80033b4:	9801      	ldr	r0, [sp, #4]
 80033b6:	e69a      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033b8:	4b96      	ldr	r3, [pc, #600]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80033c0:	4895      	ldr	r0, [pc, #596]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80033c2:	40d8      	lsrs	r0, r3
 80033c4:	e693      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80033c6:	4b93      	ldr	r3, [pc, #588]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80033c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80033ca:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
      switch (srcclk)
 80033ce:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80033d2:	d044      	beq.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80033d4:	d80b      	bhi.n	80033ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80033d6:	b390      	cbz	r0, 800343e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80033d8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80033dc:	f040 815c 	bne.w	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80033e0:	4b8c      	ldr	r3, [pc, #560]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80033e8:	d134      	bne.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
           frequency = 0;
 80033ea:	2000      	movs	r0, #0
 80033ec:	e67f      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 80033ee:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 80033f2:	d022      	beq.n	800343a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80033f4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80033f8:	f040 814e 	bne.w	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80033fc:	4a85      	ldr	r2, [pc, #532]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80033fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	f012 0f04 	tst.w	r2, #4
 800340a:	d001      	beq.n	8003410 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d032      	beq.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003410:	4a80      	ldr	r2, [pc, #512]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800341a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800341e:	f000 813d 	beq.w	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003422:	4a7c      	ldr	r2, [pc, #496]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800342a:	f000 8139 	beq.w	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800342e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003432:	f000 8137 	beq.w	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = 0;
 8003436:	2000      	movs	r0, #0
 8003438:	e659      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = EXTERNAL_CLOCK_VALUE;
 800343a:	4878      	ldr	r0, [pc, #480]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800343c:	e657      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800343e:	4b75      	ldr	r3, [pc, #468]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003446:	f43f ae52 	beq.w	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800344a:	a807      	add	r0, sp, #28
 800344c:	f7ff fd20 	bl	8002e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003450:	9808      	ldr	r0, [sp, #32]
 8003452:	e64c      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003454:	a804      	add	r0, sp, #16
 8003456:	f7ff fb23 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800345a:	9804      	ldr	r0, [sp, #16]
 800345c:	e647      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003466:	d101      	bne.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
           frequency = 0;
 8003468:	2000      	movs	r0, #0
 800346a:	e640      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800346c:	a801      	add	r0, sp, #4
 800346e:	f7ff fc13 	bl	8002c98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003472:	9801      	ldr	r0, [sp, #4]
 8003474:	e63b      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003476:	4b67      	ldr	r3, [pc, #412]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800347e:	4866      	ldr	r0, [pc, #408]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003480:	40d8      	lsrs	r0, r3
 8003482:	e634      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003484:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003486:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003488:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      switch (srcclk)
 800348c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003490:	d00f      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
 8003492:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8003496:	d018      	beq.n	80034ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8003498:	b108      	cbz	r0, 800349e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          frequency = 0;
 800349a:	2000      	movs	r0, #0
 800349c:	e627      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80034a4:	f43f ae23 	beq.w	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80034a8:	a804      	add	r0, sp, #16
 80034aa:	f7ff faf9 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80034ae:	9804      	ldr	r0, [sp, #16]
 80034b0:	e61d      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80034b2:	4b58      	ldr	r3, [pc, #352]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80034ba:	d101      	bne.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
           frequency = 0;
 80034bc:	2000      	movs	r0, #0
 80034be:	e616      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80034c0:	a801      	add	r0, sp, #4
 80034c2:	f7ff fbe9 	bl	8002c98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80034c6:	9803      	ldr	r0, [sp, #12]
 80034c8:	e611      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80034ca:	4a52      	ldr	r2, [pc, #328]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034cc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80034ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	f012 0f04 	tst.w	r2, #4
 80034d8:	d000      	beq.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 80034da:	b1a3      	cbz	r3, 8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80034dc:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80034e4:	d003      	beq.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80034e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ea:	f000 80dd 	beq.w	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80034ee:	4a49      	ldr	r2, [pc, #292]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80034f6:	f000 80d9 	beq.w	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80034fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fe:	f000 80d7 	beq.w	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
            frequency = 0;
 8003502:	2000      	movs	r0, #0
 8003504:	e5f3      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800350e:	4842      	ldr	r0, [pc, #264]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003510:	40d8      	lsrs	r0, r3
 8003512:	e5ec      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003514:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003516:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
      switch (srcclk)
 8003518:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800351c:	d002      	beq.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800351e:	b960      	cbnz	r0, 800353a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          frequency = 0;
 8003520:	2000      	movs	r0, #0
 8003522:	e5e4      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003524:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800352c:	f43f addf 	beq.w	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003530:	a807      	add	r0, sp, #28
 8003532:	f7ff fcad 	bl	8002e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003536:	9808      	ldr	r0, [sp, #32]
 8003538:	e5d9      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003542:	d101      	bne.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
          frequency = 0;
 8003544:	2000      	movs	r0, #0
 8003546:	e5d2      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003548:	a804      	add	r0, sp, #16
 800354a:	f7ff faa9 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800354e:	9806      	ldr	r0, [sp, #24]
 8003550:	e5cd      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800355a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355e:	d01e      	beq.n	800359e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003560:	d90a      	bls.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d032      	beq.n	80035ce <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8003568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800356c:	d036      	beq.n	80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800356e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003572:	d020      	beq.n	80035b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = 0;
 8003574:	2000      	movs	r0, #0
 8003576:	e5ba      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 8003578:	b14b      	cbz	r3, 800358e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800357a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800357e:	d1f9      	bne.n	8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003588:	d104      	bne.n	8003594 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
          frequency = 0;
 800358a:	2000      	movs	r0, #0
 800358c:	e5af      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800358e:	f7ff fa75 	bl	8002a7c <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8003592:	e5ac      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003594:	a804      	add	r0, sp, #16
 8003596:	f7ff fa83 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800359a:	9805      	ldr	r0, [sp, #20]
 800359c:	e5a7      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80035a6:	d101      	bne.n	80035ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = 0;
 80035a8:	2000      	movs	r0, #0
 80035aa:	e5a0      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035ac:	a801      	add	r0, sp, #4
 80035ae:	f7ff fb73 	bl	8002c98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80035b2:	9802      	ldr	r0, [sp, #8]
 80035b4:	e59b      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f013 0f04 	tst.w	r3, #4
 80035be:	d079      	beq.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80035c8:	4813      	ldr	r0, [pc, #76]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80035ca:	40d8      	lsrs	r0, r3
 80035cc:	e58f      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035d6:	d06f      	beq.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          frequency = CSI_VALUE;
 80035d8:	4811      	ldr	r0, [pc, #68]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80035da:	e588      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035dc:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035e4:	d06a      	beq.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          frequency = HSE_VALUE;
 80035e6:	480f      	ldr	r0, [pc, #60]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035e8:	e581      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80035ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80035ee:	f000 5040 	and.w	r0, r0, #805306368	; 0x30000000
      switch (srcclk)
 80035f2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80035f6:	d017      	beq.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80035f8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80035fc:	d020      	beq.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80035fe:	b108      	cbz	r0, 8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
          frequency = 0;
 8003600:	2000      	movs	r0, #0
 8003602:	e574      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800360a:	f43f ad70 	beq.w	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = HSE_VALUE;
 800360e:	4805      	ldr	r0, [pc, #20]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003610:	e56d      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8003612:	bf00      	nop
 8003614:	58024400 	.word	0x58024400
 8003618:	03d09000 	.word	0x03d09000
 800361c:	00bb8000 	.word	0x00bb8000
 8003620:	003d0900 	.word	0x003d0900
 8003624:	007a1200 	.word	0x007a1200
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003630:	d101      	bne.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
          frequency = 0;
 8003632:	2000      	movs	r0, #0
 8003634:	e55b      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003636:	a807      	add	r0, sp, #28
 8003638:	f7ff fc2a 	bl	8002e90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800363c:	9808      	ldr	r0, [sp, #32]
 800363e:	e556      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003640:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          frequency = 0;
 800364a:	2000      	movs	r0, #0
  return frequency;
 800364c:	e54f      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800364e:	a804      	add	r0, sp, #16
 8003650:	f7ff fa26 	bl	8002aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003654:	9805      	ldr	r0, [sp, #20]
 8003656:	e54a      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = 0;
 8003658:	2000      	movs	r0, #0
 800365a:	e548      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = CSI_VALUE;
 800365c:	4819      	ldr	r0, [pc, #100]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 800365e:	e546      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = 0;
 8003660:	2000      	movs	r0, #0
 8003662:	e544      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = HSE_VALUE;
 8003664:	4818      	ldr	r0, [pc, #96]	; (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
 8003666:	e542      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = 0;
 8003668:	2000      	movs	r0, #0
 800366a:	e540      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = CSI_VALUE;
 800366c:	4815      	ldr	r0, [pc, #84]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 800366e:	e53e      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = 0;
 8003670:	2000      	movs	r0, #0
 8003672:	e53c      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = HSE_VALUE;
 8003674:	4814      	ldr	r0, [pc, #80]	; (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
 8003676:	e53a      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = 0;
 8003678:	2000      	movs	r0, #0
 800367a:	e538      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = CSI_VALUE;
 800367c:	4811      	ldr	r0, [pc, #68]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 800367e:	e536      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = 0;
 8003680:	2000      	movs	r0, #0
 8003682:	e534      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = HSE_VALUE;
 8003684:	4810      	ldr	r0, [pc, #64]	; (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
 8003686:	e532      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = 0;
 8003688:	2000      	movs	r0, #0
 800368a:	e530      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = CSI_VALUE;
 800368c:	480d      	ldr	r0, [pc, #52]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 800368e:	e52e      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = 0;
 8003690:	2000      	movs	r0, #0
 8003692:	e52c      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = HSE_VALUE;
 8003694:	480c      	ldr	r0, [pc, #48]	; (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
 8003696:	e52a      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = 0;
 8003698:	2000      	movs	r0, #0
 800369a:	e528      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = CSI_VALUE;
 800369c:	4809      	ldr	r0, [pc, #36]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 800369e:	e526      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = 0;
 80036a0:	2000      	movs	r0, #0
 80036a2:	e524      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = HSE_VALUE;
 80036a4:	4808      	ldr	r0, [pc, #32]	; (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
 80036a6:	e522      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = CSI_VALUE;
 80036a8:	4806      	ldr	r0, [pc, #24]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 80036aa:	e520      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = 0;
 80036ac:	2000      	movs	r0, #0
 80036ae:	e51e      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
            frequency = HSE_VALUE;
 80036b0:	4805      	ldr	r0, [pc, #20]	; (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
 80036b2:	e51c      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = 0;
 80036b4:	2000      	movs	r0, #0
 80036b6:	e51a      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
           frequency = 0;
 80036b8:	2000      	movs	r0, #0
 80036ba:	e518      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
          frequency = 0;
 80036bc:	2000      	movs	r0, #0
 80036be:	e516      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 80036c0:	58024400 	.word	0x58024400
 80036c4:	003d0900 	.word	0x003d0900
 80036c8:	007a1200 	.word	0x007a1200

080036cc <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80036cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80036ce:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80036d0:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80036d2:	3008      	adds	r0, #8
 80036d4:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 80036d6:	fb03 0000 	mla	r0, r3, r0, r0
 80036da:	4770      	bx	lr

080036dc <HAL_SPI_Init>:
  if (hspi == NULL)
 80036dc:	2800      	cmp	r0, #0
 80036de:	f000 80a1 	beq.w	8003824 <HAL_SPI_Init+0x148>
{
 80036e2:	b570      	push	{r4, r5, r6, lr}
 80036e4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80036ea:	6805      	ldr	r5, [r0, #0]
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_SPI_Init+0x154>)
 80036ee:	4e51      	ldr	r6, [pc, #324]	; (8003834 <HAL_SPI_Init+0x158>)
 80036f0:	429d      	cmp	r5, r3
 80036f2:	bf18      	it	ne
 80036f4:	42b5      	cmpne	r5, r6
 80036f6:	bf14      	ite	ne
 80036f8:	2601      	movne	r6, #1
 80036fa:	2600      	moveq	r6, #0
 80036fc:	d007      	beq.n	800370e <HAL_SPI_Init+0x32>
 80036fe:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8003702:	429d      	cmp	r5, r3
 8003704:	d003      	beq.n	800370e <HAL_SPI_Init+0x32>
 8003706:	68c3      	ldr	r3, [r0, #12]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	f200 808d 	bhi.w	8003828 <HAL_SPI_Init+0x14c>
  packet_length = SPI_GetPacketSize(hspi);
 800370e:	4620      	mov	r0, r4
 8003710:	f7ff ffdc 	bl	80036cc <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003714:	b12e      	cbz	r6, 8003722 <HAL_SPI_Init+0x46>
 8003716:	4b48      	ldr	r3, [pc, #288]	; (8003838 <HAL_SPI_Init+0x15c>)
 8003718:	429d      	cmp	r5, r3
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Init+0x46>
 800371c:	2808      	cmp	r0, #8
 800371e:	f200 8085 	bhi.w	800382c <HAL_SPI_Init+0x150>
 8003722:	4b44      	ldr	r3, [pc, #272]	; (8003834 <HAL_SPI_Init+0x158>)
 8003724:	4a42      	ldr	r2, [pc, #264]	; (8003830 <HAL_SPI_Init+0x154>)
 8003726:	429d      	cmp	r5, r3
 8003728:	bf18      	it	ne
 800372a:	4295      	cmpne	r5, r2
 800372c:	d05c      	beq.n	80037e8 <HAL_SPI_Init+0x10c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800372e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003732:	429d      	cmp	r5, r3
 8003734:	d058      	beq.n	80037e8 <HAL_SPI_Init+0x10c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003736:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800373a:	2b00      	cmp	r3, #0
 800373c:	d058      	beq.n	80037f0 <HAL_SPI_Init+0x114>
  hspi->State = HAL_SPI_STATE_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8003744:	6822      	ldr	r2, [r4, #0]
 8003746:	6813      	ldr	r3, [r2, #0]
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800374e:	69a3      	ldr	r3, [r4, #24]
 8003750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003754:	d052      	beq.n	80037fc <HAL_SPI_Init+0x120>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	69e3      	ldr	r3, [r4, #28]
 800375a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800375c:	430b      	orrs	r3, r1
 800375e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003760:	430b      	orrs	r3, r1
 8003762:	68e1      	ldr	r1, [r4, #12]
 8003764:	430b      	orrs	r3, r1
 8003766:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800376c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800376e:	430b      	orrs	r3, r1
 8003770:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003772:	430b      	orrs	r3, r1
 8003774:	69a1      	ldr	r1, [r4, #24]
 8003776:	430b      	orrs	r3, r1
 8003778:	6921      	ldr	r1, [r4, #16]
 800377a:	430b      	orrs	r3, r1
 800377c:	6961      	ldr	r1, [r4, #20]
 800377e:	430b      	orrs	r3, r1
 8003780:	6a21      	ldr	r1, [r4, #32]
 8003782:	430b      	orrs	r3, r1
 8003784:	6861      	ldr	r1, [r4, #4]
 8003786:	430b      	orrs	r3, r1
 8003788:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800378a:	430b      	orrs	r3, r1
 800378c:	68a1      	ldr	r1, [r4, #8]
 800378e:	430b      	orrs	r3, r1
 8003790:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003792:	430b      	orrs	r3, r1
 8003794:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003796:	430b      	orrs	r3, r1
 8003798:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800379a:	6863      	ldr	r3, [r4, #4]
 800379c:	b96b      	cbnz	r3, 80037ba <HAL_SPI_Init+0xde>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	6893      	ldr	r3, [r2, #8]
 80037a2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80037a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037aa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80037ac:	6822      	ldr	r2, [r4, #0]
 80037ae:	6893      	ldr	r3, [r2, #8]
 80037b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80037c4:	6863      	ldr	r3, [r4, #4]
 80037c6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80037ca:	d006      	beq.n	80037da <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	68d3      	ldr	r3, [r2, #12]
 80037d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80037d6:	430b      	orrs	r3, r1
 80037d8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037da:	2000      	movs	r0, #0
 80037dc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80037e8:	2810      	cmp	r0, #16
 80037ea:	d9a4      	bls.n	8003736 <HAL_SPI_Init+0x5a>
    return HAL_ERROR;
 80037ec:	2001      	movs	r0, #1
}
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80037f0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80037f4:	4620      	mov	r0, r4
 80037f6:	f001 fc0f 	bl	8005018 <HAL_SPI_MspInit>
 80037fa:	e7a0      	b.n	800373e <HAL_SPI_Init+0x62>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d006      	beq.n	8003812 <HAL_SPI_Init+0x136>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1a6      	bne.n	8003756 <HAL_SPI_Init+0x7a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800380a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800380e:	d1a2      	bne.n	8003756 <HAL_SPI_Init+0x7a>
 8003810:	e002      	b.n	8003818 <HAL_SPI_Init+0x13c>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003812:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003814:	2a00      	cmp	r2, #0
 8003816:	d1f5      	bne.n	8003804 <HAL_SPI_Init+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003818:	6822      	ldr	r2, [r4, #0]
 800381a:	6813      	ldr	r3, [r2, #0]
 800381c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e798      	b.n	8003756 <HAL_SPI_Init+0x7a>
    return HAL_ERROR;
 8003824:	2001      	movs	r0, #1
 8003826:	4770      	bx	lr
    return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800382c:	2001      	movs	r0, #1
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	40013000 	.word	0x40013000
 8003834:	40003800 	.word	0x40003800
 8003838:	40003c00 	.word	0x40003c00

0800383c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800383c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	6a03      	ldr	r3, [r0, #32]
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384a:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800384c:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <TIM_OC1_SetConfig+0x8c>)
 800384e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	680d      	ldr	r5, [r1, #0]
 8003852:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003854:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003858:	688a      	ldr	r2, [r1, #8]
 800385a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800385c:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <TIM_OC1_SetConfig+0x90>)
 800385e:	4e1c      	ldr	r6, [pc, #112]	; (80038d0 <TIM_OC1_SetConfig+0x94>)
 8003860:	42b0      	cmp	r0, r6
 8003862:	bf18      	it	ne
 8003864:	4290      	cmpne	r0, r2
 8003866:	bf0c      	ite	eq
 8003868:	2201      	moveq	r2, #1
 800386a:	2200      	movne	r2, #0
 800386c:	d00c      	beq.n	8003888 <TIM_OC1_SetConfig+0x4c>
 800386e:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8003872:	42b0      	cmp	r0, r6
 8003874:	bf14      	ite	ne
 8003876:	2600      	movne	r6, #0
 8003878:	2601      	moveq	r6, #1
 800387a:	4f16      	ldr	r7, [pc, #88]	; (80038d4 <TIM_OC1_SetConfig+0x98>)
 800387c:	42b8      	cmp	r0, r7
 800387e:	d003      	beq.n	8003888 <TIM_OC1_SetConfig+0x4c>
 8003880:	b916      	cbnz	r6, 8003888 <TIM_OC1_SetConfig+0x4c>
 8003882:	4e15      	ldr	r6, [pc, #84]	; (80038d8 <TIM_OC1_SetConfig+0x9c>)
 8003884:	42b0      	cmp	r0, r6
 8003886:	d105      	bne.n	8003894 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003888:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800388c:	68ce      	ldr	r6, [r1, #12]
 800388e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003890:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003894:	b95a      	cbnz	r2, 80038ae <TIM_OC1_SetConfig+0x72>
 8003896:	4a11      	ldr	r2, [pc, #68]	; (80038dc <TIM_OC1_SetConfig+0xa0>)
 8003898:	4290      	cmp	r0, r2
 800389a:	bf14      	ite	ne
 800389c:	2200      	movne	r2, #0
 800389e:	2201      	moveq	r2, #1
 80038a0:	4e0c      	ldr	r6, [pc, #48]	; (80038d4 <TIM_OC1_SetConfig+0x98>)
 80038a2:	42b0      	cmp	r0, r6
 80038a4:	d003      	beq.n	80038ae <TIM_OC1_SetConfig+0x72>
 80038a6:	b912      	cbnz	r2, 80038ae <TIM_OC1_SetConfig+0x72>
 80038a8:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <TIM_OC1_SetConfig+0x9c>)
 80038aa:	4290      	cmp	r0, r2
 80038ac:	d105      	bne.n	80038ba <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038b2:	694a      	ldr	r2, [r1, #20]
 80038b4:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038b6:	698a      	ldr	r2, [r1, #24]
 80038b8:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038bc:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038be:	684a      	ldr	r2, [r1, #4]
 80038c0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c2:	6203      	str	r3, [r0, #32]
}
 80038c4:	bcf0      	pop	{r4, r5, r6, r7}
 80038c6:	4770      	bx	lr
 80038c8:	fffeff8c 	.word	0xfffeff8c
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40010400 	.word	0x40010400
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014800 	.word	0x40014800
 80038dc:	40014400 	.word	0x40014400

080038e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038e2:	6a03      	ldr	r3, [r0, #32]
 80038e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038f0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f4:	680e      	ldr	r6, [r1, #0]
 80038f6:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038fc:	688a      	ldr	r2, [r1, #8]
 80038fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003902:	4a16      	ldr	r2, [pc, #88]	; (800395c <TIM_OC3_SetConfig+0x7c>)
 8003904:	4d16      	ldr	r5, [pc, #88]	; (8003960 <TIM_OC3_SetConfig+0x80>)
 8003906:	42a8      	cmp	r0, r5
 8003908:	bf18      	it	ne
 800390a:	4290      	cmpne	r0, r2
 800390c:	bf0c      	ite	eq
 800390e:	2201      	moveq	r2, #1
 8003910:	2200      	movne	r2, #0
 8003912:	d106      	bne.n	8003922 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003918:	68cd      	ldr	r5, [r1, #12]
 800391a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003922:	b95a      	cbnz	r2, 800393c <TIM_OC3_SetConfig+0x5c>
 8003924:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <TIM_OC3_SetConfig+0x84>)
 8003926:	4290      	cmp	r0, r2
 8003928:	bf14      	ite	ne
 800392a:	2200      	movne	r2, #0
 800392c:	2201      	moveq	r2, #1
 800392e:	4d0e      	ldr	r5, [pc, #56]	; (8003968 <TIM_OC3_SetConfig+0x88>)
 8003930:	42a8      	cmp	r0, r5
 8003932:	d003      	beq.n	800393c <TIM_OC3_SetConfig+0x5c>
 8003934:	b912      	cbnz	r2, 800393c <TIM_OC3_SetConfig+0x5c>
 8003936:	4a0d      	ldr	r2, [pc, #52]	; (800396c <TIM_OC3_SetConfig+0x8c>)
 8003938:	4290      	cmp	r0, r2
 800393a:	d107      	bne.n	800394c <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800393c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003940:	694a      	ldr	r2, [r1, #20]
 8003942:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003946:	698a      	ldr	r2, [r1, #24]
 8003948:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394e:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003950:	684a      	ldr	r2, [r1, #4]
 8003952:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003954:	6203      	str	r3, [r0, #32]
}
 8003956:	bc70      	pop	{r4, r5, r6}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40010000 	.word	0x40010000
 8003960:	40010400 	.word	0x40010400
 8003964:	40014400 	.word	0x40014400
 8003968:	40014000 	.word	0x40014000
 800396c:	40014800 	.word	0x40014800

08003970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003972:	6a03      	ldr	r3, [r0, #32]
 8003974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003978:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003980:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003984:	680d      	ldr	r5, [r1, #0]
 8003986:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800398a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800398e:	688d      	ldr	r5, [r1, #8]
 8003990:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003994:	4d0f      	ldr	r5, [pc, #60]	; (80039d4 <TIM_OC4_SetConfig+0x64>)
 8003996:	4e10      	ldr	r6, [pc, #64]	; (80039d8 <TIM_OC4_SetConfig+0x68>)
 8003998:	42a8      	cmp	r0, r5
 800399a:	bf18      	it	ne
 800399c:	42b0      	cmpne	r0, r6
 800399e:	d00d      	beq.n	80039bc <TIM_OC4_SetConfig+0x4c>
 80039a0:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 80039a4:	42a8      	cmp	r0, r5
 80039a6:	bf14      	ite	ne
 80039a8:	2500      	movne	r5, #0
 80039aa:	2501      	moveq	r5, #1
 80039ac:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 80039b0:	42b0      	cmp	r0, r6
 80039b2:	d003      	beq.n	80039bc <TIM_OC4_SetConfig+0x4c>
 80039b4:	b915      	cbnz	r5, 80039bc <TIM_OC4_SetConfig+0x4c>
 80039b6:	4d09      	ldr	r5, [pc, #36]	; (80039dc <TIM_OC4_SetConfig+0x6c>)
 80039b8:	42a8      	cmp	r0, r5
 80039ba:	d104      	bne.n	80039c6 <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039bc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c0:	694d      	ldr	r5, [r1, #20]
 80039c2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ca:	684a      	ldr	r2, [r1, #4]
 80039cc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ce:	6203      	str	r3, [r0, #32]
}
 80039d0:	bc70      	pop	{r4, r5, r6}
 80039d2:	4770      	bx	lr
 80039d4:	40010400 	.word	0x40010400
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039e2:	6a03      	ldr	r3, [r0, #32]
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ee:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f4:	680d      	ldr	r5, [r1, #0]
 80039f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039fc:	688d      	ldr	r5, [r1, #8]
 80039fe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a02:	4d10      	ldr	r5, [pc, #64]	; (8003a44 <TIM_OC5_SetConfig+0x64>)
 8003a04:	4e10      	ldr	r6, [pc, #64]	; (8003a48 <TIM_OC5_SetConfig+0x68>)
 8003a06:	42a8      	cmp	r0, r5
 8003a08:	bf18      	it	ne
 8003a0a:	42b0      	cmpne	r0, r6
 8003a0c:	d00d      	beq.n	8003a2a <TIM_OC5_SetConfig+0x4a>
 8003a0e:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8003a12:	42a8      	cmp	r0, r5
 8003a14:	bf14      	ite	ne
 8003a16:	2500      	movne	r5, #0
 8003a18:	2501      	moveq	r5, #1
 8003a1a:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8003a1e:	42b0      	cmp	r0, r6
 8003a20:	d003      	beq.n	8003a2a <TIM_OC5_SetConfig+0x4a>
 8003a22:	b915      	cbnz	r5, 8003a2a <TIM_OC5_SetConfig+0x4a>
 8003a24:	4d09      	ldr	r5, [pc, #36]	; (8003a4c <TIM_OC5_SetConfig+0x6c>)
 8003a26:	42a8      	cmp	r0, r5
 8003a28:	d104      	bne.n	8003a34 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a2a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a2e:	694d      	ldr	r5, [r1, #20]
 8003a30:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a36:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a38:	684a      	ldr	r2, [r1, #4]
 8003a3a:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3c:	6203      	str	r3, [r0, #32]
}
 8003a3e:	bc70      	pop	{r4, r5, r6}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40010400 	.word	0x40010400
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40014800 	.word	0x40014800

08003a50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a52:	6a03      	ldr	r3, [r0, #32]
 8003a54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a58:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a5c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a5e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a60:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	680d      	ldr	r5, [r1, #0]
 8003a66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a6e:	688d      	ldr	r5, [r1, #8]
 8003a70:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	4d0f      	ldr	r5, [pc, #60]	; (8003ab4 <TIM_OC6_SetConfig+0x64>)
 8003a76:	4e10      	ldr	r6, [pc, #64]	; (8003ab8 <TIM_OC6_SetConfig+0x68>)
 8003a78:	42a8      	cmp	r0, r5
 8003a7a:	bf18      	it	ne
 8003a7c:	42b0      	cmpne	r0, r6
 8003a7e:	d00d      	beq.n	8003a9c <TIM_OC6_SetConfig+0x4c>
 8003a80:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8003a84:	42a8      	cmp	r0, r5
 8003a86:	bf14      	ite	ne
 8003a88:	2500      	movne	r5, #0
 8003a8a:	2501      	moveq	r5, #1
 8003a8c:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8003a90:	42b0      	cmp	r0, r6
 8003a92:	d003      	beq.n	8003a9c <TIM_OC6_SetConfig+0x4c>
 8003a94:	b915      	cbnz	r5, 8003a9c <TIM_OC6_SetConfig+0x4c>
 8003a96:	4d09      	ldr	r5, [pc, #36]	; (8003abc <TIM_OC6_SetConfig+0x6c>)
 8003a98:	42a8      	cmp	r0, r5
 8003a9a:	d104      	bne.n	8003aa6 <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a9c:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003aa0:	694d      	ldr	r5, [r1, #20]
 8003aa2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aa8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003aaa:	684a      	ldr	r2, [r1, #4]
 8003aac:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aae:	6203      	str	r3, [r0, #32]
}
 8003ab0:	bc70      	pop	{r4, r5, r6}
 8003ab2:	4770      	bx	lr
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40014800 	.word	0x40014800

08003ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ac2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac4:	6a04      	ldr	r4, [r0, #32]
 8003ac6:	f024 0401 	bic.w	r4, r4, #1
 8003aca:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003acc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ace:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003ada:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003adc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ade:	6203      	str	r3, [r0, #32]
}
 8003ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae8:	6a03      	ldr	r3, [r0, #32]
 8003aea:	f023 0310 	bic.w	r3, r3, #16
 8003aee:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003af2:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b00:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b04:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b06:	6203      	str	r3, [r0, #32]
}
 8003b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b10:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b12:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <TIM_ITRx_SetConfig+0x10>)
 8003b14:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b16:	4319      	orrs	r1, r3
 8003b18:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1c:	6081      	str	r1, [r0, #8]
 8003b1e:	4770      	bx	lr
 8003b20:	ffcfff8f 	.word	0xffcfff8f

08003b24 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003b24:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_TIM_Base_Start_IT+0xe>
    return HAL_ERROR;
 8003b2e:	2001      	movs	r0, #1
 8003b30:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8003b32:	2302      	movs	r3, #2
 8003b34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b38:	6802      	ldr	r2, [r0, #0]
 8003b3a:	68d3      	ldr	r3, [r2, #12]
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b42:	6803      	ldr	r3, [r0, #0]
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_TIM_Base_Start_IT+0x80>)
 8003b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4a:	bf18      	it	ne
 8003b4c:	4293      	cmpne	r3, r2
 8003b4e:	d019      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x60>
 8003b50:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d015      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x60>
 8003b58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d011      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x60>
 8003b60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00d      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x60>
 8003b68:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x60>
 8003b70:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d005      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x60>
    __HAL_TIM_ENABLE(htim);
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b80:	2000      	movs	r0, #0
 8003b82:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b84:	6899      	ldr	r1, [r3, #8]
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <HAL_TIM_Base_Start_IT+0x84>)
 8003b88:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	2a06      	cmp	r2, #6
 8003b8c:	bf18      	it	ne
 8003b8e:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8003b92:	d005      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	4770      	bx	lr
 8003ba0:	2000      	movs	r0, #0
}
 8003ba2:	4770      	bx	lr
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	00010007 	.word	0x00010007

08003bac <HAL_TIM_PWM_MspInit>:
{
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_OC_DelayElapsedCallback>:
{
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIM_IC_CaptureCallback>:
{
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_TriggerCallback>:
{
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIM_IRQHandler>:
{
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bba:	6803      	ldr	r3, [r0, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	f012 0f02 	tst.w	r2, #2
 8003bc2:	d011      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	f012 0f02 	tst.w	r2, #2
 8003bca:	d00d      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bcc:	f06f 0202 	mvn.w	r2, #2
 8003bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd6:	6803      	ldr	r3, [r0, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f013 0f03 	tst.w	r3, #3
 8003bde:	d079      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003be0:	f7ff ffe6 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be4:	2300      	movs	r3, #0
 8003be6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	f012 0f04 	tst.w	r2, #4
 8003bf0:	d012      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	f012 0f04 	tst.w	r2, #4
 8003bf8:	d00e      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bfa:	f06f 0204 	mvn.w	r2, #4
 8003bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c00:	2302      	movs	r3, #2
 8003c02:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c0c:	d068      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff ffce 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c14:	2300      	movs	r3, #0
 8003c16:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	f012 0f08 	tst.w	r2, #8
 8003c20:	d012      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	f012 0f08 	tst.w	r2, #8
 8003c28:	d00e      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c2a:	f06f 0208 	mvn.w	r2, #8
 8003c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c30:	2304      	movs	r3, #4
 8003c32:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f013 0f03 	tst.w	r3, #3
 8003c3c:	d057      	beq.n	8003cee <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff ffb6 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c44:	2300      	movs	r3, #0
 8003c46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	f012 0f10 	tst.w	r2, #16
 8003c50:	d012      	beq.n	8003c78 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	f012 0f10 	tst.w	r2, #16
 8003c58:	d00e      	beq.n	8003c78 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c5a:	f06f 0210 	mvn.w	r2, #16
 8003c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c60:	2308      	movs	r3, #8
 8003c62:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c6c:	d046      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f7ff ff9e 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c74:	2300      	movs	r3, #0
 8003c76:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	f012 0f01 	tst.w	r2, #1
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	f012 0f01 	tst.w	r2, #1
 8003c88:	d13f      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c92:	d003      	beq.n	8003c9c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c9a:	d13d      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003cac:	d13b      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003cb6:	d003      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003cbe:	d139      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	f012 0f20 	tst.w	r2, #32
 8003cc8:	d003      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	f012 0f20 	tst.w	r2, #32
 8003cd0:	d137      	bne.n	8003d42 <HAL_TIM_IRQHandler+0x18c>
 8003cd2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd4:	f7ff ff6b 	bl	8003bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7ff ff6a 	bl	8003bb2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cde:	e781      	b.n	8003be4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff ff64 	bl	8003bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f7ff ff63 	bl	8003bb2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cec:	e792      	b.n	8003c14 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7ff ff5d 	bl	8003bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7ff ff5c 	bl	8003bb2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cfa:	e7a3      	b.n	8003c44 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7ff ff56 	bl	8003bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d02:	4620      	mov	r0, r4
 8003d04:	f7ff ff55 	bl	8003bb2 <HAL_TIM_PWM_PulseFinishedCallback>
 8003d08:	e7b4      	b.n	8003c74 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d0a:	f06f 0201 	mvn.w	r2, #1
 8003d0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 ff71 	bl	8004bf8 <HAL_TIM_PeriodElapsedCallback>
 8003d16:	e7b8      	b.n	8003c8a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 faab 	bl	800427a <HAL_TIMEx_BreakCallback>
 8003d24:	e7ba      	b.n	8003c9c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f000 faa5 	bl	800427c <HAL_TIMEx_Break2Callback>
 8003d32:	e7bc      	b.n	8003cae <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d38:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff ff3a 	bl	8003bb4 <HAL_TIM_TriggerCallback>
 8003d40:	e7be      	b.n	8003cc0 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d42:	f06f 0220 	mvn.w	r2, #32
 8003d46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f000 fa95 	bl	8004278 <HAL_TIMEx_CommutCallback>
}
 8003d4e:	e7c0      	b.n	8003cd2 <HAL_TIM_IRQHandler+0x11c>

08003d50 <TIM_Base_SetConfig>:
{
 8003d50:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8003d52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d54:	4d37      	ldr	r5, [pc, #220]	; (8003e34 <TIM_Base_SetConfig+0xe4>)
 8003d56:	42a8      	cmp	r0, r5
 8003d58:	bf14      	ite	ne
 8003d5a:	2500      	movne	r5, #0
 8003d5c:	2501      	moveq	r5, #1
 8003d5e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d62:	bf14      	ite	ne
 8003d64:	462a      	movne	r2, r5
 8003d66:	f045 0201 	orreq.w	r2, r5, #1
 8003d6a:	b9aa      	cbnz	r2, 8003d98 <TIM_Base_SetConfig+0x48>
 8003d6c:	4c32      	ldr	r4, [pc, #200]	; (8003e38 <TIM_Base_SetConfig+0xe8>)
 8003d6e:	42a0      	cmp	r0, r4
 8003d70:	bf14      	ite	ne
 8003d72:	2400      	movne	r4, #0
 8003d74:	2401      	moveq	r4, #1
 8003d76:	4e31      	ldr	r6, [pc, #196]	; (8003e3c <TIM_Base_SetConfig+0xec>)
 8003d78:	42b0      	cmp	r0, r6
 8003d7a:	d00d      	beq.n	8003d98 <TIM_Base_SetConfig+0x48>
 8003d7c:	b964      	cbnz	r4, 8003d98 <TIM_Base_SetConfig+0x48>
 8003d7e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003d82:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8003d86:	42a0      	cmp	r0, r4
 8003d88:	bf14      	ite	ne
 8003d8a:	2400      	movne	r4, #0
 8003d8c:	2401      	moveq	r4, #1
 8003d8e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003d92:	42b0      	cmp	r0, r6
 8003d94:	d000      	beq.n	8003d98 <TIM_Base_SetConfig+0x48>
 8003d96:	b11c      	cbz	r4, 8003da0 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d9c:	684c      	ldr	r4, [r1, #4]
 8003d9e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da0:	bb12      	cbnz	r2, 8003de8 <TIM_Base_SetConfig+0x98>
 8003da2:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <TIM_Base_SetConfig+0xe8>)
 8003da4:	4290      	cmp	r0, r2
 8003da6:	bf14      	ite	ne
 8003da8:	2200      	movne	r2, #0
 8003daa:	2201      	moveq	r2, #1
 8003dac:	4c23      	ldr	r4, [pc, #140]	; (8003e3c <TIM_Base_SetConfig+0xec>)
 8003dae:	42a0      	cmp	r0, r4
 8003db0:	d01a      	beq.n	8003de8 <TIM_Base_SetConfig+0x98>
 8003db2:	b9ca      	cbnz	r2, 8003de8 <TIM_Base_SetConfig+0x98>
 8003db4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003db8:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003dbc:	4290      	cmp	r0, r2
 8003dbe:	bf14      	ite	ne
 8003dc0:	2200      	movne	r2, #0
 8003dc2:	2201      	moveq	r2, #1
 8003dc4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003dc8:	42a0      	cmp	r0, r4
 8003dca:	d00d      	beq.n	8003de8 <TIM_Base_SetConfig+0x98>
 8003dcc:	b962      	cbnz	r2, 8003de8 <TIM_Base_SetConfig+0x98>
 8003dce:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <TIM_Base_SetConfig+0xf0>)
 8003dd0:	4290      	cmp	r0, r2
 8003dd2:	bf14      	ite	ne
 8003dd4:	2200      	movne	r2, #0
 8003dd6:	2201      	moveq	r2, #1
 8003dd8:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8003ddc:	42a0      	cmp	r0, r4
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0x98>
 8003de0:	b912      	cbnz	r2, 8003de8 <TIM_Base_SetConfig+0x98>
 8003de2:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <TIM_Base_SetConfig+0xf4>)
 8003de4:	4290      	cmp	r0, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dec:	68cc      	ldr	r4, [r1, #12]
 8003dee:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df4:	694a      	ldr	r2, [r1, #20]
 8003df6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003df8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfa:	688a      	ldr	r2, [r1, #8]
 8003dfc:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003dfe:	680a      	ldr	r2, [r1, #0]
 8003e00:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <TIM_Base_SetConfig+0xf8>)
 8003e04:	4298      	cmp	r0, r3
 8003e06:	bf14      	ite	ne
 8003e08:	462b      	movne	r3, r5
 8003e0a:	f045 0301 	orreq.w	r3, r5, #1
 8003e0e:	b95b      	cbnz	r3, 8003e28 <TIM_Base_SetConfig+0xd8>
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <TIM_Base_SetConfig+0xf0>)
 8003e12:	4298      	cmp	r0, r3
 8003e14:	bf14      	ite	ne
 8003e16:	2300      	movne	r3, #0
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <TIM_Base_SetConfig+0xfc>)
 8003e1c:	4290      	cmp	r0, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_Base_SetConfig+0xd8>
 8003e20:	b913      	cbnz	r3, 8003e28 <TIM_Base_SetConfig+0xd8>
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <TIM_Base_SetConfig+0xf4>)
 8003e24:	4298      	cmp	r0, r3
 8003e26:	d101      	bne.n	8003e2c <TIM_Base_SetConfig+0xdc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003e28:	690b      	ldr	r3, [r1, #16]
 8003e2a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	6143      	str	r3, [r0, #20]
}
 8003e30:	bc70      	pop	{r4, r5, r6}
 8003e32:	4770      	bx	lr
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40014800 	.word	0x40014800
 8003e48:	40010400 	.word	0x40010400
 8003e4c:	40014000 	.word	0x40014000

08003e50 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003e50:	b358      	cbz	r0, 8003eaa <HAL_TIM_Base_Init+0x5a>
{
 8003e52:	b510      	push	{r4, lr}
 8003e54:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e5a:	b30b      	cbz	r3, 8003ea0 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e62:	1d21      	adds	r1, r4, #4
 8003e64:	6820      	ldr	r0, [r4, #0]
 8003e66:	f7ff ff73 	bl	8003d50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e74:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e90:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003e94:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003e98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003ea0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003ea4:	f001 f9b2 	bl	800520c <HAL_TIM_Base_MspInit>
 8003ea8:	e7d8      	b.n	8003e5c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003eaa:	2001      	movs	r0, #1
 8003eac:	4770      	bx	lr

08003eae <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003eae:	b358      	cbz	r0, 8003f08 <HAL_TIM_PWM_Init+0x5a>
{
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eb8:	b30b      	cbz	r3, 8003efe <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec0:	1d21      	adds	r1, r4, #4
 8003ec2:	6820      	ldr	r0, [r4, #0]
 8003ec4:	f7ff ff44 	bl	8003d50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003ed2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ed6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003eda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003ef2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003ef6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003efa:	2000      	movs	r0, #0
 8003efc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003efe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003f02:	f7ff fe53 	bl	8003bac <HAL_TIM_PWM_MspInit>
 8003f06:	e7d8      	b.n	8003eba <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003f08:	2001      	movs	r0, #1
 8003f0a:	4770      	bx	lr

08003f0c <TIM_OC2_SetConfig>:
{
 8003f0c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0e:	6a03      	ldr	r3, [r0, #32]
 8003f10:	f023 0310 	bic.w	r3, r3, #16
 8003f14:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003f16:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003f18:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f1a:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f1c:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <TIM_OC2_SetConfig+0x7c>)
 8003f1e:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	680e      	ldr	r6, [r1, #0]
 8003f22:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003f26:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f2a:	688a      	ldr	r2, [r1, #8]
 8003f2c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f30:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <TIM_OC2_SetConfig+0x80>)
 8003f32:	4d17      	ldr	r5, [pc, #92]	; (8003f90 <TIM_OC2_SetConfig+0x84>)
 8003f34:	42a8      	cmp	r0, r5
 8003f36:	bf18      	it	ne
 8003f38:	4290      	cmpne	r0, r2
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2201      	moveq	r2, #1
 8003f3e:	2200      	movne	r2, #0
 8003f40:	d106      	bne.n	8003f50 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f46:	68cd      	ldr	r5, [r1, #12]
 8003f48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f50:	b95a      	cbnz	r2, 8003f6a <TIM_OC2_SetConfig+0x5e>
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <TIM_OC2_SetConfig+0x88>)
 8003f54:	4290      	cmp	r0, r2
 8003f56:	bf14      	ite	ne
 8003f58:	2200      	movne	r2, #0
 8003f5a:	2201      	moveq	r2, #1
 8003f5c:	4d0e      	ldr	r5, [pc, #56]	; (8003f98 <TIM_OC2_SetConfig+0x8c>)
 8003f5e:	42a8      	cmp	r0, r5
 8003f60:	d003      	beq.n	8003f6a <TIM_OC2_SetConfig+0x5e>
 8003f62:	b912      	cbnz	r2, 8003f6a <TIM_OC2_SetConfig+0x5e>
 8003f64:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <TIM_OC2_SetConfig+0x90>)
 8003f66:	4290      	cmp	r0, r2
 8003f68:	d107      	bne.n	8003f7a <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f6a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f6e:	694a      	ldr	r2, [r1, #20]
 8003f70:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f74:	698a      	ldr	r2, [r1, #24]
 8003f76:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 8003f7a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003f7c:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003f7e:	684a      	ldr	r2, [r1, #4]
 8003f80:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003f82:	6203      	str	r3, [r0, #32]
}
 8003f84:	bc70      	pop	{r4, r5, r6}
 8003f86:	4770      	bx	lr
 8003f88:	feff8cff 	.word	0xfeff8cff
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40014400 	.word	0x40014400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014800 	.word	0x40014800

08003fa0 <HAL_TIM_PWM_ConfigChannel>:
{
 8003fa0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003fa2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f000 808c 	beq.w	80040c4 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003fac:	460d      	mov	r5, r1
 8003fae:	4604      	mov	r4, r0
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	d81e      	bhi.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x58>
 8003fba:	e8df f002 	tbb	[pc, r2]
 8003fbe:	1d0b      	.short	0x1d0b
 8003fc0:	1d211d1d 	.word	0x1d211d1d
 8003fc4:	1d351d1d 	.word	0x1d351d1d
 8003fc8:	1d481d1d 	.word	0x1d481d1d
 8003fcc:	1d5c1d1d 	.word	0x1d5c1d1d
 8003fd0:	1d1d      	.short	0x1d1d
 8003fd2:	6f          	.byte	0x6f
 8003fd3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd4:	6800      	ldr	r0, [r0, #0]
 8003fd6:	f7ff fc31 	bl	800383c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fda:	6822      	ldr	r2, [r4, #0]
 8003fdc:	6993      	ldr	r3, [r2, #24]
 8003fde:	f043 0308 	orr.w	r3, r3, #8
 8003fe2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fe4:	6822      	ldr	r2, [r4, #0]
 8003fe6:	6993      	ldr	r3, [r2, #24]
 8003fe8:	f023 0304 	bic.w	r3, r3, #4
 8003fec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	6993      	ldr	r3, [r2, #24]
 8003ff2:	6929      	ldr	r1, [r5, #16]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004000:	6800      	ldr	r0, [r0, #0]
 8004002:	f7ff ff83 	bl	8003f0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	6993      	ldr	r3, [r2, #24]
 800400a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800400e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	6993      	ldr	r3, [r2, #24]
 8004014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004018:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800401a:	6822      	ldr	r2, [r4, #0]
 800401c:	6993      	ldr	r3, [r2, #24]
 800401e:	6929      	ldr	r1, [r5, #16]
 8004020:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004024:	6193      	str	r3, [r2, #24]
      break;
 8004026:	e7e7      	b.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004028:	6800      	ldr	r0, [r0, #0]
 800402a:	f7ff fc59 	bl	80038e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	69d3      	ldr	r3, [r2, #28]
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004038:	6822      	ldr	r2, [r4, #0]
 800403a:	69d3      	ldr	r3, [r2, #28]
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	69d3      	ldr	r3, [r2, #28]
 8004046:	6929      	ldr	r1, [r5, #16]
 8004048:	430b      	orrs	r3, r1
 800404a:	61d3      	str	r3, [r2, #28]
      break;
 800404c:	e7d4      	b.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800404e:	6800      	ldr	r0, [r0, #0]
 8004050:	f7ff fc8e 	bl	8003970 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004054:	6822      	ldr	r2, [r4, #0]
 8004056:	69d3      	ldr	r3, [r2, #28]
 8004058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800405c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800405e:	6822      	ldr	r2, [r4, #0]
 8004060:	69d3      	ldr	r3, [r2, #28]
 8004062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004066:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	69d3      	ldr	r3, [r2, #28]
 800406c:	6929      	ldr	r1, [r5, #16]
 800406e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004072:	61d3      	str	r3, [r2, #28]
      break;
 8004074:	e7c0      	b.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004076:	6800      	ldr	r0, [r0, #0]
 8004078:	f7ff fcb2 	bl	80039e0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800407c:	6822      	ldr	r2, [r4, #0]
 800407e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004080:	f043 0308 	orr.w	r3, r3, #8
 8004084:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800408a:	f023 0304 	bic.w	r3, r3, #4
 800408e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004094:	6929      	ldr	r1, [r5, #16]
 8004096:	430b      	orrs	r3, r1
 8004098:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800409a:	e7ad      	b.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	f7ff fcd7 	bl	8003a50 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040aa:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040ac:	6822      	ldr	r2, [r4, #0]
 80040ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040ba:	6929      	ldr	r1, [r5, #16]
 80040bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80040c0:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80040c2:	e799      	b.n	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 80040c4:	2002      	movs	r0, #2
}
 80040c6:	bd38      	pop	{r3, r4, r5, pc}

080040c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80040d4:	4319      	orrs	r1, r3
 80040d6:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d8:	6084      	str	r4, [r0, #8]
}
 80040da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80040e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d074      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0xf2>
{
 80040e8:	b510      	push	{r4, lr}
 80040ea:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80040ec:	2301      	movs	r3, #1
 80040ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80040f2:	2302      	movs	r3, #2
 80040f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	6802      	ldr	r2, [r0, #0]
 80040fa:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040fc:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_TIM_ConfigClockSource+0xf8>)
 80040fe:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004100:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004102:	680b      	ldr	r3, [r1, #0]
 8004104:	2b60      	cmp	r3, #96	; 0x60
 8004106:	d050      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0xca>
 8004108:	d91d      	bls.n	8004146 <HAL_TIM_ConfigClockSource+0x66>
 800410a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800410e:	d02e      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x8e>
 8004110:	d835      	bhi.n	800417e <HAL_TIM_ConfigClockSource+0x9e>
 8004112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004116:	d03c      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0xb2>
 8004118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800411c:	d027      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x8e>
 800411e:	2b70      	cmp	r3, #112	; 0x70
 8004120:	d10a      	bne.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
      TIM_ETR_SetConfig(htim->Instance,
 8004122:	68cb      	ldr	r3, [r1, #12]
 8004124:	684a      	ldr	r2, [r1, #4]
 8004126:	6889      	ldr	r1, [r1, #8]
 8004128:	6820      	ldr	r0, [r4, #0]
 800412a:	f7ff ffcd 	bl	80040c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004132:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004136:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004138:	2301      	movs	r3, #1
 800413a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800413e:	2000      	movs	r0, #0
 8004140:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8004144:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004146:	2b20      	cmp	r3, #32
 8004148:	d011      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x8e>
 800414a:	d90d      	bls.n	8004168 <HAL_TIM_ConfigClockSource+0x88>
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d036      	beq.n	80041be <HAL_TIM_ConfigClockSource+0xde>
 8004150:	2b50      	cmp	r3, #80	; 0x50
 8004152:	d111      	bne.n	8004178 <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004154:	68ca      	ldr	r2, [r1, #12]
 8004156:	6849      	ldr	r1, [r1, #4]
 8004158:	6820      	ldr	r0, [r4, #0]
 800415a:	f7ff fcb1 	bl	8003ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800415e:	2150      	movs	r1, #80	; 0x50
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	f7ff fcd5 	bl	8003b10 <TIM_ITRx_SetConfig>
      break;
 8004166:	e7e7      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004168:	b10b      	cbz	r3, 800416e <HAL_TIM_ConfigClockSource+0x8e>
 800416a:	2b10      	cmp	r3, #16
 800416c:	d1e4      	bne.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800416e:	4619      	mov	r1, r3
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	f7ff fccd 	bl	8003b10 <TIM_ITRx_SetConfig>
        break;
 8004176:	e7df      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004178:	2b30      	cmp	r3, #48	; 0x30
 800417a:	d1dd      	bne.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
 800417c:	e7f7      	b.n	800416e <HAL_TIM_ConfigClockSource+0x8e>
 800417e:	4a17      	ldr	r2, [pc, #92]	; (80041dc <HAL_TIM_ConfigClockSource+0xfc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d0f4      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x8e>
 8004184:	3210      	adds	r2, #16
 8004186:	4293      	cmp	r3, r2
 8004188:	d0f1      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x8e>
 800418a:	3a20      	subs	r2, #32
 800418c:	4293      	cmp	r3, r2
 800418e:	d1d3      	bne.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
 8004190:	e7ed      	b.n	800416e <HAL_TIM_ConfigClockSource+0x8e>
      TIM_ETR_SetConfig(htim->Instance,
 8004192:	68cb      	ldr	r3, [r1, #12]
 8004194:	684a      	ldr	r2, [r1, #4]
 8004196:	6889      	ldr	r1, [r1, #8]
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	f7ff ff95 	bl	80040c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800419e:	6822      	ldr	r2, [r4, #0]
 80041a0:	6893      	ldr	r3, [r2, #8]
 80041a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a6:	6093      	str	r3, [r2, #8]
      break;
 80041a8:	e7c6      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041aa:	68ca      	ldr	r2, [r1, #12]
 80041ac:	6849      	ldr	r1, [r1, #4]
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	f7ff fc99 	bl	8003ae6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b4:	2160      	movs	r1, #96	; 0x60
 80041b6:	6820      	ldr	r0, [r4, #0]
 80041b8:	f7ff fcaa 	bl	8003b10 <TIM_ITRx_SetConfig>
      break;
 80041bc:	e7bc      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	68ca      	ldr	r2, [r1, #12]
 80041c0:	6849      	ldr	r1, [r1, #4]
 80041c2:	6820      	ldr	r0, [r4, #0]
 80041c4:	f7ff fc7c 	bl	8003ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	f7ff fca0 	bl	8003b10 <TIM_ITRx_SetConfig>
      break;
 80041d0:	e7b2      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 80041d2:	2002      	movs	r0, #2
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	ffce0088 	.word	0xffce0088
 80041dc:	00100030 	.word	0x00100030

080041e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d041      	beq.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
{
 80041e8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80041ea:	2301      	movs	r3, #1
 80041ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	2302      	movs	r3, #2
 80041f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f6:	6802      	ldr	r2, [r0, #0]
 80041f8:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fa:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041fc:	4d1c      	ldr	r5, [pc, #112]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80041fe:	4e1d      	ldr	r6, [pc, #116]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8004200:	42aa      	cmp	r2, r5
 8004202:	bf18      	it	ne
 8004204:	42b2      	cmpne	r2, r6
 8004206:	d103      	bne.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004208:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800420c:	684d      	ldr	r5, [r1, #4]
 800420e:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004214:	680d      	ldr	r5, [r1, #0]
 8004216:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004218:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421a:	6803      	ldr	r3, [r0, #0]
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004222:	bf18      	it	ne
 8004224:	4293      	cmpne	r3, r2
 8004226:	d013      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004228:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800422c:	4293      	cmp	r3, r2
 800422e:	d00f      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004234:	4293      	cmp	r3, r2
 8004236:	d00b      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004240:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004248:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800424c:	4293      	cmp	r3, r2
 800424e:	d104      	bne.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004250:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004254:	688a      	ldr	r2, [r1, #8]
 8004256:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004258:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800425a:	2301      	movs	r3, #1
 800425c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004260:	2300      	movs	r3, #0
 8004262:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004266:	4618      	mov	r0, r3
}
 8004268:	bc70      	pop	{r4, r5, r6}
 800426a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800426c:	2002      	movs	r0, #2
 800426e:	4770      	bx	lr
 8004270:	40010400 	.word	0x40010400
 8004274:	40010000 	.word	0x40010000

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	4770      	bx	lr

0800427a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800427c:	4770      	bx	lr
	...

08004280 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004280:	b500      	push	{lr}
 8004282:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004284:	2300      	movs	r3, #0
 8004286:	9307      	str	r3, [sp, #28]
 8004288:	9308      	str	r3, [sp, #32]
 800428a:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	9303      	str	r3, [sp, #12]
 8004294:	9304      	str	r3, [sp, #16]
 8004296:	9305      	str	r3, [sp, #20]
 8004298:	9306      	str	r3, [sp, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800429a:	4820      	ldr	r0, [pc, #128]	; (800431c <MX_ADC1_Init+0x9c>)
 800429c:	4a20      	ldr	r2, [pc, #128]	; (8004320 <MX_ADC1_Init+0xa0>)
 800429e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80042a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80042a4:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80042a6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80042a8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042aa:	2204      	movs	r2, #4
 80042ac:	6102      	str	r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80042ae:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80042b0:	2201      	movs	r2, #1
 80042b2:	7542      	strb	r2, [r0, #21]
  hadc1.Init.NbrOfConversion = 1;
 80042b4:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80042b6:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042b8:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042ba:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80042bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80042be:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80042c0:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80042c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80042c6:	f7fc fc43 	bl	8000b50 <HAL_ADC_Init>
 80042ca:	b9e8      	cbnz	r0, 8004308 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80042cc:	a90a      	add	r1, sp, #40	; 0x28
 80042ce:	2300      	movs	r3, #0
 80042d0:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80042d4:	4811      	ldr	r0, [pc, #68]	; (800431c <MX_ADC1_Init+0x9c>)
 80042d6:	f7fc fd91 	bl	8000dfc <HAL_ADCEx_MultiModeConfigChannel>
 80042da:	b9c0      	cbnz	r0, 800430e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <MX_ADC1_Init+0xa4>)
 80042de:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042e0:	2306      	movs	r3, #6
 80042e2:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80042e4:	2300      	movs	r3, #0
 80042e6:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80042ec:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042ee:	2204      	movs	r2, #4
 80042f0:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 80042f2:	9305      	str	r3, [sp, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80042f4:	f88d 3019 	strb.w	r3, [sp, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042f8:	4669      	mov	r1, sp
 80042fa:	4808      	ldr	r0, [pc, #32]	; (800431c <MX_ADC1_Init+0x9c>)
 80042fc:	f7fc f878 	bl	80003f0 <HAL_ADC_ConfigChannel>
 8004300:	b940      	cbnz	r0, 8004314 <MX_ADC1_Init+0x94>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004302:	b00b      	add	sp, #44	; 0x2c
 8004304:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004308:	f000 fd32 	bl	8004d70 <Error_Handler>
 800430c:	e7de      	b.n	80042cc <MX_ADC1_Init+0x4c>
    Error_Handler();
 800430e:	f000 fd2f 	bl	8004d70 <Error_Handler>
 8004312:	e7e3      	b.n	80042dc <MX_ADC1_Init+0x5c>
    Error_Handler();
 8004314:	f000 fd2c 	bl	8004d70 <Error_Handler>
}
 8004318:	e7f3      	b.n	8004302 <MX_ADC1_Init+0x82>
 800431a:	bf00      	nop
 800431c:	24000170 	.word	0x24000170
 8004320:	40022000 	.word	0x40022000
 8004324:	08600004 	.word	0x08600004

08004328 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8004328:	b500      	push	{lr}
 800432a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800432c:	2300      	movs	r3, #0
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	9302      	str	r3, [sp, #8]
 8004332:	9303      	str	r3, [sp, #12]
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	9305      	str	r3, [sp, #20]
 8004338:	9306      	str	r3, [sp, #24]
 800433a:	9307      	str	r3, [sp, #28]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800433c:	481a      	ldr	r0, [pc, #104]	; (80043a8 <MX_ADC3_Init+0x80>)
 800433e:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <MX_ADC3_Init+0x84>)
 8004340:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8004342:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004346:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8004348:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800434a:	60c3      	str	r3, [r0, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800434c:	2204      	movs	r2, #4
 800434e:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8004350:	7503      	strb	r3, [r0, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004352:	7543      	strb	r3, [r0, #21]
  hadc3.Init.NbrOfConversion = 1;
 8004354:	2201      	movs	r2, #1
 8004356:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004358:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800435a:	6243      	str	r3, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800435c:	6283      	str	r3, [r0, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800435e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004360:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004362:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8004364:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004368:	f7fc fbf2 	bl	8000b50 <HAL_ADC_Init>
 800436c:	b9b0      	cbnz	r0, 800439c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <MX_ADC3_Init+0x88>)
 8004370:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004372:	2306      	movs	r3, #6
 8004374:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004376:	2300      	movs	r3, #0
 8004378:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800437a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800437e:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004380:	2204      	movs	r2, #4
 8004382:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8004384:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8004386:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800438a:	eb0d 0102 	add.w	r1, sp, r2
 800438e:	4806      	ldr	r0, [pc, #24]	; (80043a8 <MX_ADC3_Init+0x80>)
 8004390:	f7fc f82e 	bl	80003f0 <HAL_ADC_ConfigChannel>
 8004394:	b928      	cbnz	r0, 80043a2 <MX_ADC3_Init+0x7a>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004396:	b009      	add	sp, #36	; 0x24
 8004398:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800439c:	f000 fce8 	bl	8004d70 <Error_Handler>
 80043a0:	e7e5      	b.n	800436e <MX_ADC3_Init+0x46>
    Error_Handler();
 80043a2:	f000 fce5 	bl	8004d70 <Error_Handler>
}
 80043a6:	e7f6      	b.n	8004396 <MX_ADC3_Init+0x6e>
 80043a8:	240001d4 	.word	0x240001d4
 80043ac:	58026000 	.word	0x58026000
 80043b0:	04300002 	.word	0x04300002

080043b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80043b4:	b500      	push	{lr}
 80043b6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	2300      	movs	r3, #0
 80043ba:	9305      	str	r3, [sp, #20]
 80043bc:	9306      	str	r3, [sp, #24]
 80043be:	9307      	str	r3, [sp, #28]
 80043c0:	9308      	str	r3, [sp, #32]
 80043c2:	9309      	str	r3, [sp, #36]	; 0x24
  if(adcHandle->Instance==ADC1)
 80043c4:	6803      	ldr	r3, [r0, #0]
 80043c6:	4a25      	ldr	r2, [pc, #148]	; (800445c <HAL_ADC_MspInit+0xa8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d005      	beq.n	80043d8 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80043cc:	4a24      	ldr	r2, [pc, #144]	; (8004460 <HAL_ADC_MspInit+0xac>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d025      	beq.n	800441e <HAL_ADC_MspInit+0x6a>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80043d2:	b00b      	add	sp, #44	; 0x2c
 80043d4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <HAL_ADC_MspInit+0xb0>)
 80043da:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80043de:	f042 0220 	orr.w	r2, r2, #32
 80043e2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80043e6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80043ea:	f002 0220 	and.w	r2, r2, #32
 80043ee:	9201      	str	r2, [sp, #4]
 80043f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80043f6:	f042 0220 	orr.w	r2, r2, #32
 80043fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80043fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	9302      	str	r3, [sp, #8]
 8004408:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800440a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800440e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004410:	2303      	movs	r3, #3
 8004412:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004414:	a905      	add	r1, sp, #20
 8004416:	4814      	ldr	r0, [pc, #80]	; (8004468 <HAL_ADC_MspInit+0xb4>)
 8004418:	f7fc feda 	bl	80011d0 <HAL_GPIO_Init>
 800441c:	e7d9      	b.n	80043d2 <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_ADC_MspInit+0xb0>)
 8004420:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004424:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004428:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800442c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004430:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8004434:	9203      	str	r2, [sp, #12]
 8004436:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004438:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800443c:	f042 0204 	orr.w	r2, r2, #4
 8004440:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	9b04      	ldr	r3, [sp, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8004450:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004454:	4608      	mov	r0, r1
 8004456:	f7fb ffc1 	bl	80003dc <HAL_SYSCFG_AnalogSwitchConfig>
}
 800445a:	e7ba      	b.n	80043d2 <HAL_ADC_MspInit+0x1e>
 800445c:	40022000 	.word	0x40022000
 8004460:	58026000 	.word	0x58026000
 8004464:	58024400 	.word	0x58024400
 8004468:	58021400 	.word	0x58021400

0800446c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800446c:	b500      	push	{lr}
 800446e:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004470:	2224      	movs	r2, #36	; 0x24
 8004472:	2100      	movs	r1, #0
 8004474:	a801      	add	r0, sp, #4
 8004476:	f000 ffbb 	bl	80053f0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800447a:	4812      	ldr	r0, [pc, #72]	; (80044c4 <MX_DAC1_Init+0x58>)
 800447c:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <MX_DAC1_Init+0x5c>)
 800447e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004480:	f7fc fde6 	bl	8001050 <HAL_DAC_Init>
 8004484:	b9a8      	cbnz	r0, 80044b2 <MX_DAC1_Init+0x46>
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004486:	2200      	movs	r2, #0
 8004488:	9201      	str	r2, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800448a:	230a      	movs	r3, #10
 800448c:	9302      	str	r3, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800448e:	9203      	str	r2, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004490:	2301      	movs	r3, #1
 8004492:	9304      	str	r3, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004494:	9205      	str	r2, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004496:	a901      	add	r1, sp, #4
 8004498:	480a      	ldr	r0, [pc, #40]	; (80044c4 <MX_DAC1_Init+0x58>)
 800449a:	f7fc fdeb 	bl	8001074 <HAL_DAC_ConfigChannel>
 800449e:	b958      	cbnz	r0, 80044b8 <MX_DAC1_Init+0x4c>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80044a0:	2210      	movs	r2, #16
 80044a2:	a901      	add	r1, sp, #4
 80044a4:	4807      	ldr	r0, [pc, #28]	; (80044c4 <MX_DAC1_Init+0x58>)
 80044a6:	f7fc fde5 	bl	8001074 <HAL_DAC_ConfigChannel>
 80044aa:	b940      	cbnz	r0, 80044be <MX_DAC1_Init+0x52>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80044ac:	b00b      	add	sp, #44	; 0x2c
 80044ae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80044b2:	f000 fc5d 	bl	8004d70 <Error_Handler>
 80044b6:	e7e6      	b.n	8004486 <MX_DAC1_Init+0x1a>
    Error_Handler();
 80044b8:	f000 fc5a 	bl	8004d70 <Error_Handler>
 80044bc:	e7f0      	b.n	80044a0 <MX_DAC1_Init+0x34>
    Error_Handler();
 80044be:	f000 fc57 	bl	8004d70 <Error_Handler>
}
 80044c2:	e7f3      	b.n	80044ac <MX_DAC1_Init+0x40>
 80044c4:	24000360 	.word	0x24000360
 80044c8:	40007400 	.word	0x40007400

080044cc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80044cc:	b500      	push	{lr}
 80044ce:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d0:	2300      	movs	r3, #0
 80044d2:	9303      	str	r3, [sp, #12]
 80044d4:	9304      	str	r3, [sp, #16]
 80044d6:	9305      	str	r3, [sp, #20]
 80044d8:	9306      	str	r3, [sp, #24]
 80044da:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 80044dc:	6802      	ldr	r2, [r0, #0]
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <HAL_DAC_MspInit+0x64>)
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d002      	beq.n	80044ea <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80044e4:	b009      	add	sp, #36	; 0x24
 80044e6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC12_CLK_ENABLE();
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_DAC_MspInit+0x68>)
 80044ec:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80044f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80044f4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80044f8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80044fc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004500:	9201      	str	r2, [sp, #4]
 8004502:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004504:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	9302      	str	r3, [sp, #8]
 800451a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800451c:	2330      	movs	r3, #48	; 0x30
 800451e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004520:	2303      	movs	r3, #3
 8004522:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004524:	a903      	add	r1, sp, #12
 8004526:	4804      	ldr	r0, [pc, #16]	; (8004538 <HAL_DAC_MspInit+0x6c>)
 8004528:	f7fc fe52 	bl	80011d0 <HAL_GPIO_Init>
}
 800452c:	e7da      	b.n	80044e4 <HAL_DAC_MspInit+0x18>
 800452e:	bf00      	nop
 8004530:	40007400 	.word	0x40007400
 8004534:	58024400 	.word	0x58024400
 8004538:	58020000 	.word	0x58020000

0800453c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004542:	2400      	movs	r4, #0
 8004544:	9409      	str	r4, [sp, #36]	; 0x24
 8004546:	940a      	str	r4, [sp, #40]	; 0x28
 8004548:	940b      	str	r4, [sp, #44]	; 0x2c
 800454a:	940c      	str	r4, [sp, #48]	; 0x30
 800454c:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800454e:	4b73      	ldr	r3, [pc, #460]	; (800471c <MX_GPIO_Init+0x1e0>)
 8004550:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004554:	f042 0210 	orr.w	r2, r2, #16
 8004558:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800455c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004560:	f002 0210 	and.w	r2, r2, #16
 8004564:	9201      	str	r2, [sp, #4]
 8004566:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004568:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800456c:	f042 0204 	orr.w	r2, r2, #4
 8004570:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004574:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004578:	f002 0204 	and.w	r2, r2, #4
 800457c:	9202      	str	r2, [sp, #8]
 800457e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004580:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004584:	f042 0220 	orr.w	r2, r2, #32
 8004588:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800458c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004590:	f002 0220 	and.w	r2, r2, #32
 8004594:	9203      	str	r2, [sp, #12]
 8004596:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004598:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800459c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80045a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80045ac:	9204      	str	r2, [sp, #16]
 80045ae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80045bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045c0:	f002 0201 	and.w	r2, r2, #1
 80045c4:	9205      	str	r2, [sp, #20]
 80045c6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045cc:	f042 0202 	orr.w	r2, r2, #2
 80045d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80045d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045d8:	f002 0202 	and.w	r2, r2, #2
 80045dc:	9206      	str	r2, [sp, #24]
 80045de:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80045e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80045ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045f0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80045f4:	9207      	str	r2, [sp, #28]
 80045f6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80045fc:	f042 0208 	orr.w	r2, r2, #8
 8004600:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	9308      	str	r3, [sp, #32]
 800460e:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004610:	4e43      	ldr	r6, [pc, #268]	; (8004720 <MX_GPIO_Init+0x1e4>)
 8004612:	4622      	mov	r2, r4
 8004614:	2102      	movs	r1, #2
 8004616:	4630      	mov	r0, r6
 8004618:	f7fc fed2 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 800461c:	f8df a114 	ldr.w	sl, [pc, #276]	; 8004734 <MX_GPIO_Init+0x1f8>
 8004620:	4622      	mov	r2, r4
 8004622:	2101      	movs	r1, #1
 8004624:	4650      	mov	r0, sl
 8004626:	f7fc fecb 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 800462a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8004738 <MX_GPIO_Init+0x1fc>
 800462e:	2201      	movs	r2, #1
 8004630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004634:	4648      	mov	r0, r9
 8004636:	f7fc fec3 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800463a:	2201      	movs	r2, #1
 800463c:	2110      	movs	r1, #16
 800463e:	4630      	mov	r0, r6
 8004640:	f7fc febe 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE11 PE13 PE15 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004644:	f64a 33ff 	movw	r3, #44031	; 0xabff
 8004648:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800464a:	2503      	movs	r5, #3
 800464c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004650:	a909      	add	r1, sp, #36	; 0x24
 8004652:	4648      	mov	r0, r9
 8004654:	f7fc fdbc 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8004658:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800465c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800465e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004662:	a909      	add	r1, sp, #36	; 0x24
 8004664:	482f      	ldr	r0, [pc, #188]	; (8004724 <MX_GPIO_Init+0x1e8>)
 8004666:	f7fc fdb3 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800466a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800466e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004670:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004674:	a909      	add	r1, sp, #36	; 0x24
 8004676:	482c      	ldr	r0, [pc, #176]	; (8004728 <MX_GPIO_Init+0x1ec>)
 8004678:	f7fc fdaa 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800467c:	f649 73ce 	movw	r3, #40910	; 0x9fce
 8004680:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004682:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004686:	a909      	add	r1, sp, #36	; 0x24
 8004688:	4828      	ldr	r0, [pc, #160]	; (800472c <MX_GPIO_Init+0x1f0>)
 800468a:	f7fc fda1 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800468e:	f64f 73c5 	movw	r3, #65477	; 0xffc5
 8004692:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004694:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004696:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004698:	a909      	add	r1, sp, #36	; 0x24
 800469a:	4630      	mov	r0, r6
 800469c:	f7fc fd98 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046a0:	f04f 0802 	mov.w	r8, #2
 80046a4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a8:	2701      	movs	r7, #1
 80046aa:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046ac:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b0:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b2:	a909      	add	r1, sp, #36	; 0x24
 80046b4:	4630      	mov	r0, r6
 80046b6:	f7fc fd8b 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046ba:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046bc:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c0:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046c2:	a909      	add	r1, sp, #36	; 0x24
 80046c4:	4650      	mov	r0, sl
 80046c6:	f7fc fd83 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 PG7 PG8
                           PG9 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80046ca:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80046ce:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046d0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046d4:	a909      	add	r1, sp, #36	; 0x24
 80046d6:	4650      	mov	r0, sl
 80046d8:	f7fc fd7a 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e2:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046e8:	a909      	add	r1, sp, #36	; 0x24
 80046ea:	4648      	mov	r0, r9
 80046ec:	f7fc fd70 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80046f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f4:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046f6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046fa:	a909      	add	r1, sp, #36	; 0x24
 80046fc:	480c      	ldr	r0, [pc, #48]	; (8004730 <MX_GPIO_Init+0x1f4>)
 80046fe:	f7fc fd67 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004702:	2310      	movs	r3, #16
 8004704:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004706:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800470a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800470e:	a909      	add	r1, sp, #36	; 0x24
 8004710:	4630      	mov	r0, r6
 8004712:	f7fc fd5d 	bl	80011d0 <HAL_GPIO_Init>

}
 8004716:	b00e      	add	sp, #56	; 0x38
 8004718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471c:	58024400 	.word	0x58024400
 8004720:	58020400 	.word	0x58020400
 8004724:	58020800 	.word	0x58020800
 8004728:	58021400 	.word	0x58021400
 800472c:	58020000 	.word	0x58020000
 8004730:	58020c00 	.word	0x58020c00
 8004734:	58021800 	.word	0x58021800
 8004738:	58021000 	.word	0x58021000

0800473c <PIDInputSWitch>:
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */
float PIDInputSWitch(uint8_t PIDInputOption, float ADCvalue,float LockIn)
{
	 float PIDInput;
	 if (PIDInputOption == 0)
 800473c:	b100      	cbz	r0, 8004740 <PIDInputSWitch+0x4>
	else
			{
				PIDInput =ADCvalue;
			}
	 return(PIDInput);
}
 800473e:	4770      	bx	lr
	 	 	 	 PIDInput=LockIn;
 8004740:	eeb0 0a60 	vmov.f32	s0, s1
 8004744:	e7fb      	b.n	800473e <PIDInputSWitch+0x2>
	...

08004748 <PID_vInit>:

void PID_vInit(tPID* pPID)
{                                          ///< Zeiger auf Reglerstruktur
 8004748:	b4f0      	push	{r4, r5, r6, r7}
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 800474a:	a324      	add	r3, pc, #144	; (adr r3, 80047dc <PID_vInit+0x94>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	e9c0 2300 	strd	r2, r3, [r0]
	pPID-> _Kp				= 		1;
 8004754:	2600      	movs	r6, #0
 8004756:	4f1c      	ldr	r7, [pc, #112]	; (80047c8 <PID_vInit+0x80>)
 8004758:	e9c0 6702 	strd	r6, r7, [r0, #8]
	pPID-> _Ki				= 		0;
 800475c:	2200      	movs	r2, #0
 800475e:	2300      	movs	r3, #0
 8004760:	e9c0 2304 	strd	r2, r3, [r0, #16]
	pPID-> _Kd				= 		0.0;
 8004764:	e9c0 2306 	strd	r2, r3, [r0, #24]
	pPID-> _max				= 		3;
 8004768:	2400      	movs	r4, #0
 800476a:	4d18      	ldr	r5, [pc, #96]	; (80047cc <PID_vInit+0x84>)
 800476c:	e9c0 4508 	strd	r4, r5, [r0, #32]
	pPID-> _min				= 		-3;
 8004770:	2400      	movs	r4, #0
 8004772:	4d17      	ldr	r5, [pc, #92]	; (80047d0 <PID_vInit+0x88>)
 8004774:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
	pPID-> _Kaw				= 		0.0;
 8004778:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
	pPID-> _EnKc			= 		1;
 800477c:	2101      	movs	r1, #1
 800477e:	6381      	str	r1, [r0, #56]	; 0x38
	pPID-> _fc				= 		10;
 8004780:	2400      	movs	r4, #0
 8004782:	4d14      	ldr	r5, [pc, #80]	; (80047d4 <PID_vInit+0x8c>)
 8004784:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
    pPID-> _PIDHold			= 		0.0;
 8004788:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	pPID->error             =        0;
 800478c:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	pPID->error_1lag        =        0;
 8004790:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	pPID->error_2lag        =        0;
 8004794:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
	pPID->error_AnWi        =        0;
 8004798:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	pPID->preout            =        0;
 800479c:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
	pPID->_kt               =        -1;
 80047a0:	2400      	movs	r4, #0
 80047a2:	4d0d      	ldr	r5, [pc, #52]	; (80047d8 <PID_vInit+0x90>)
 80047a4:	e9c0 451e 	strd	r4, r5, [r0, #120]	; 0x78
	pPID->En                =        1.0;
 80047a8:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
	pPID->ref               =       0.0;
 80047ac:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
	pPID->a0                =        0.0;
	pPID->a1 				= 		0.0;
	pPID->a2      			= 		0.0;
 80047b0:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
	pPID->aw				=		0.0;
 80047b4:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
	pPID->omega 			=		0;
 80047b8:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
	pPID->a0 				= 		pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts+pPID->_Ki*V2MV*pPID->_Ts;
 80047bc:	e9c0 6724 	strd	r6, r7, [r0, #144]	; 0x90
	pPID->a1 				= 		-(pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts*2.0);
 80047c0:	e9c0 4526 	strd	r4, r5, [r0, #152]	; 0x98
	pPID->a2 				=		pPID->_Kd/V2MUV/pPID->_Ts;
	pPID->aw   				=		pPID->_Kaw*pPID->_Ts;
};
 80047c4:	bcf0      	pop	{r4, r5, r6, r7}
 80047c6:	4770      	bx	lr
 80047c8:	3ff00000 	.word	0x3ff00000
 80047cc:	40080000 	.word	0x40080000
 80047d0:	c0080000 	.word	0xc0080000
 80047d4:	40240000 	.word	0x40240000
 80047d8:	bff00000 	.word	0xbff00000
 80047dc:	88e368f1 	.word	0x88e368f1
 80047e0:	3ed4f8b5 	.word	0x3ed4f8b5
 80047e4:	00000000 	.word	0x00000000

080047e8 <DDS_vInit>:
void DDS_vInit(float amp, float freq, float fclk,int accumulatorWidth, int LUTGridWidth)
{
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	ed2d 8b02 	vpush	{d8}
	tDDS* 		 pDDS       =   &InstanceDDS;
	float        temp      	=   0;
	signed int 	 SinN      	=   LUTGridWidth;
	float 		 StepNo    	=   (float)(1<<SinN);
 80047ee:	2201      	movs	r2, #1
 80047f0:	fa02 f501 	lsl.w	r5, r2, r1
 80047f4:	ee07 5a90 	vmov	s15, r5
 80047f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	float        StepEnc   	=   (float)(2.0f*PI-2.0f*PI/(StepNo-1.0))/(StepNo-1);
 80047fc:	eeb7 5ae6 	vcvt.f64.f32	d5, s13
 8004800:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8004804:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004808:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80048f0 <DDS_vInit+0x108>
 800480c:	ee87 4b05 	vdiv.f64	d4, d7, d5
 8004810:	ee37 7b44 	vsub.f64	d7, d7, d4
 8004814:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004818:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800481c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004820:	eec7 8a26 	vdiv.f32	s17, s14, s13
	float        phi;
	float        phi_lag;
	pDDS->enable            =   1;
 8004824:	4b36      	ldr	r3, [pc, #216]	; (8004900 <DDS_vInit+0x118>)
 8004826:	601a      	str	r2, [r3, #0]
	pDDS->amp 				= 	amp;
 8004828:	ed83 0a01 	vstr	s0, [r3, #4]
	pDDS->freq 				= 	freq;
 800482c:	edc3 0a02 	vstr	s1, [r3, #8]
	pDDS->phaseOffset 		= 	100;
 8004830:	4c34      	ldr	r4, [pc, #208]	; (8004904 <DDS_vInit+0x11c>)
 8004832:	60dc      	str	r4, [r3, #12]
	pDDS->fclk 				= 	fclk;
 8004834:	ed83 1a05 	vstr	s2, [r3, #20]
	pDDS->accumulatorWidth 	=	accumulatorWidth;
 8004838:	6198      	str	r0, [r3, #24]
	pDDS->LUTGridWidth 		= 	LUTGridWidth;
 800483a:	61d9      	str	r1, [r3, #28]
	phi               		=   pDDS->phaseOffset/180*PI;
	phi_lag                 =   pDDS->phaseOffset_1ag/180*PI;
 800483c:	edd3 6a04 	vldr	s13, [r3, #16]
 8004840:	eddf 7a31 	vldr	s15, [pc, #196]	; 8004908 <DDS_vInit+0x120>
 8004844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004848:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800484c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80048f8 <DDS_vInit+0x110>
 8004850:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004854:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	pDDS->TWSumShift        = 	0;
 8004858:	2400      	movs	r4, #0
 800485a:	625c      	str	r4, [r3, #36]	; 0x24
	pDDS->TWSum             = 	0;
 800485c:	621c      	str	r4, [r3, #32]
	pDDS->phaseOffset_1ag   = 	INIVALUE;
 800485e:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 800490c <DDS_vInit+0x124>
 8004862:	ed83 8a04 	vstr	s16, [r3, #16]
	pDDS->fclk_Shift_ACCWidth = (pDDS->fclk)/(1<<pDDS-> accumulatorWidth);
 8004866:	4082      	lsls	r2, r0
 8004868:	ee07 2a90 	vmov	s15, r2
 800486c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004870:	eec1 6a27 	vdiv.f32	s13, s2, s15
 8004874:	edc3 6a0a 	vstr	s13, [r3, #40]	; 0x28
	pDDS->pi_Shift_AccWidth   = 10;//(float)(1<<pDDS-> accumulatorWidth)/PI/2.0;
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <DDS_vInit+0x128>)
 800487a:	62da      	str	r2, [r3, #44]	; 0x2c
	pDDS->TW                =   round((pDDS->freq)/pDDS->fclk_Shift_ACCWidth);
 800487c:	ee80 6aa6 	vdiv.f32	s12, s1, s13
 8004880:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8004884:	feb8 6b46 	vrinta.f64	d6, d6
 8004888:	eebd 6bc6 	vcvt.s32.f64	s12, d6
 800488c:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	pDDS->DetTW             =   round((phi-phi_lag)*(1<<pDDS-> accumulatorWidth)/PI/2.0f);
 8004890:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004914 <DDS_vInit+0x12c>
 8004894:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048a0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80048a4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80048a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048ac:	feb8 7b47 	vrinta.f64	d7, d7
 80048b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80048b4:	ed83 7a11 	vstr	s14, [r3, #68]	; 0x44
    pDDS->Out               = 	0;
 80048b8:	ed83 8a0c 	vstr	s16, [r3, #48]	; 0x30
    pDDS->ShiftOut          =	0;
 80048bc:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
	for(int li=0; li<=(1<<LUTGridWidth)-1; li++)
 80048c0:	e00e      	b.n	80048e0 <DDS_vInit+0xf8>
	{
		LUT_T[li]=li;
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <DDS_vInit+0x130>)
 80048c4:	f843 4024 	str.w	r4, [r3, r4, lsl #2]
		LUT_d[li]=sinf(temp);
 80048c8:	eeb0 0a48 	vmov.f32	s0, s16
 80048cc:	f000 fd98 	bl	8005400 <sinf>
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <DDS_vInit+0x134>)
 80048d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80048d6:	ed83 0a00 	vstr	s0, [r3]
		temp = temp+StepEnc;
 80048da:	ee38 8a28 	vadd.f32	s16, s16, s17
	for(int li=0; li<=(1<<LUTGridWidth)-1; li++)
 80048de:	3401      	adds	r4, #1
 80048e0:	1e6b      	subs	r3, r5, #1
 80048e2:	429c      	cmp	r4, r3
 80048e4:	dded      	ble.n	80048c2 <DDS_vInit+0xda>
     }
};
 80048e6:	ecbd 8b02 	vpop	{d8}
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	f3af 8000 	nop.w
 80048f0:	fc8b007a 	.word	0xfc8b007a
 80048f4:	401921fa 	.word	0x401921fa
 80048f8:	fc8b007a 	.word	0xfc8b007a
 80048fc:	400921fa 	.word	0x400921fa
 8004900:	240002fc 	.word	0x240002fc
 8004904:	42c80000 	.word	0x42c80000
 8004908:	43340000 	.word	0x43340000
 800490c:	00000000 	.word	0x00000000
 8004910:	41200000 	.word	0x41200000
 8004914:	3fdf66f1 	.word	0x3fdf66f1
 8004918:	240013d4 	.word	0x240013d4
 800491c:	240003c0 	.word	0x240003c0

08004920 <LUTinterp>:
   {
       signed int *IdxLUTX = LUTX;
       float *IdxLUTd = LUTd;
       float root_INTERPOLATED;
       float lfm;
       int intLUTIndex= (int)fLUTIndex;
 8004920:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004924:	ee17 3a10 	vmov	r3, s14
       float InputT  = fLUTIndex;
       if ((InputT < *LUTX) )
 8004928:	ed90 7a00 	vldr	s14, [r0]
 800492c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004930:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d440      	bmi.n	80049bc <LUTinterp+0x9c>
   {
 800493a:	b410      	push	{r4}
 800493c:	eef0 7a40 	vmov.f32	s15, s0
           {
               return 0;
           }

       lfm = (LUTd[intLUTIndex+1]- LUTd[intLUTIndex])/ (LUTX[intLUTIndex+1]- LUTX[intLUTIndex]);
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8004946:	ed94 7a00 	vldr	s14, [r4]
 800494a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800494e:	ed94 0a00 	vldr	s0, [r4]
 8004952:	ee37 7a40 	vsub.f32	s14, s14, s0
 8004956:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800495a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	ee06 2a90 	vmov	s13, r2
 8004964:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004968:	ee87 6a26 	vdiv.f32	s12, s14, s13
       root_INTERPOLATED = ( lfm * (InputT- LUTX[intLUTIndex])) + LUTd[intLUTIndex] ;
 800496c:	ee07 3a10 	vmov	s14, r3
 8004970:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004974:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004978:	ee26 7a07 	vmul.f32	s14, s12, s14
 800497c:	ee30 0a07 	vadd.f32	s0, s0, s14
       if (InputT>=(float)defrootTerm_LEN-1)
 8004980:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80049c4 <LUTinterp+0xa4>
 8004984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498c:	db13      	blt.n	80049b6 <LUTinterp+0x96>
              {
           	   lfm = (( LUTd[0] - LUTd[defrootTerm_LEN-1]));
 800498e:	ed91 7a00 	vldr	s14, [r1]
 8004992:	f601 71fc 	addw	r1, r1, #4092	; 0xffc
 8004996:	ed91 0a00 	vldr	s0, [r1]
 800499a:	ee37 7a40 	vsub.f32	s14, s14, s0
           	   root_INTERPOLATED = (( lfm * (InputT -LUTX[defrootTerm_LEN-1] ))) +  LUTd[defrootTerm_LEN-1];
 800499e:	f8d0 3ffc 	ldr.w	r3, [r0, #4092]	; 0xffc
 80049a2:	ee06 3a90 	vmov	s13, r3
 80049a6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80049aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	ee30 0a27 	vadd.f32	s0, s0, s15
              }
       return (root_INTERPOLATED);//(root_INTERPOLATED);
}
 80049b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ba:	4770      	bx	lr
               return 0;
 80049bc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80049c8 <LUTinterp+0xa8>
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	447fc000 	.word	0x447fc000
 80049c8:	00000000 	.word	0x00000000

080049cc <DDS_Calc>:

void DDS_Calc()
{
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	ed2d 8b02 	vpush	{d8}
	int 		phase_outShift;
	float 		LUTIndexShift;
	float 		LUTIndex;
	float       Offset=1;

	pDDS->TWSum               	=      pDDS->TWSum+pDDS->TW;
 80049d2:	4932      	ldr	r1, [pc, #200]	; (8004a9c <DDS_Calc+0xd0>)
 80049d4:	6a0b      	ldr	r3, [r1, #32]
 80049d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80049d8:	4413      	add	r3, r2
 80049da:	620b      	str	r3, [r1, #32]
	phase_out           		=      pDDS->TWSum;
	if(pDDS->phaseOffset!=pDDS->phaseOffset_1ag)
 80049dc:	edd1 7a03 	vldr	s15, [r1, #12]
 80049e0:	ed91 7a04 	vldr	s14, [r1, #16]
 80049e4:	eef4 7a47 	vcmp.f32	s15, s14
 80049e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ec:	d037      	beq.n	8004a5e <DDS_Calc+0x92>
	    {
		pDDS->TWSumShift       =      pDDS->TWSumShift+pDDS->TW+pDDS->DetTW;
 80049ee:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80049f0:	4402      	add	r2, r0
 80049f2:	6c48      	ldr	r0, [r1, #68]	; 0x44
 80049f4:	4402      	add	r2, r0
 80049f6:	624a      	str	r2, [r1, #36]	; 0x24
		pDDS->phaseOffset_1ag  =      pDDS->phaseOffset;
 80049f8:	edc1 7a04 	vstr	s15, [r1, #16]
	    }
	    else
	    {
	    	pDDS->TWSumShift       =       pDDS->TWSumShift+pDDS->TW;
	    }
	    phase_outShift      	=       pDDS->TWSumShift;
 80049fc:	4927      	ldr	r1, [pc, #156]	; (8004a9c <DDS_Calc+0xd0>)
 80049fe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	    if (phase_outShift >  (1<<pDDS-> accumulatorWidth)-1)
 8004a00:	6988      	ldr	r0, [r1, #24]
 8004a02:	2101      	movs	r1, #1
 8004a04:	4081      	lsls	r1, r0
 8004a06:	1e4c      	subs	r4, r1, #1
 8004a08:	42a2      	cmp	r2, r4
 8004a0a:	dd03      	ble.n	8004a14 <DDS_Calc+0x48>
	    	{
	        	phase_outShift       =      phase_outShift-(1<<pDDS-> accumulatorWidth)+1;//>>pDDS->accumulatorWidth;
 8004a0c:	1a52      	subs	r2, r2, r1
 8004a0e:	3201      	adds	r2, #1
	        	pDDS->TWSumShift        =     phase_outShift;
 8004a10:	4d22      	ldr	r5, [pc, #136]	; (8004a9c <DDS_Calc+0xd0>)
 8004a12:	626a      	str	r2, [r5, #36]	; 0x24
	    	}
	    if (phase_out >  (1<<pDDS-> accumulatorWidth)-1)
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	dd03      	ble.n	8004a20 <DDS_Calc+0x54>
	       {
	        	phase_out       	=   phase_out-(1<<pDDS-> accumulatorWidth)+1;//>>pDDS->accumulatorWidth;
 8004a18:	1a5b      	subs	r3, r3, r1
 8004a1a:	3301      	adds	r3, #1
	        	pDDS->TWSum       =   phase_out;
 8004a1c:	491f      	ldr	r1, [pc, #124]	; (8004a9c <DDS_Calc+0xd0>)
 8004a1e:	620b      	str	r3, [r1, #32]
	       }
	     LUTIndexShift   =   (float)phase_outShift/(float)((1<<(pDDS->accumulatorWidth-pDDS->LUTGridWidth)));
 8004a20:	ee07 2a90 	vmov	s15, r2
 8004a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a28:	491c      	ldr	r1, [pc, #112]	; (8004a9c <DDS_Calc+0xd0>)
 8004a2a:	69ca      	ldr	r2, [r1, #28]
 8004a2c:	1a80      	subs	r0, r0, r2
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4082      	lsls	r2, r0
 8004a32:	ee07 2a10 	vmov	s14, r2
 8004a36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a3a:	ee87 8a87 	vdiv.f32	s16, s15, s14
	     LUTIndex        =   (float)phase_out/(float)((1<<(pDDS->accumulatorWidth-pDDS->LUTGridWidth)));
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a46:	ee87 0a87 	vdiv.f32	s0, s15, s14
	 if (pDDS->enable==1)
 8004a4a:	680b      	ldr	r3, [r1, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d00b      	beq.n	8004a68 <DDS_Calc+0x9c>
	     pDDS->Out =LUTinterp(LUTIndex, LUT_T, LUT_d)*pDDS->amp;
	     pDDS->ShiftOut =LUTinterp(LUTIndexShift, LUT_T, LUT_d)+Offset;
	 }
	 else
	 {
		 pDDS->Out=0;
 8004a50:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <DDS_Calc+0xd0>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
		 pDDS->ShiftOut=0;
 8004a56:	635a      	str	r2, [r3, #52]	; 0x34
	 }
};
 8004a58:	ecbd 8b02 	vpop	{d8}
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
	    	pDDS->TWSumShift       =       pDDS->TWSumShift+pDDS->TW;
 8004a5e:	490f      	ldr	r1, [pc, #60]	; (8004a9c <DDS_Calc+0xd0>)
 8004a60:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004a62:	4402      	add	r2, r0
 8004a64:	624a      	str	r2, [r1, #36]	; 0x24
 8004a66:	e7c9      	b.n	80049fc <DDS_Calc+0x30>
	     pDDS->Out =LUTinterp(LUTIndex, LUT_T, LUT_d)*pDDS->amp;
 8004a68:	4e0d      	ldr	r6, [pc, #52]	; (8004aa0 <DDS_Calc+0xd4>)
 8004a6a:	4d0e      	ldr	r5, [pc, #56]	; (8004aa4 <DDS_Calc+0xd8>)
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7ff ff56 	bl	8004920 <LUTinterp>
 8004a74:	4c09      	ldr	r4, [pc, #36]	; (8004a9c <DDS_Calc+0xd0>)
 8004a76:	edd4 7a01 	vldr	s15, [r4, #4]
 8004a7a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004a7e:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
	     pDDS->ShiftOut =LUTinterp(LUTIndexShift, LUT_T, LUT_d)+Offset;
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	eeb0 0a48 	vmov.f32	s0, s16
 8004a8a:	f7ff ff49 	bl	8004920 <LUTinterp>
 8004a8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004a92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004a96:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 8004a9a:	e7dd      	b.n	8004a58 <DDS_Calc+0x8c>
 8004a9c:	240002fc 	.word	0x240002fc
 8004aa0:	240003c0 	.word	0x240003c0
 8004aa4:	240013d4 	.word	0x240013d4

08004aa8 <PID_Calc>:

void PID_Calc(tPID* pPID,uint8_t PIDInputOption, double ADCvalue,double LockIn)
{
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	4604      	mov	r4, r0
	double 			output;
	double 			outputsat;
	double          pd;
	pd          				= 	PIDInputSWitch(PIDInputOption, ADCvalue, LockIn);
 8004aac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004ab0:	eef7 0bc1 	vcvt.f32.f64	s1, d1
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	f7ff fe41 	bl	800473c <PIDInputSWitch>
 8004aba:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 8004abe:	ed94 7b2c 	vldr	d7, [r4, #176]	; 0xb0
 8004ac2:	ee37 0b40 	vsub.f64	d0, d7, d0
 8004ac6:	ed94 7b1e 	vldr	d7, [r4, #120]	; 0x78
 8004aca:	ee20 0b07 	vmul.f64	d0, d0, d7
 8004ace:	ed84 0b18 	vstr	d0, [r4, #96]	; 0x60
	if (pPID->En>=1)
 8004ad2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	dd40      	ble.n	8004b5c <PID_Calc+0xb4>
	{
		output = (pPID->preout+pPID->a0*pPID->error + pPID->a1*pPID->error_1lag + pPID->a2*pPID->error_2lag+pPID->aw*pPID->error_AnWi)/(1+pPID->omega*pPID->_Ts);
 8004ada:	ed94 6b20 	vldr	d6, [r4, #128]	; 0x80
 8004ade:	ed94 7b24 	vldr	d7, [r4, #144]	; 0x90
 8004ae2:	ee00 6b07 	vmla.f64	d6, d0, d7
 8004ae6:	ed94 5b26 	vldr	d5, [r4, #152]	; 0x98
 8004aea:	ed94 7b1a 	vldr	d7, [r4, #104]	; 0x68
 8004aee:	ee05 6b07 	vmla.f64	d6, d5, d7
 8004af2:	ed94 5b28 	vldr	d5, [r4, #160]	; 0xa0
 8004af6:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8004afa:	ee05 6b07 	vmla.f64	d6, d5, d7
 8004afe:	ed94 5b2a 	vldr	d5, [r4, #168]	; 0xa8
 8004b02:	ed94 7b16 	vldr	d7, [r4, #88]	; 0x58
 8004b06:	ee05 6b07 	vmla.f64	d6, d5, d7
 8004b0a:	ed94 4b12 	vldr	d4, [r4, #72]	; 0x48
 8004b0e:	ed94 7b00 	vldr	d7, [r4]
 8004b12:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8004b16:	ee04 5b07 	vmla.f64	d5, d4, d7
 8004b1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
//		}
//	if( output < pPID->_min*3 )
//			{
//			   output = 3*pPID->_min;
//			}
	pPID->preout = output;
 8004b1e:	ed84 7b20 	vstr	d7, [r4, #128]	; 0x80
	    // Restrict to max/min
	if( output > pPID->_max )
 8004b22:	ed94 6b08 	vldr	d6, [r4, #32]
 8004b26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2e:	dc06      	bgt.n	8004b3e <PID_Calc+0x96>
	{
	   outputsat = pPID->_max;
	}
	else if( output < pPID->_min )
 8004b30:	ed94 6b0a 	vldr	d6, [r4, #40]	; 0x28
 8004b34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	d515      	bpl.n	8004b6a <PID_Calc+0xc2>
	}
	else
	{
	   outputsat = output;
	}
	pPID->error_AnWi              =   outputsat-output;
 8004b3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b42:	ed84 7b16 	vstr	d7, [r4, #88]	; 0x58
	    // Save error to previous error
	pPID->error_2lag = pPID->error_1lag;
 8004b46:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8004b4a:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	pPID->error_1lag = pPID->error;
 8004b4e:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8004b52:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
//   tty3 =Kd/pPID->_Ts;
	pPID->outvalue= outputsat;
 8004b56:	ed84 6b2e 	vstr	d6, [r4, #184]	; 0xb8
 8004b5a:	bd10      	pop	{r4, pc}
		pPID->error             =        0;
 8004b5c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8004b70 <PID_Calc+0xc8>
 8004b60:	ed84 7b18 	vstr	d7, [r4, #96]	; 0x60
		pPID->error_1lag        =        0;
 8004b64:	ed84 7b1a 	vstr	d7, [r4, #104]	; 0x68
 8004b68:	e7d9      	b.n	8004b1e <PID_Calc+0x76>
	   outputsat = output;
 8004b6a:	eeb0 6b47 	vmov.f64	d6, d7
 8004b6e:	e7e6      	b.n	8004b3e <PID_Calc+0x96>
	...

08004b78 <SPI1_start>:
}
void SPI1_start()
{
 8004b78:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	2110      	movs	r1, #16
 8004b7e:	4806      	ldr	r0, [pc, #24]	; (8004b98 <SPI1_start+0x20>)
 8004b80:	f7fc fc1e 	bl	80013c0 <HAL_GPIO_WritePin>
	  SPI1->CR1 |= SPI_CR1_SPE_Msk;    // enable SPI
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <SPI1_start+0x24>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
	  SPI1->CR1 |= SPI_CR1_CSTART_Msk; // master transfer start
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	bd08      	pop	{r3, pc}
 8004b98:	58020400 	.word	0x58020400
 8004b9c:	40013000 	.word	0x40013000

08004ba0 <SPI1_transmit>:

}
void SPI1_transmit(uint16_t data)
{
    GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 8004ba0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <SPI1_transmit+0x20>)
 8004ba6:	619a      	str	r2, [r3, #24]
    *ptxdr_16bits = data;
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <SPI1_transmit+0x24>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	8018      	strh	r0, [r3, #0]
    while( !(SPI1->SR & SPI_SR_TXC_Msk));  // check if FiFo transmission complete
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <SPI1_transmit+0x28>)
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004bb6:	d0fa      	beq.n	8004bae <SPI1_transmit+0xe>
    GPIOB->BSRR = GPIO_PIN_4; // Set
 8004bb8:	2210      	movs	r2, #16
 8004bba:	4b01      	ldr	r3, [pc, #4]	; (8004bc0 <SPI1_transmit+0x20>)
 8004bbc:	619a      	str	r2, [r3, #24]
 8004bbe:	4770      	bx	lr
 8004bc0:	58020400 	.word	0x58020400
 8004bc4:	24000010 	.word	0x24000010
 8004bc8:	40013000 	.word	0x40013000

08004bcc <ADC_read>:
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,HAL_ADC_STATE_REG_BUSY);
   //__HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
    ADC1->ISR |=ADC_ISR_EOC_Msk;
    ADC1->CR |=ADC_CR_ADSTART_Msk;*/
   // MODIFY_REG(ADC1->CR,ADC_CR_BITS_PROPERTY_RS,ADC_CR_ADSTART);
	 ADC1->ISR |=ADC_ISR_EOC_Msk;
 8004bcc:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <ADC_read+0x24>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	f042 0204 	orr.w	r2, r2, #4
 8004bd4:	601a      	str	r2, [r3, #0]
	 ADC1->CR |=ADC_CR_ADSTART_Msk;
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	f042 0204 	orr.w	r2, r2, #4
 8004bdc:	609a      	str	r2, [r3, #8]
	 while ((ADC1->ISR  & ADC_ISR_EOC_Msk) == 0UL);
 8004bde:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <ADC_read+0x24>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f013 0f04 	tst.w	r3, #4
 8004be6:	d0fa      	beq.n	8004bde <ADC_read+0x12>
	 adc_value =ADC1->DR;
 8004be8:	4b01      	ldr	r3, [pc, #4]	; (8004bf0 <ADC_read+0x24>)
 8004bea:	6c18      	ldr	r0, [r3, #64]	; 0x40
   // ADC_STATE_CLR_SET(hadc->State,HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,HAL_ADC_STATE_READY);
    return adc_value;
}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40022000 	.word	0x40022000
 8004bf4:	00000000 	.word	0x00000000

08004bf8 <HAL_TIM_PeriodElapsedCallback>:

//	  DACOut=(uint32_t)(2.0/(3.3/65536));

}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_0);
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4846      	ldr	r0, [pc, #280]	; (8004d18 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004c00:	f7fc fbe4 	bl	80013cc <HAL_GPIO_TogglePin>

		//HAL_GPIO_WritePin(GPIOG,GPIO_PIN_0,GPIO_PIN_SET);
		SPI_Anf =DWT->CYCCNT;
 8004c04:	4c45      	ldr	r4, [pc, #276]	; (8004d1c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004c06:	6863      	ldr	r3, [r4, #4]
 8004c08:	4f45      	ldr	r7, [pc, #276]	; (8004d20 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004c0a:	603b      	str	r3, [r7, #0]
		SPI1_transmit(DACoutput1);
 8004c0c:	f8df a154 	ldr.w	sl, [pc, #340]	; 8004d64 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8004c10:	f8ba 0000 	ldrh.w	r0, [sl]
 8004c14:	f7ff ffc4 	bl	8004ba0 <SPI1_transmit>
		PT_Anf =PT_End;
 8004c18:	4d42      	ldr	r5, [pc, #264]	; (8004d24 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004c1a:	4e43      	ldr	r6, [pc, #268]	; (8004d28 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	602b      	str	r3, [r5, #0]
		SPI_End =DWT->CYCCNT;
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004d68 <HAL_TIM_PeriodElapsedCallback+0x170>
 8004c26:	f8c8 3000 	str.w	r3, [r8]
		adc_value=ADC_read(&hadc1);
 8004c2a:	4840      	ldr	r0, [pc, #256]	; (8004d2c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004c2c:	f7ff ffce 	bl	8004bcc <ADC_read>
 8004c30:	4b3f      	ldr	r3, [pc, #252]	; (8004d30 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004c32:	6018      	str	r0, [r3, #0]
		ADC_End =DWT->CYCCNT;
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8004d6c <HAL_TIM_PeriodElapsedCallback+0x174>
 8004c3a:	f8c9 3000 	str.w	r3, [r9]
		volt_value = DIG2WOLT*(float)(adc_value);
 8004c3e:	ee07 0a90 	vmov	s15, r0
 8004c42:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8004c46:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004c4a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004d08 <HAL_TIM_PeriodElapsedCallback+0x110>
 8004c4e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8004c52:	4b38      	ldr	r3, [pc, #224]	; (8004d34 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004c54:	ed83 0b00 	vstr	d0, [r3]
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 8004c58:	4b37      	ldr	r3, [pc, #220]	; (8004d38 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004c5a:	ed93 1b00 	vldr	d1, [r3]
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004c60:	7819      	ldrb	r1, [r3, #0]
 8004c62:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	f7ff ff1f 	bl	8004aa8 <PID_Calc>
		DDS_Calc();
 8004c6a:	f7ff feaf 	bl	80049cc <DDS_Calc>
	//	DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
		DACoutput1=(uint16_t)(InstanceDDS.ShiftOut*VOLT2DIG16BIT); //
 8004c6e:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004c70:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004c74:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004d48 <HAL_TIM_PeriodElapsedCallback+0x150>
 8004c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c80:	ee17 3a90 	vmov	r3, s15
 8004c84:	f8aa 3000 	strh.w	r3, [sl]
		PID_End=DWT->CYCCNT;
 8004c88:	6863      	ldr	r3, [r4, #4]
 8004c8a:	4a30      	ldr	r2, [pc, #192]	; (8004d4c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004c8c:	6013      	str	r3, [r2, #0]
		PID_duration =(PID_End-ADC_End)*0.0025;
 8004c8e:	f8d9 2000 	ldr.w	r2, [r9]
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	ee06 3a10 	vmov	s12, r3
 8004c98:	eeb8 6b46 	vcvt.f64.u32	d6, s12
 8004c9c:	ed9f 4b1c 	vldr	d4, [pc, #112]	; 8004d10 <HAL_TIM_PeriodElapsedCallback+0x118>
 8004ca0:	ee26 6b04 	vmul.f64	d6, d6, d4
 8004ca4:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ca6:	ed83 6b00 	vstr	d6, [r3]
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 8004caa:	f8d8 3000 	ldr.w	r3, [r8]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	ee05 2a10 	vmov	s10, r2
 8004cb4:	eeb8 5b45 	vcvt.f64.u32	d5, s10
 8004cb8:	ee25 5b04 	vmul.f64	d5, d5, d4
 8004cbc:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004cbe:	ed82 5b00 	vstr	d5, [r2]
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	ee07 3a10 	vmov	s14, r3
 8004cca:	eeb8 7b47 	vcvt.f64.u32	d7, s14
 8004cce:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004cd2:	4b21      	ldr	r3, [pc, #132]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004cd4:	ed83 7b00 	vstr	d7, [r3]
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 8004cd8:	ee36 6b05 	vadd.f64	d6, d6, d5
 8004cdc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004ce2:	ed83 7b00 	vstr	d7, [r3]
		PT_End = DWT->CYCCNT;
 8004ce6:	6863      	ldr	r3, [r4, #4]
 8004ce8:	6033      	str	r3, [r6, #0]
		duration = (PT_End-PT_Anf)*0.0025;
 8004cea:	682a      	ldr	r2, [r5, #0]
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	ee07 3a10 	vmov	s14, r3
 8004cf2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
 8004cf6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004cfa:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004cfc:	ed83 7b00 	vstr	d7, [r3]
 8004d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d04:	f3af 8000 	nop.w
 8004d08:	66666666 	.word	0x66666666
 8004d0c:	3f0a6666 	.word	0x3f0a6666
 8004d10:	47ae147b 	.word	0x47ae147b
 8004d14:	3f647ae1 	.word	0x3f647ae1
 8004d18:	58021800 	.word	0x58021800
 8004d1c:	e0001000 	.word	0xe0001000
 8004d20:	24000068 	.word	0x24000068
 8004d24:	24000060 	.word	0x24000060
 8004d28:	24000064 	.word	0x24000064
 8004d2c:	24000170 	.word	0x24000170
 8004d30:	24000078 	.word	0x24000078
 8004d34:	24000088 	.word	0x24000088
 8004d38:	24000048 	.word	0x24000048
 8004d3c:	24000008 	.word	0x24000008
 8004d40:	2400000c 	.word	0x2400000c
 8004d44:	240002fc 	.word	0x240002fc
 8004d48:	46cccc00 	.word	0x46cccc00
 8004d4c:	24000050 	.word	0x24000050
 8004d50:	24000058 	.word	0x24000058
 8004d54:	24000040 	.word	0x24000040
 8004d58:	24000070 	.word	0x24000070
 8004d5c:	240003b8 	.word	0x240003b8
 8004d60:	24000080 	.word	0x24000080
 8004d64:	240003a4 	.word	0x240003a4
 8004d68:	2400006c 	.word	0x2400006c
 8004d6c:	2400003c 	.word	0x2400003c

08004d70 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004d70:	b672      	cpsid	i
 8004d72:	e7fe      	b.n	8004d72 <Error_Handler+0x2>

08004d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d74:	b500      	push	{lr}
 8004d76:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d78:	224c      	movs	r2, #76	; 0x4c
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	a809      	add	r0, sp, #36	; 0x24
 8004d7e:	f000 fb37 	bl	80053f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d82:	2220      	movs	r2, #32
 8004d84:	2100      	movs	r1, #0
 8004d86:	a801      	add	r0, sp, #4
 8004d88:	f000 fb32 	bl	80053f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004d8c:	2002      	movs	r0, #2
 8004d8e:	f7fc fb27 	bl	80013e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d92:	2300      	movs	r3, #0
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	4b28      	ldr	r3, [pc, #160]	; (8004e38 <SystemClock_Config+0xc4>)
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <SystemClock_Config+0xc8>)
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004db0:	619a      	str	r2, [r3, #24]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <SystemClock_Config+0xc8>)
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004dc4:	d0fa      	beq.n	8004dbc <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004dc6:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <SystemClock_Config+0xcc>)
 8004dc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	f043 0302 	orr.w	r3, r3, #2
 8004dd2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ddc:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004dde:	2302      	movs	r3, #2
 8004de0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004de2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004de4:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004de6:	2264      	movs	r2, #100	; 0x64
 8004de8:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004dea:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004dec:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004dee:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004df0:	230c      	movs	r3, #12
 8004df2:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004df8:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dfa:	a809      	add	r0, sp, #36	; 0x24
 8004dfc:	f7fc fb1a 	bl	8001434 <HAL_RCC_OscConfig>
 8004e00:	b9b0      	cbnz	r0, 8004e30 <SystemClock_Config+0xbc>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e02:	233f      	movs	r3, #63	; 0x3f
 8004e04:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e06:	2303      	movs	r3, #3
 8004e08:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004e0e:	2308      	movs	r3, #8
 8004e10:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004e12:	2340      	movs	r3, #64	; 0x40
 8004e14:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004e16:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e1c:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004e1e:	9308      	str	r3, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004e20:	2102      	movs	r1, #2
 8004e22:	a801      	add	r0, sp, #4
 8004e24:	f7fc ff22 	bl	8001c6c <HAL_RCC_ClockConfig>
 8004e28:	b920      	cbnz	r0, 8004e34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
  }
}
 8004e2a:	b01d      	add	sp, #116	; 0x74
 8004e2c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004e30:	f7ff ff9e 	bl	8004d70 <Error_Handler>
    Error_Handler();
 8004e34:	f7ff ff9c 	bl	8004d70 <Error_Handler>
 8004e38:	58000400 	.word	0x58000400
 8004e3c:	58024800 	.word	0x58024800
 8004e40:	58024400 	.word	0x58024400

08004e44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004e44:	b500      	push	{lr}
 8004e46:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e48:	22bc      	movs	r2, #188	; 0xbc
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	a801      	add	r0, sp, #4
 8004e4e:	f000 facf 	bl	80053f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <PeriphCommonClock_Config+0x54>)
 8004e54:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8004e56:	2301      	movs	r3, #1
 8004e58:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 25;
 8004e5a:	2219      	movs	r2, #25
 8004e5c:	920b      	str	r2, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 1;
 8004e5e:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8004e60:	2302      	movs	r3, #2
 8004e62:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8004e64:	2303      	movs	r3, #3
 8004e66:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8004e68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e6c:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8004e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e72:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8004e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e78:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8004e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e7e:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8004e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e84:	932f      	str	r3, [sp, #188]	; 0xbc

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e86:	a801      	add	r0, sp, #4
 8004e88:	f7fd f966 	bl	8002158 <HAL_RCCEx_PeriphCLKConfig>
 8004e8c:	b910      	cbnz	r0, 8004e94 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
  }
}
 8004e8e:	b031      	add	sp, #196	; 0xc4
 8004e90:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004e94:	f7ff ff6c 	bl	8004d70 <Error_Handler>
 8004e98:	40083000 	.word	0x40083000
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <main>:
{
 8004ea0:	b508      	push	{r3, lr}
  HAL_Init();
 8004ea2:	f7fb fa41 	bl	8000328 <HAL_Init>
  SystemClock_Config();
 8004ea6:	f7ff ff65 	bl	8004d74 <SystemClock_Config>
  PeriphCommonClock_Config();
 8004eaa:	f7ff ffcb 	bl	8004e44 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8004eae:	f7ff fb45 	bl	800453c <MX_GPIO_Init>
  MX_DAC1_Init();
 8004eb2:	f7ff fadb 	bl	800446c <MX_DAC1_Init>
  MX_ADC1_Init();
 8004eb6:	f7ff f9e3 	bl	8004280 <MX_ADC1_Init>
  MX_ADC3_Init();
 8004eba:	f7ff fa35 	bl	8004328 <MX_ADC3_Init>
  MX_TIM2_Init();
 8004ebe:	f000 f9f1 	bl	80052a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004ec2:	f000 f84b 	bl	8004f5c <MX_SPI1_Init>
  MX_SPI4_Init();
 8004ec6:	f000 f877 	bl	8004fb8 <MX_SPI4_Init>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004eca:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <main+0x98>)
 8004ecc:	68d3      	ldr	r3, [r2, #12]
 8004ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= 1;
 8004ed4:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <main+0x9c>)
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 8004ede:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004ee2:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <main+0xa0>)
 8004ee4:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 8004ee6:	4c17      	ldr	r4, [pc, #92]	; (8004f44 <main+0xa4>)
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	2100      	movs	r1, #0
 8004eec:	6291      	str	r1, [r2, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 8004eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ef0:	60e3      	str	r3, [r4, #12]
  paramFreq = CTRLFREQUENCY;
 8004ef2:	4d15      	ldr	r5, [pc, #84]	; (8004f48 <main+0xa8>)
 8004ef4:	a30e      	add	r3, pc, #56	; (adr r3, 8004f30 <main+0x90>)
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	e9c5 2300 	strd	r2, r3, [r5]
  PID_vInit(pPID1);
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <main+0xac>)
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f7ff fc21 	bl	8004748 <PID_vInit>
  DDS_vInit(0.05, 1000.0, paramFreq, ACCUMULATORWIDTH, LUTGRIDWIDTH);
 8004f06:	ed95 1b00 	vldr	d1, [r5]
 8004f0a:	210a      	movs	r1, #10
 8004f0c:	2010      	movs	r0, #16
 8004f0e:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8004f12:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004f50 <main+0xb0>
 8004f16:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8004f54 <main+0xb4>
 8004f1a:	f7ff fc65 	bl	80047e8 <DDS_vInit>
  ADC_Enable(&hadc1);
 8004f1e:	480e      	ldr	r0, [pc, #56]	; (8004f58 <main+0xb8>)
 8004f20:	f7fb fcf2 	bl	8000908 <ADC_Enable>
  SPI1_start();
 8004f24:	f7ff fe28 	bl	8004b78 <SPI1_start>
  HAL_TIM_Base_Start_IT(&htim2);
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7fe fdfb 	bl	8003b24 <HAL_TIM_Base_Start_IT>
 8004f2e:	e7fe      	b.n	8004f2e <main+0x8e>
 8004f30:	00000000 	.word	0x00000000
 8004f34:	41086a00 	.word	0x41086a00
 8004f38:	e000edf0 	.word	0xe000edf0
 8004f3c:	e0001000 	.word	0xe0001000
 8004f40:	240013d0 	.word	0x240013d0
 8004f44:	240024e8 	.word	0x240024e8
 8004f48:	240013c0 	.word	0x240013c0
 8004f4c:	2400000c 	.word	0x2400000c
 8004f50:	447a0000 	.word	0x447a0000
 8004f54:	3d4ccccd 	.word	0x3d4ccccd
 8004f58:	24000170 	.word	0x24000170

08004f5c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004f5c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004f5e:	4814      	ldr	r0, [pc, #80]	; (8004fb0 <MX_SPI1_Init+0x54>)
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <MX_SPI1_Init+0x58>)
 8004f62:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f68:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8004f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f6e:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004f70:	230f      	movs	r3, #15
 8004f72:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f74:	2300      	movs	r3, #0
 8004f76:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f78:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f7e:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f84:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f86:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f88:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f8a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004f8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004f8e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004f90:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004f92:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004f94:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004f96:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004f98:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004f9a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004f9c:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004f9e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004fa0:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004fa2:	f7fe fb9b 	bl	80036dc <HAL_SPI_Init>
 8004fa6:	b900      	cbnz	r0, 8004faa <MX_SPI1_Init+0x4e>
 8004fa8:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 8004faa:	f7ff fee1 	bl	8004d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004fae:	e7fb      	b.n	8004fa8 <MX_SPI1_Init+0x4c>
 8004fb0:	24002460 	.word	0x24002460
 8004fb4:	40013000 	.word	0x40013000

08004fb8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004fb8:	b508      	push	{r3, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004fba:	4815      	ldr	r0, [pc, #84]	; (8005010 <MX_SPI4_Init+0x58>)
 8004fbc:	4b15      	ldr	r3, [pc, #84]	; (8005014 <MX_SPI4_Init+0x5c>)
 8004fbe:	6003      	str	r3, [r0, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004fc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fc4:	6043      	str	r3, [r0, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8004fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fca:	6083      	str	r3, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	60c3      	str	r3, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd4:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6143      	str	r3, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004fda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004fde:	6182      	str	r2, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fe0:	61c3      	str	r3, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fe2:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fe4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8004fe8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fee:	6342      	str	r2, [r0, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004ff0:	6383      	str	r3, [r0, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004ff2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004ff4:	6403      	str	r3, [r0, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004ff6:	6443      	str	r3, [r0, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004ff8:	6483      	str	r3, [r0, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004ffa:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004ffc:	6503      	str	r3, [r0, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004ffe:	6543      	str	r3, [r0, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005000:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8005002:	f7fe fb6b 	bl	80036dc <HAL_SPI_Init>
 8005006:	b900      	cbnz	r0, 800500a <MX_SPI4_Init+0x52>
 8005008:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800500a:	f7ff feb1 	bl	8004d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800500e:	e7fb      	b.n	8005008 <MX_SPI4_Init+0x50>
 8005010:	240023d8 	.word	0x240023d8
 8005014:	40013400 	.word	0x40013400

08005018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005018:	b500      	push	{lr}
 800501a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800501c:	2300      	movs	r3, #0
 800501e:	9305      	str	r3, [sp, #20]
 8005020:	9306      	str	r3, [sp, #24]
 8005022:	9307      	str	r3, [sp, #28]
 8005024:	9308      	str	r3, [sp, #32]
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8005028:	6803      	ldr	r3, [r0, #0]
 800502a:	4a2b      	ldr	r2, [pc, #172]	; (80050d8 <HAL_SPI_MspInit+0xc0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d005      	beq.n	800503c <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI4)
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <HAL_SPI_MspInit+0xc4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d028      	beq.n	8005088 <HAL_SPI_MspInit+0x70>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8005036:	b00b      	add	sp, #44	; 0x2c
 8005038:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800503c:	4b28      	ldr	r3, [pc, #160]	; (80050e0 <HAL_SPI_MspInit+0xc8>)
 800503e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005042:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005046:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800504a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800504e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005052:	9201      	str	r2, [sp, #4]
 8005054:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005056:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800505a:	f042 0202 	orr.w	r2, r2, #2
 800505e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	9302      	str	r3, [sp, #8]
 800506c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800506e:	2328      	movs	r3, #40	; 0x28
 8005070:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005072:	2302      	movs	r3, #2
 8005074:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005076:	2303      	movs	r3, #3
 8005078:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800507a:	2305      	movs	r3, #5
 800507c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507e:	a905      	add	r1, sp, #20
 8005080:	4818      	ldr	r0, [pc, #96]	; (80050e4 <HAL_SPI_MspInit+0xcc>)
 8005082:	f7fc f8a5 	bl	80011d0 <HAL_GPIO_Init>
 8005086:	e7d6      	b.n	8005036 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_SPI_MspInit+0xc8>)
 800508a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800508e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005092:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005096:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800509a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800509e:	9203      	str	r2, [sp, #12]
 80050a0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80050a6:	f042 0210 	orr.w	r2, r2, #16
 80050aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80050ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80050ba:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80050be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c0:	2302      	movs	r3, #2
 80050c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c4:	2303      	movs	r3, #3
 80050c6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80050c8:	2305      	movs	r3, #5
 80050ca:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050cc:	a905      	add	r1, sp, #20
 80050ce:	4806      	ldr	r0, [pc, #24]	; (80050e8 <HAL_SPI_MspInit+0xd0>)
 80050d0:	f7fc f87e 	bl	80011d0 <HAL_GPIO_Init>
}
 80050d4:	e7af      	b.n	8005036 <HAL_SPI_MspInit+0x1e>
 80050d6:	bf00      	nop
 80050d8:	40013000 	.word	0x40013000
 80050dc:	40013400 	.word	0x40013400
 80050e0:	58024400 	.word	0x58024400
 80050e4:	58020400 	.word	0x58020400
 80050e8:	58021000 	.word	0x58021000

080050ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050ec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <HAL_MspInit+0x20>)
 80050f0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80050f4:	f042 0202 	orr.w	r2, r2, #2
 80050f8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80050fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005108:	b002      	add	sp, #8
 800510a:	4770      	bx	lr
 800510c:	58024400 	.word	0x58024400

08005110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005110:	e7fe      	b.n	8005110 <NMI_Handler>

08005112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005112:	e7fe      	b.n	8005112 <HardFault_Handler>

08005114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005114:	e7fe      	b.n	8005114 <MemManage_Handler>

08005116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005116:	e7fe      	b.n	8005116 <BusFault_Handler>

08005118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005118:	e7fe      	b.n	8005118 <UsageFault_Handler>

0800511a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800511a:	4770      	bx	lr

0800511c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800511c:	4770      	bx	lr

0800511e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800511e:	4770      	bx	lr

08005120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005122:	f7fb f92f 	bl	8000384 <HAL_IncTick>
 8005126:	bd08      	pop	{r3, pc}

08005128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005128:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800512a:	4802      	ldr	r0, [pc, #8]	; (8005134 <TIM2_IRQHandler+0xc>)
 800512c:	f7fe fd43 	bl	8003bb6 <HAL_TIM_IRQHandler>
 8005130:	bd08      	pop	{r3, pc}
 8005132:	bf00      	nop
 8005134:	240024e8 	.word	0x240024e8

08005138 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005138:	4a29      	ldr	r2, [pc, #164]	; (80051e0 <SystemInit+0xa8>)
 800513a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800513e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005142:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005146:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <SystemInit+0xac>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	2b06      	cmp	r3, #6
 8005150:	d806      	bhi.n	8005160 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005152:	4a24      	ldr	r2, [pc, #144]	; (80051e4 <SystemInit+0xac>)
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	f023 030f 	bic.w	r3, r3, #15
 800515a:	f043 0307 	orr.w	r3, r3, #7
 800515e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005160:	4b21      	ldr	r3, [pc, #132]	; (80051e8 <SystemInit+0xb0>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800516a:	2200      	movs	r2, #0
 800516c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <SystemInit+0xb4>)
 8005172:	400a      	ands	r2, r1
 8005174:	601a      	str	r2, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <SystemInit+0xac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	2b07      	cmp	r3, #7
 8005180:	d906      	bls.n	8005190 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005182:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <SystemInit+0xac>)
 8005184:	6813      	ldr	r3, [r2, #0]
 8005186:	f023 030f 	bic.w	r3, r3, #15
 800518a:	f043 0307 	orr.w	r3, r3, #7
 800518e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005190:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <SystemInit+0xb0>)
 8005192:	2200      	movs	r2, #0
 8005194:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005196:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005198:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800519a:	4915      	ldr	r1, [pc, #84]	; (80051f0 <SystemInit+0xb8>)
 800519c:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800519e:	4915      	ldr	r1, [pc, #84]	; (80051f4 <SystemInit+0xbc>)
 80051a0:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80051a2:	4915      	ldr	r1, [pc, #84]	; (80051f8 <SystemInit+0xc0>)
 80051a4:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80051a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80051a8:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80051aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80051ac:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80051b0:	6819      	ldr	r1, [r3, #0]
 80051b2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80051b6:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <SystemInit+0xc4>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b10      	ldr	r3, [pc, #64]	; (8005200 <SystemInit+0xc8>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c6:	d202      	bcs.n	80051ce <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80051c8:	2201      	movs	r2, #1
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <SystemInit+0xcc>)
 80051cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80051ce:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <SystemInit+0xd0>)
 80051d4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051da:	4b01      	ldr	r3, [pc, #4]	; (80051e0 <SystemInit+0xa8>)
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	4770      	bx	lr
 80051e0:	e000ed00 	.word	0xe000ed00
 80051e4:	52002000 	.word	0x52002000
 80051e8:	58024400 	.word	0x58024400
 80051ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80051f0:	02020200 	.word	0x02020200
 80051f4:	01ff0000 	.word	0x01ff0000
 80051f8:	01010280 	.word	0x01010280
 80051fc:	5c001000 	.word	0x5c001000
 8005200:	ffff0000 	.word	0xffff0000
 8005204:	51008108 	.word	0x51008108
 8005208:	52004000 	.word	0x52004000

0800520c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800520c:	6803      	ldr	r3, [r0, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005212:	d000      	beq.n	8005216 <HAL_TIM_Base_MspInit+0xa>
 8005214:	4770      	bx	lr
{
 8005216:	b500      	push	{lr}
 8005218:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <HAL_TIM_Base_MspInit+0x40>)
 800521c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005220:	f042 0201 	orr.w	r2, r2, #1
 8005224:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8005228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005234:	2200      	movs	r2, #0
 8005236:	4611      	mov	r1, r2
 8005238:	201c      	movs	r0, #28
 800523a:	f7fb feb5 	bl	8000fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800523e:	201c      	movs	r0, #28
 8005240:	f7fb fee2 	bl	8001008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005244:	b003      	add	sp, #12
 8005246:	f85d fb04 	ldr.w	pc, [sp], #4
 800524a:	bf00      	nop
 800524c:	58024400 	.word	0x58024400

08005250 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005250:	b500      	push	{lr}
 8005252:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005254:	2300      	movs	r3, #0
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	9302      	str	r3, [sp, #8]
 800525a:	9303      	str	r3, [sp, #12]
 800525c:	9304      	str	r3, [sp, #16]
 800525e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 8005260:	6803      	ldr	r3, [r0, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d002      	beq.n	800526e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005268:	b007      	add	sp, #28
 800526a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <HAL_TIM_MspPostInit+0x4c>)
 8005270:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800527c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005288:	2301      	movs	r3, #1
 800528a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528c:	2202      	movs	r2, #2
 800528e:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005290:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005292:	a901      	add	r1, sp, #4
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <HAL_TIM_MspPostInit+0x50>)
 8005296:	f7fb ff9b 	bl	80011d0 <HAL_GPIO_Init>
}
 800529a:	e7e5      	b.n	8005268 <HAL_TIM_MspPostInit+0x18>
 800529c:	58024400 	.word	0x58024400
 80052a0:	58020000 	.word	0x58020000

080052a4 <MX_TIM2_Init>:
{
 80052a4:	b500      	push	{lr}
 80052a6:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052a8:	2300      	movs	r3, #0
 80052aa:	930a      	str	r3, [sp, #40]	; 0x28
 80052ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ae:	930c      	str	r3, [sp, #48]	; 0x30
 80052b0:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052b2:	9307      	str	r3, [sp, #28]
 80052b4:	9308      	str	r3, [sp, #32]
 80052b6:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	9302      	str	r3, [sp, #8]
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	9304      	str	r3, [sp, #16]
 80052c2:	9305      	str	r3, [sp, #20]
 80052c4:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 80052c6:	4822      	ldr	r0, [pc, #136]	; (8005350 <MX_TIM2_Init+0xac>)
 80052c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052cc:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80052ce:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052d0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295
 80052d6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052d8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052da:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80052dc:	f7fe fdb8 	bl	8003e50 <HAL_TIM_Base_Init>
 80052e0:	bb38      	cbnz	r0, 8005332 <MX_TIM2_Init+0x8e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052e2:	a90e      	add	r1, sp, #56	; 0x38
 80052e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052e8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052ec:	4818      	ldr	r0, [pc, #96]	; (8005350 <MX_TIM2_Init+0xac>)
 80052ee:	f7fe fef7 	bl	80040e0 <HAL_TIM_ConfigClockSource>
 80052f2:	bb08      	cbnz	r0, 8005338 <MX_TIM2_Init+0x94>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80052f4:	4816      	ldr	r0, [pc, #88]	; (8005350 <MX_TIM2_Init+0xac>)
 80052f6:	f7fe fdda 	bl	8003eae <HAL_TIM_PWM_Init>
 80052fa:	bb00      	cbnz	r0, 800533e <MX_TIM2_Init+0x9a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80052fc:	2320      	movs	r3, #32
 80052fe:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005300:	2300      	movs	r3, #0
 8005302:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005304:	a907      	add	r1, sp, #28
 8005306:	4812      	ldr	r0, [pc, #72]	; (8005350 <MX_TIM2_Init+0xac>)
 8005308:	f7fe ff6a 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 800530c:	b9d0      	cbnz	r0, 8005344 <MX_TIM2_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800530e:	2360      	movs	r3, #96	; 0x60
 8005310:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 2;
 8005312:	2302      	movs	r3, #2
 8005314:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005316:	2200      	movs	r2, #0
 8005318:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800531a:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800531c:	4669      	mov	r1, sp
 800531e:	480c      	ldr	r0, [pc, #48]	; (8005350 <MX_TIM2_Init+0xac>)
 8005320:	f7fe fe3e 	bl	8003fa0 <HAL_TIM_PWM_ConfigChannel>
 8005324:	b988      	cbnz	r0, 800534a <MX_TIM2_Init+0xa6>
  HAL_TIM_MspPostInit(&htim2);
 8005326:	480a      	ldr	r0, [pc, #40]	; (8005350 <MX_TIM2_Init+0xac>)
 8005328:	f7ff ff92 	bl	8005250 <HAL_TIM_MspPostInit>
}
 800532c:	b00f      	add	sp, #60	; 0x3c
 800532e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005332:	f7ff fd1d 	bl	8004d70 <Error_Handler>
 8005336:	e7d4      	b.n	80052e2 <MX_TIM2_Init+0x3e>
    Error_Handler();
 8005338:	f7ff fd1a 	bl	8004d70 <Error_Handler>
 800533c:	e7da      	b.n	80052f4 <MX_TIM2_Init+0x50>
    Error_Handler();
 800533e:	f7ff fd17 	bl	8004d70 <Error_Handler>
 8005342:	e7db      	b.n	80052fc <MX_TIM2_Init+0x58>
    Error_Handler();
 8005344:	f7ff fd14 	bl	8004d70 <Error_Handler>
 8005348:	e7e1      	b.n	800530e <MX_TIM2_Init+0x6a>
    Error_Handler();
 800534a:	f7ff fd11 	bl	8004d70 <Error_Handler>
 800534e:	e7ea      	b.n	8005326 <MX_TIM2_Init+0x82>
 8005350:	240024e8 	.word	0x240024e8

08005354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800538c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005358:	f7ff feee 	bl	8005138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800535c:	480c      	ldr	r0, [pc, #48]	; (8005390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800535e:	490d      	ldr	r1, [pc, #52]	; (8005394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005360:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005364:	e002      	b.n	800536c <LoopCopyDataInit>

08005366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800536a:	3304      	adds	r3, #4

0800536c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800536c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800536e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005370:	d3f9      	bcc.n	8005366 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005372:	4a0a      	ldr	r2, [pc, #40]	; (800539c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005374:	4c0a      	ldr	r4, [pc, #40]	; (80053a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005378:	e001      	b.n	800537e <LoopFillZerobss>

0800537a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800537a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800537c:	3204      	adds	r2, #4

0800537e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800537e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005380:	d3fb      	bcc.n	800537a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005382:	f000 f811 	bl	80053a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005386:	f7ff fd8b 	bl	8004ea0 <main>
  bx  lr
 800538a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800538c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005390:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005394:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8005398:	08006250 	.word	0x08006250
  ldr r2, =_sbss
 800539c:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 80053a0:	24002534 	.word	0x24002534

080053a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053a4:	e7fe      	b.n	80053a4 <ADC3_IRQHandler>
	...

080053a8 <__libc_init_array>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4e0d      	ldr	r6, [pc, #52]	; (80053e0 <__libc_init_array+0x38>)
 80053ac:	4c0d      	ldr	r4, [pc, #52]	; (80053e4 <__libc_init_array+0x3c>)
 80053ae:	1ba4      	subs	r4, r4, r6
 80053b0:	10a4      	asrs	r4, r4, #2
 80053b2:	2500      	movs	r5, #0
 80053b4:	42a5      	cmp	r5, r4
 80053b6:	d109      	bne.n	80053cc <__libc_init_array+0x24>
 80053b8:	4e0b      	ldr	r6, [pc, #44]	; (80053e8 <__libc_init_array+0x40>)
 80053ba:	4c0c      	ldr	r4, [pc, #48]	; (80053ec <__libc_init_array+0x44>)
 80053bc:	f000 fd48 	bl	8005e50 <_init>
 80053c0:	1ba4      	subs	r4, r4, r6
 80053c2:	10a4      	asrs	r4, r4, #2
 80053c4:	2500      	movs	r5, #0
 80053c6:	42a5      	cmp	r5, r4
 80053c8:	d105      	bne.n	80053d6 <__libc_init_array+0x2e>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053d0:	4798      	blx	r3
 80053d2:	3501      	adds	r5, #1
 80053d4:	e7ee      	b.n	80053b4 <__libc_init_array+0xc>
 80053d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053da:	4798      	blx	r3
 80053dc:	3501      	adds	r5, #1
 80053de:	e7f2      	b.n	80053c6 <__libc_init_array+0x1e>
 80053e0:	08006248 	.word	0x08006248
 80053e4:	08006248 	.word	0x08006248
 80053e8:	08006248 	.word	0x08006248
 80053ec:	0800624c 	.word	0x0800624c

080053f0 <memset>:
 80053f0:	4402      	add	r2, r0
 80053f2:	4603      	mov	r3, r0
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d100      	bne.n	80053fa <memset+0xa>
 80053f8:	4770      	bx	lr
 80053fa:	f803 1b01 	strb.w	r1, [r3], #1
 80053fe:	e7f9      	b.n	80053f4 <memset+0x4>

08005400 <sinf>:
 8005400:	ee10 3a10 	vmov	r3, s0
 8005404:	b507      	push	{r0, r1, r2, lr}
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <sinf+0x7c>)
 8005408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800540c:	4293      	cmp	r3, r2
 800540e:	dc05      	bgt.n	800541c <sinf+0x1c>
 8005410:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005480 <sinf+0x80>
 8005414:	2000      	movs	r0, #0
 8005416:	f000 fc1d 	bl	8005c54 <__kernel_sinf>
 800541a:	e004      	b.n	8005426 <sinf+0x26>
 800541c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005420:	db04      	blt.n	800542c <sinf+0x2c>
 8005422:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005426:	b003      	add	sp, #12
 8005428:	f85d fb04 	ldr.w	pc, [sp], #4
 800542c:	4668      	mov	r0, sp
 800542e:	f000 f829 	bl	8005484 <__ieee754_rem_pio2f>
 8005432:	f000 0003 	and.w	r0, r0, #3
 8005436:	2801      	cmp	r0, #1
 8005438:	d008      	beq.n	800544c <sinf+0x4c>
 800543a:	2802      	cmp	r0, #2
 800543c:	d00d      	beq.n	800545a <sinf+0x5a>
 800543e:	b9b0      	cbnz	r0, 800546e <sinf+0x6e>
 8005440:	2001      	movs	r0, #1
 8005442:	eddd 0a01 	vldr	s1, [sp, #4]
 8005446:	ed9d 0a00 	vldr	s0, [sp]
 800544a:	e7e4      	b.n	8005416 <sinf+0x16>
 800544c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005450:	ed9d 0a00 	vldr	s0, [sp]
 8005454:	f000 f942 	bl	80056dc <__kernel_cosf>
 8005458:	e7e5      	b.n	8005426 <sinf+0x26>
 800545a:	2001      	movs	r0, #1
 800545c:	eddd 0a01 	vldr	s1, [sp, #4]
 8005460:	ed9d 0a00 	vldr	s0, [sp]
 8005464:	f000 fbf6 	bl	8005c54 <__kernel_sinf>
 8005468:	eeb1 0a40 	vneg.f32	s0, s0
 800546c:	e7db      	b.n	8005426 <sinf+0x26>
 800546e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005472:	ed9d 0a00 	vldr	s0, [sp]
 8005476:	f000 f931 	bl	80056dc <__kernel_cosf>
 800547a:	e7f5      	b.n	8005468 <sinf+0x68>
 800547c:	3f490fd8 	.word	0x3f490fd8
 8005480:	00000000 	.word	0x00000000

08005484 <__ieee754_rem_pio2f>:
 8005484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005486:	ee10 6a10 	vmov	r6, s0
 800548a:	4b86      	ldr	r3, [pc, #536]	; (80056a4 <__ieee754_rem_pio2f+0x220>)
 800548c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8005490:	429c      	cmp	r4, r3
 8005492:	b087      	sub	sp, #28
 8005494:	4605      	mov	r5, r0
 8005496:	dc05      	bgt.n	80054a4 <__ieee754_rem_pio2f+0x20>
 8005498:	2300      	movs	r3, #0
 800549a:	ed85 0a00 	vstr	s0, [r5]
 800549e:	6043      	str	r3, [r0, #4]
 80054a0:	2000      	movs	r0, #0
 80054a2:	e020      	b.n	80054e6 <__ieee754_rem_pio2f+0x62>
 80054a4:	4b80      	ldr	r3, [pc, #512]	; (80056a8 <__ieee754_rem_pio2f+0x224>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	dc38      	bgt.n	800551c <__ieee754_rem_pio2f+0x98>
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80056ac <__ieee754_rem_pio2f+0x228>
 80054b0:	4b7f      	ldr	r3, [pc, #508]	; (80056b0 <__ieee754_rem_pio2f+0x22c>)
 80054b2:	f024 040f 	bic.w	r4, r4, #15
 80054b6:	dd18      	ble.n	80054ea <__ieee754_rem_pio2f+0x66>
 80054b8:	429c      	cmp	r4, r3
 80054ba:	ee70 7a47 	vsub.f32	s15, s0, s14
 80054be:	bf09      	itett	eq
 80054c0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80056b4 <__ieee754_rem_pio2f+0x230>
 80054c4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80056b8 <__ieee754_rem_pio2f+0x234>
 80054c8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80054cc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80056bc <__ieee754_rem_pio2f+0x238>
 80054d0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80054d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054d8:	edc0 6a00 	vstr	s13, [r0]
 80054dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054e0:	edc0 7a01 	vstr	s15, [r0, #4]
 80054e4:	2001      	movs	r0, #1
 80054e6:	b007      	add	sp, #28
 80054e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ea:	429c      	cmp	r4, r3
 80054ec:	ee70 7a07 	vadd.f32	s15, s0, s14
 80054f0:	bf09      	itett	eq
 80054f2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80056b4 <__ieee754_rem_pio2f+0x230>
 80054f6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80056b8 <__ieee754_rem_pio2f+0x234>
 80054fa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80054fe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80056bc <__ieee754_rem_pio2f+0x238>
 8005502:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005506:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800550a:	edc0 6a00 	vstr	s13, [r0]
 800550e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005512:	edc0 7a01 	vstr	s15, [r0, #4]
 8005516:	f04f 30ff 	mov.w	r0, #4294967295
 800551a:	e7e4      	b.n	80054e6 <__ieee754_rem_pio2f+0x62>
 800551c:	4b68      	ldr	r3, [pc, #416]	; (80056c0 <__ieee754_rem_pio2f+0x23c>)
 800551e:	429c      	cmp	r4, r3
 8005520:	dc71      	bgt.n	8005606 <__ieee754_rem_pio2f+0x182>
 8005522:	f000 fbdf 	bl	8005ce4 <fabsf>
 8005526:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80056c4 <__ieee754_rem_pio2f+0x240>
 800552a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800552e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005536:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800553a:	ee17 0a90 	vmov	r0, s15
 800553e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80056ac <__ieee754_rem_pio2f+0x228>
 8005542:	eeb1 7a46 	vneg.f32	s14, s12
 8005546:	eea7 0a27 	vfma.f32	s0, s14, s15
 800554a:	281f      	cmp	r0, #31
 800554c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80056b8 <__ieee754_rem_pio2f+0x234>
 8005550:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005554:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005558:	ee16 3a90 	vmov	r3, s13
 800555c:	dc1c      	bgt.n	8005598 <__ieee754_rem_pio2f+0x114>
 800555e:	1e47      	subs	r7, r0, #1
 8005560:	4959      	ldr	r1, [pc, #356]	; (80056c8 <__ieee754_rem_pio2f+0x244>)
 8005562:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005566:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800556a:	428a      	cmp	r2, r1
 800556c:	d014      	beq.n	8005598 <__ieee754_rem_pio2f+0x114>
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	ed95 7a00 	vldr	s14, [r5]
 8005574:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005578:	2e00      	cmp	r6, #0
 800557a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800557e:	ed85 0a01 	vstr	s0, [r5, #4]
 8005582:	dab0      	bge.n	80054e6 <__ieee754_rem_pio2f+0x62>
 8005584:	eeb1 7a47 	vneg.f32	s14, s14
 8005588:	eeb1 0a40 	vneg.f32	s0, s0
 800558c:	ed85 7a00 	vstr	s14, [r5]
 8005590:	ed85 0a01 	vstr	s0, [r5, #4]
 8005594:	4240      	negs	r0, r0
 8005596:	e7a6      	b.n	80054e6 <__ieee754_rem_pio2f+0x62>
 8005598:	15e4      	asrs	r4, r4, #23
 800559a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800559e:	1aa2      	subs	r2, r4, r2
 80055a0:	2a08      	cmp	r2, #8
 80055a2:	dde4      	ble.n	800556e <__ieee754_rem_pio2f+0xea>
 80055a4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80056b4 <__ieee754_rem_pio2f+0x230>
 80055a8:	eef0 6a40 	vmov.f32	s13, s0
 80055ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80055b0:	ee30 0a66 	vsub.f32	s0, s0, s13
 80055b4:	eea7 0a27 	vfma.f32	s0, s14, s15
 80055b8:	eddf 7a40 	vldr	s15, [pc, #256]	; 80056bc <__ieee754_rem_pio2f+0x238>
 80055bc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80055c0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80055c4:	eef0 7a40 	vmov.f32	s15, s0
 80055c8:	ee15 3a90 	vmov	r3, s11
 80055cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80055d0:	1aa4      	subs	r4, r4, r2
 80055d2:	2c19      	cmp	r4, #25
 80055d4:	dc04      	bgt.n	80055e0 <__ieee754_rem_pio2f+0x15c>
 80055d6:	edc5 5a00 	vstr	s11, [r5]
 80055da:	eeb0 0a66 	vmov.f32	s0, s13
 80055de:	e7c7      	b.n	8005570 <__ieee754_rem_pio2f+0xec>
 80055e0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80056cc <__ieee754_rem_pio2f+0x248>
 80055e4:	eeb0 0a66 	vmov.f32	s0, s13
 80055e8:	eea7 0a25 	vfma.f32	s0, s14, s11
 80055ec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80055f0:	eee7 7a25 	vfma.f32	s15, s14, s11
 80055f4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80056d0 <__ieee754_rem_pio2f+0x24c>
 80055f8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80055fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005600:	ed85 7a00 	vstr	s14, [r5]
 8005604:	e7b4      	b.n	8005570 <__ieee754_rem_pio2f+0xec>
 8005606:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800560a:	db06      	blt.n	800561a <__ieee754_rem_pio2f+0x196>
 800560c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005610:	edc0 7a01 	vstr	s15, [r0, #4]
 8005614:	edc0 7a00 	vstr	s15, [r0]
 8005618:	e742      	b.n	80054a0 <__ieee754_rem_pio2f+0x1c>
 800561a:	15e2      	asrs	r2, r4, #23
 800561c:	3a86      	subs	r2, #134	; 0x86
 800561e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800562a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80056d4 <__ieee754_rem_pio2f+0x250>
 800562e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005632:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005636:	ed8d 7a03 	vstr	s14, [sp, #12]
 800563a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800563e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005642:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800564a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800564e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005652:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565a:	edcd 7a05 	vstr	s15, [sp, #20]
 800565e:	d11e      	bne.n	800569e <__ieee754_rem_pio2f+0x21a>
 8005660:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005668:	bf14      	ite	ne
 800566a:	2302      	movne	r3, #2
 800566c:	2301      	moveq	r3, #1
 800566e:	491a      	ldr	r1, [pc, #104]	; (80056d8 <__ieee754_rem_pio2f+0x254>)
 8005670:	9101      	str	r1, [sp, #4]
 8005672:	2102      	movs	r1, #2
 8005674:	9100      	str	r1, [sp, #0]
 8005676:	a803      	add	r0, sp, #12
 8005678:	4629      	mov	r1, r5
 800567a:	f000 f88d 	bl	8005798 <__kernel_rem_pio2f>
 800567e:	2e00      	cmp	r6, #0
 8005680:	f6bf af31 	bge.w	80054e6 <__ieee754_rem_pio2f+0x62>
 8005684:	edd5 7a00 	vldr	s15, [r5]
 8005688:	eef1 7a67 	vneg.f32	s15, s15
 800568c:	edc5 7a00 	vstr	s15, [r5]
 8005690:	edd5 7a01 	vldr	s15, [r5, #4]
 8005694:	eef1 7a67 	vneg.f32	s15, s15
 8005698:	edc5 7a01 	vstr	s15, [r5, #4]
 800569c:	e77a      	b.n	8005594 <__ieee754_rem_pio2f+0x110>
 800569e:	2303      	movs	r3, #3
 80056a0:	e7e5      	b.n	800566e <__ieee754_rem_pio2f+0x1ea>
 80056a2:	bf00      	nop
 80056a4:	3f490fd8 	.word	0x3f490fd8
 80056a8:	4016cbe3 	.word	0x4016cbe3
 80056ac:	3fc90f80 	.word	0x3fc90f80
 80056b0:	3fc90fd0 	.word	0x3fc90fd0
 80056b4:	37354400 	.word	0x37354400
 80056b8:	37354443 	.word	0x37354443
 80056bc:	2e85a308 	.word	0x2e85a308
 80056c0:	43490f80 	.word	0x43490f80
 80056c4:	3f22f984 	.word	0x3f22f984
 80056c8:	08005e78 	.word	0x08005e78
 80056cc:	2e85a300 	.word	0x2e85a300
 80056d0:	248d3132 	.word	0x248d3132
 80056d4:	43800000 	.word	0x43800000
 80056d8:	08005ef8 	.word	0x08005ef8

080056dc <__kernel_cosf>:
 80056dc:	ee10 3a10 	vmov	r3, s0
 80056e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80056e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ec:	da05      	bge.n	80056fa <__kernel_cosf+0x1e>
 80056ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80056f2:	ee17 2a90 	vmov	r2, s15
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	d03b      	beq.n	8005772 <__kernel_cosf+0x96>
 80056fa:	ee20 7a00 	vmul.f32	s14, s0, s0
 80056fe:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8005778 <__kernel_cosf+0x9c>
 8005702:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800577c <__kernel_cosf+0xa0>
 8005706:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8005780 <__kernel_cosf+0xa4>
 800570a:	4a1e      	ldr	r2, [pc, #120]	; (8005784 <__kernel_cosf+0xa8>)
 800570c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005710:	4293      	cmp	r3, r2
 8005712:	ee60 0a20 	vmul.f32	s1, s0, s1
 8005716:	eee7 5a06 	vfma.f32	s11, s14, s12
 800571a:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8005788 <__kernel_cosf+0xac>
 800571e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005722:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800578c <__kernel_cosf+0xb0>
 8005726:	eee7 5a06 	vfma.f32	s11, s14, s12
 800572a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8005790 <__kernel_cosf+0xb4>
 800572e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005732:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005736:	ee26 6a07 	vmul.f32	s12, s12, s14
 800573a:	dc06      	bgt.n	800574a <__kernel_cosf+0x6e>
 800573c:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8005740:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8005744:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8005748:	4770      	bx	lr
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <__kernel_cosf+0xb8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	bfda      	itte	le
 8005750:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005754:	ee07 3a90 	vmovle	s15, r3
 8005758:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 800575c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005760:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8005764:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005768:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800576c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8005770:	4770      	bx	lr
 8005772:	eeb0 0a66 	vmov.f32	s0, s13
 8005776:	4770      	bx	lr
 8005778:	310f74f6 	.word	0x310f74f6
 800577c:	ad47d74e 	.word	0xad47d74e
 8005780:	b493f27c 	.word	0xb493f27c
 8005784:	3e999999 	.word	0x3e999999
 8005788:	37d00d01 	.word	0x37d00d01
 800578c:	bab60b61 	.word	0xbab60b61
 8005790:	3d2aaaab 	.word	0x3d2aaaab
 8005794:	3f480000 	.word	0x3f480000

08005798 <__kernel_rem_pio2f>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	ed2d 8b04 	vpush	{d8-d9}
 80057a0:	b0d7      	sub	sp, #348	; 0x15c
 80057a2:	468b      	mov	fp, r1
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	9964      	ldr	r1, [sp, #400]	; 0x190
 80057a8:	4bcb      	ldr	r3, [pc, #812]	; (8005ad8 <__kernel_rem_pio2f+0x340>)
 80057aa:	9002      	str	r0, [sp, #8]
 80057ac:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 80057b0:	9b01      	ldr	r3, [sp, #4]
 80057b2:	9e65      	ldr	r6, [sp, #404]	; 0x194
 80057b4:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8005ae8 <__kernel_rem_pio2f+0x350>
 80057b8:	3b01      	subs	r3, #1
 80057ba:	1ed0      	subs	r0, r2, #3
 80057bc:	2408      	movs	r4, #8
 80057be:	fb90 f0f4 	sdiv	r0, r0, r4
 80057c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80057c6:	1c45      	adds	r5, r0, #1
 80057c8:	1ac7      	subs	r7, r0, r3
 80057ca:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80057ce:	eb0a 0e03 	add.w	lr, sl, r3
 80057d2:	ac1a      	add	r4, sp, #104	; 0x68
 80057d4:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 80057d8:	2200      	movs	r2, #0
 80057da:	4572      	cmp	r2, lr
 80057dc:	dd0f      	ble.n	80057fe <__kernel_rem_pio2f+0x66>
 80057de:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 80057e2:	2400      	movs	r4, #0
 80057e4:	4554      	cmp	r4, sl
 80057e6:	dc26      	bgt.n	8005836 <__kernel_rem_pio2f+0x9e>
 80057e8:	9a01      	ldr	r2, [sp, #4]
 80057ea:	9f02      	ldr	r7, [sp, #8]
 80057ec:	eddf 7abe 	vldr	s15, [pc, #760]	; 8005ae8 <__kernel_rem_pio2f+0x350>
 80057f0:	4422      	add	r2, r4
 80057f2:	a91a      	add	r1, sp, #104	; 0x68
 80057f4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80057f8:	f04f 0c00 	mov.w	ip, #0
 80057fc:	e015      	b.n	800582a <__kernel_rem_pio2f+0x92>
 80057fe:	42d7      	cmn	r7, r2
 8005800:	bf5d      	ittte	pl
 8005802:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 8005806:	ee07 1a90 	vmovpl	s15, r1
 800580a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800580e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005812:	ece4 7a01 	vstmia	r4!, {s15}
 8005816:	3201      	adds	r2, #1
 8005818:	e7df      	b.n	80057da <__kernel_rem_pio2f+0x42>
 800581a:	ecf7 6a01 	vldmia	r7!, {s13}
 800581e:	ed32 7a01 	vldmdb	r2!, {s14}
 8005822:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005826:	f10c 0c01 	add.w	ip, ip, #1
 800582a:	459c      	cmp	ip, r3
 800582c:	ddf5      	ble.n	800581a <__kernel_rem_pio2f+0x82>
 800582e:	ecee 7a01 	vstmia	lr!, {s15}
 8005832:	3401      	adds	r4, #1
 8005834:	e7d6      	b.n	80057e4 <__kernel_rem_pio2f+0x4c>
 8005836:	aa06      	add	r2, sp, #24
 8005838:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800583c:	9204      	str	r2, [sp, #16]
 800583e:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8005adc <__kernel_rem_pio2f+0x344>
 8005842:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8005ae0 <__kernel_rem_pio2f+0x348>
 8005846:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 800584a:	9203      	str	r2, [sp, #12]
 800584c:	4657      	mov	r7, sl
 800584e:	aa56      	add	r2, sp, #344	; 0x158
 8005850:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8005854:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8005858:	f108 38ff 	add.w	r8, r8, #4294967295
 800585c:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8005860:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005864:	aa56      	add	r2, sp, #344	; 0x158
 8005866:	eb02 0008 	add.w	r0, r2, r8
 800586a:	384c      	subs	r0, #76	; 0x4c
 800586c:	2200      	movs	r2, #0
 800586e:	1abc      	subs	r4, r7, r2
 8005870:	2c00      	cmp	r4, #0
 8005872:	dc4a      	bgt.n	800590a <__kernel_rem_pio2f+0x172>
 8005874:	4628      	mov	r0, r5
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	f000 fa7e 	bl	8005d78 <scalbnf>
 800587c:	eeb0 8a40 	vmov.f32	s16, s0
 8005880:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005884:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005888:	f000 fa34 	bl	8005cf4 <floorf>
 800588c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005890:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005894:	2d00      	cmp	r5, #0
 8005896:	9b05      	ldr	r3, [sp, #20]
 8005898:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800589c:	ee17 9a90 	vmov	r9, s15
 80058a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058a4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80058a8:	dd44      	ble.n	8005934 <__kernel_rem_pio2f+0x19c>
 80058aa:	1e78      	subs	r0, r7, #1
 80058ac:	aa06      	add	r2, sp, #24
 80058ae:	f1c5 0408 	rsb	r4, r5, #8
 80058b2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80058b6:	fa46 f204 	asr.w	r2, r6, r4
 80058ba:	4491      	add	r9, r2
 80058bc:	40a2      	lsls	r2, r4
 80058be:	1ab6      	subs	r6, r6, r2
 80058c0:	aa06      	add	r2, sp, #24
 80058c2:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80058c6:	f1c5 0207 	rsb	r2, r5, #7
 80058ca:	4116      	asrs	r6, r2
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	dd40      	ble.n	8005952 <__kernel_rem_pio2f+0x1ba>
 80058d0:	2400      	movs	r4, #0
 80058d2:	f109 0901 	add.w	r9, r9, #1
 80058d6:	4620      	mov	r0, r4
 80058d8:	42a7      	cmp	r7, r4
 80058da:	dc75      	bgt.n	80059c8 <__kernel_rem_pio2f+0x230>
 80058dc:	2d00      	cmp	r5, #0
 80058de:	dd05      	ble.n	80058ec <__kernel_rem_pio2f+0x154>
 80058e0:	2d01      	cmp	r5, #1
 80058e2:	f000 8086 	beq.w	80059f2 <__kernel_rem_pio2f+0x25a>
 80058e6:	2d02      	cmp	r5, #2
 80058e8:	f000 808d 	beq.w	8005a06 <__kernel_rem_pio2f+0x26e>
 80058ec:	2e02      	cmp	r6, #2
 80058ee:	d130      	bne.n	8005952 <__kernel_rem_pio2f+0x1ba>
 80058f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80058f4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80058f8:	b358      	cbz	r0, 8005952 <__kernel_rem_pio2f+0x1ba>
 80058fa:	4628      	mov	r0, r5
 80058fc:	9305      	str	r3, [sp, #20]
 80058fe:	f000 fa3b 	bl	8005d78 <scalbnf>
 8005902:	9b05      	ldr	r3, [sp, #20]
 8005904:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005908:	e023      	b.n	8005952 <__kernel_rem_pio2f+0x1ba>
 800590a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800590e:	ac06      	add	r4, sp, #24
 8005910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005918:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800591c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005920:	ee10 1a10 	vmov	r1, s0
 8005924:	ed30 0a01 	vldmdb	r0!, {s0}
 8005928:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800592c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005930:	3201      	adds	r2, #1
 8005932:	e79c      	b.n	800586e <__kernel_rem_pio2f+0xd6>
 8005934:	d105      	bne.n	8005942 <__kernel_rem_pio2f+0x1aa>
 8005936:	1e7a      	subs	r2, r7, #1
 8005938:	a906      	add	r1, sp, #24
 800593a:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800593e:	1236      	asrs	r6, r6, #8
 8005940:	e7c4      	b.n	80058cc <__kernel_rem_pio2f+0x134>
 8005942:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005946:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800594a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594e:	da39      	bge.n	80059c4 <__kernel_rem_pio2f+0x22c>
 8005950:	2600      	movs	r6, #0
 8005952:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595a:	f040 808d 	bne.w	8005a78 <__kernel_rem_pio2f+0x2e0>
 800595e:	1e7c      	subs	r4, r7, #1
 8005960:	4620      	mov	r0, r4
 8005962:	2200      	movs	r2, #0
 8005964:	4550      	cmp	r0, sl
 8005966:	da55      	bge.n	8005a14 <__kernel_rem_pio2f+0x27c>
 8005968:	2a00      	cmp	r2, #0
 800596a:	d164      	bne.n	8005a36 <__kernel_rem_pio2f+0x29e>
 800596c:	2401      	movs	r4, #1
 800596e:	f06f 0003 	mvn.w	r0, #3
 8005972:	fb00 f204 	mul.w	r2, r0, r4
 8005976:	9904      	ldr	r1, [sp, #16]
 8005978:	588a      	ldr	r2, [r1, r2]
 800597a:	2a00      	cmp	r2, #0
 800597c:	d050      	beq.n	8005a20 <__kernel_rem_pio2f+0x288>
 800597e:	aa56      	add	r2, sp, #344	; 0x158
 8005980:	4490      	add	r8, r2
 8005982:	9a01      	ldr	r2, [sp, #4]
 8005984:	a91a      	add	r1, sp, #104	; 0x68
 8005986:	443a      	add	r2, r7
 8005988:	1c78      	adds	r0, r7, #1
 800598a:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 800598e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005992:	4427      	add	r7, r4
 8005994:	42b8      	cmp	r0, r7
 8005996:	f73f af5a 	bgt.w	800584e <__kernel_rem_pio2f+0xb6>
 800599a:	9903      	ldr	r1, [sp, #12]
 800599c:	9e02      	ldr	r6, [sp, #8]
 800599e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80059a2:	9105      	str	r1, [sp, #20]
 80059a4:	ee07 1a90 	vmov	s15, r1
 80059a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ac:	2400      	movs	r4, #0
 80059ae:	ece2 7a01 	vstmia	r2!, {s15}
 80059b2:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8005ae8 <__kernel_rem_pio2f+0x350>
 80059b6:	4696      	mov	lr, r2
 80059b8:	429c      	cmp	r4, r3
 80059ba:	dd33      	ble.n	8005a24 <__kernel_rem_pio2f+0x28c>
 80059bc:	ece8 7a01 	vstmia	r8!, {s15}
 80059c0:	3001      	adds	r0, #1
 80059c2:	e7e7      	b.n	8005994 <__kernel_rem_pio2f+0x1fc>
 80059c4:	2602      	movs	r6, #2
 80059c6:	e783      	b.n	80058d0 <__kernel_rem_pio2f+0x138>
 80059c8:	aa06      	add	r2, sp, #24
 80059ca:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80059ce:	b948      	cbnz	r0, 80059e4 <__kernel_rem_pio2f+0x24c>
 80059d0:	b12a      	cbz	r2, 80059de <__kernel_rem_pio2f+0x246>
 80059d2:	a906      	add	r1, sp, #24
 80059d4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80059d8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80059dc:	2201      	movs	r2, #1
 80059de:	3401      	adds	r4, #1
 80059e0:	4610      	mov	r0, r2
 80059e2:	e779      	b.n	80058d8 <__kernel_rem_pio2f+0x140>
 80059e4:	a906      	add	r1, sp, #24
 80059e6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80059ea:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80059ee:	4602      	mov	r2, r0
 80059f0:	e7f5      	b.n	80059de <__kernel_rem_pio2f+0x246>
 80059f2:	1e7c      	subs	r4, r7, #1
 80059f4:	aa06      	add	r2, sp, #24
 80059f6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80059fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059fe:	a906      	add	r1, sp, #24
 8005a00:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8005a04:	e772      	b.n	80058ec <__kernel_rem_pio2f+0x154>
 8005a06:	1e7c      	subs	r4, r7, #1
 8005a08:	aa06      	add	r2, sp, #24
 8005a0a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8005a0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005a12:	e7f4      	b.n	80059fe <__kernel_rem_pio2f+0x266>
 8005a14:	a906      	add	r1, sp, #24
 8005a16:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005a1a:	3801      	subs	r0, #1
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	e7a1      	b.n	8005964 <__kernel_rem_pio2f+0x1cc>
 8005a20:	3401      	adds	r4, #1
 8005a22:	e7a6      	b.n	8005972 <__kernel_rem_pio2f+0x1da>
 8005a24:	ecf6 6a01 	vldmia	r6!, {s13}
 8005a28:	ed3e 7a01 	vldmdb	lr!, {s14}
 8005a2c:	3401      	adds	r4, #1
 8005a2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005a32:	e7c1      	b.n	80059b8 <__kernel_rem_pio2f+0x220>
 8005a34:	3c01      	subs	r4, #1
 8005a36:	ab06      	add	r3, sp, #24
 8005a38:	3d08      	subs	r5, #8
 8005a3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f8      	beq.n	8005a34 <__kernel_rem_pio2f+0x29c>
 8005a42:	4628      	mov	r0, r5
 8005a44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005a48:	f000 f996 	bl	8005d78 <scalbnf>
 8005a4c:	00a3      	lsls	r3, r4, #2
 8005a4e:	aa42      	add	r2, sp, #264	; 0x108
 8005a50:	3304      	adds	r3, #4
 8005a52:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005adc <__kernel_rem_pio2f+0x344>
 8005a56:	18d0      	adds	r0, r2, r3
 8005a58:	4622      	mov	r2, r4
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	da46      	bge.n	8005aec <__kernel_rem_pio2f+0x354>
 8005a5e:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 8005a62:	2200      	movs	r2, #0
 8005a64:	1aa5      	subs	r5, r4, r2
 8005a66:	d460      	bmi.n	8005b2a <__kernel_rem_pio2f+0x392>
 8005a68:	a942      	add	r1, sp, #264	; 0x108
 8005a6a:	4f1e      	ldr	r7, [pc, #120]	; (8005ae4 <__kernel_rem_pio2f+0x34c>)
 8005a6c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005ae8 <__kernel_rem_pio2f+0x350>
 8005a70:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8005a74:	2000      	movs	r0, #0
 8005a76:	e050      	b.n	8005b1a <__kernel_rem_pio2f+0x382>
 8005a78:	4268      	negs	r0, r5
 8005a7a:	eeb0 0a48 	vmov.f32	s0, s16
 8005a7e:	f000 f97b 	bl	8005d78 <scalbnf>
 8005a82:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005ae0 <__kernel_rem_pio2f+0x348>
 8005a86:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8e:	db19      	blt.n	8005ac4 <__kernel_rem_pio2f+0x32c>
 8005a90:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005adc <__kernel_rem_pio2f+0x344>
 8005a94:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005a98:	aa06      	add	r2, sp, #24
 8005a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a9e:	1c7c      	adds	r4, r7, #1
 8005aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aa4:	3508      	adds	r5, #8
 8005aa6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005ab2:	ee10 3a10 	vmov	r3, s0
 8005ab6:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8005aba:	ee17 3a90 	vmov	r3, s15
 8005abe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005ac2:	e7be      	b.n	8005a42 <__kernel_rem_pio2f+0x2aa>
 8005ac4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005ac8:	aa06      	add	r2, sp, #24
 8005aca:	ee10 3a10 	vmov	r3, s0
 8005ace:	463c      	mov	r4, r7
 8005ad0:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8005ad4:	e7b5      	b.n	8005a42 <__kernel_rem_pio2f+0x2aa>
 8005ad6:	bf00      	nop
 8005ad8:	0800623c 	.word	0x0800623c
 8005adc:	3b800000 	.word	0x3b800000
 8005ae0:	43800000 	.word	0x43800000
 8005ae4:	08006210 	.word	0x08006210
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	a906      	add	r1, sp, #24
 8005aee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005af2:	9101      	str	r1, [sp, #4]
 8005af4:	ee07 1a90 	vmov	s15, r1
 8005af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005afc:	3a01      	subs	r2, #1
 8005afe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005b02:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005b06:	ed60 7a01 	vstmdb	r0!, {s15}
 8005b0a:	e7a6      	b.n	8005a5a <__kernel_rem_pio2f+0x2c2>
 8005b0c:	ecf7 6a01 	vldmia	r7!, {s13}
 8005b10:	ecb5 7a01 	vldmia	r5!, {s14}
 8005b14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005b18:	3001      	adds	r0, #1
 8005b1a:	4550      	cmp	r0, sl
 8005b1c:	dc01      	bgt.n	8005b22 <__kernel_rem_pio2f+0x38a>
 8005b1e:	4290      	cmp	r0, r2
 8005b20:	ddf4      	ble.n	8005b0c <__kernel_rem_pio2f+0x374>
 8005b22:	ecee 7a01 	vstmia	lr!, {s15}
 8005b26:	3201      	adds	r2, #1
 8005b28:	e79c      	b.n	8005a64 <__kernel_rem_pio2f+0x2cc>
 8005b2a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005b2c:	2a03      	cmp	r2, #3
 8005b2e:	d843      	bhi.n	8005bb8 <__kernel_rem_pio2f+0x420>
 8005b30:	e8df f002 	tbb	[pc, r2]
 8005b34:	021d1d37 	.word	0x021d1d37
 8005b38:	aa2e      	add	r2, sp, #184	; 0xb8
 8005b3a:	4413      	add	r3, r2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4620      	mov	r0, r4
 8005b40:	2800      	cmp	r0, #0
 8005b42:	dc55      	bgt.n	8005bf0 <__kernel_rem_pio2f+0x458>
 8005b44:	461a      	mov	r2, r3
 8005b46:	4620      	mov	r0, r4
 8005b48:	2801      	cmp	r0, #1
 8005b4a:	dc61      	bgt.n	8005c10 <__kernel_rem_pio2f+0x478>
 8005b4c:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8005ae8 <__kernel_rem_pio2f+0x350>
 8005b50:	2c01      	cmp	r4, #1
 8005b52:	dc6d      	bgt.n	8005c30 <__kernel_rem_pio2f+0x498>
 8005b54:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005b58:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	d16d      	bne.n	8005c3c <__kernel_rem_pio2f+0x4a4>
 8005b60:	edcb 6a00 	vstr	s13, [fp]
 8005b64:	ed8b 7a01 	vstr	s14, [fp, #4]
 8005b68:	edcb 7a02 	vstr	s15, [fp, #8]
 8005b6c:	e024      	b.n	8005bb8 <__kernel_rem_pio2f+0x420>
 8005b6e:	aa2e      	add	r2, sp, #184	; 0xb8
 8005b70:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8005ae8 <__kernel_rem_pio2f+0x350>
 8005b74:	4413      	add	r3, r2
 8005b76:	4622      	mov	r2, r4
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	da2a      	bge.n	8005bd2 <__kernel_rem_pio2f+0x43a>
 8005b7c:	b37e      	cbz	r6, 8005bde <__kernel_rem_pio2f+0x446>
 8005b7e:	eef1 7a47 	vneg.f32	s15, s14
 8005b82:	edcb 7a00 	vstr	s15, [fp]
 8005b86:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005b8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b8e:	aa2f      	add	r2, sp, #188	; 0xbc
 8005b90:	2301      	movs	r3, #1
 8005b92:	429c      	cmp	r4, r3
 8005b94:	da26      	bge.n	8005be4 <__kernel_rem_pio2f+0x44c>
 8005b96:	b10e      	cbz	r6, 8005b9c <__kernel_rem_pio2f+0x404>
 8005b98:	eef1 7a67 	vneg.f32	s15, s15
 8005b9c:	edcb 7a01 	vstr	s15, [fp, #4]
 8005ba0:	e00a      	b.n	8005bb8 <__kernel_rem_pio2f+0x420>
 8005ba2:	aa2e      	add	r2, sp, #184	; 0xb8
 8005ba4:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8005ae8 <__kernel_rem_pio2f+0x350>
 8005ba8:	4413      	add	r3, r2
 8005baa:	2c00      	cmp	r4, #0
 8005bac:	da0b      	bge.n	8005bc6 <__kernel_rem_pio2f+0x42e>
 8005bae:	b10e      	cbz	r6, 8005bb4 <__kernel_rem_pio2f+0x41c>
 8005bb0:	eef1 7a67 	vneg.f32	s15, s15
 8005bb4:	edcb 7a00 	vstr	s15, [fp]
 8005bb8:	f009 0007 	and.w	r0, r9, #7
 8005bbc:	b057      	add	sp, #348	; 0x15c
 8005bbe:	ecbd 8b04 	vpop	{d8-d9}
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc6:	ed33 7a01 	vldmdb	r3!, {s14}
 8005bca:	3c01      	subs	r4, #1
 8005bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bd0:	e7eb      	b.n	8005baa <__kernel_rem_pio2f+0x412>
 8005bd2:	ed73 7a01 	vldmdb	r3!, {s15}
 8005bd6:	3a01      	subs	r2, #1
 8005bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bdc:	e7cc      	b.n	8005b78 <__kernel_rem_pio2f+0x3e0>
 8005bde:	eef0 7a47 	vmov.f32	s15, s14
 8005be2:	e7ce      	b.n	8005b82 <__kernel_rem_pio2f+0x3ea>
 8005be4:	ecb2 7a01 	vldmia	r2!, {s14}
 8005be8:	3301      	adds	r3, #1
 8005bea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bee:	e7d0      	b.n	8005b92 <__kernel_rem_pio2f+0x3fa>
 8005bf0:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005bf4:	ed52 7a02 	vldr	s15, [r2, #-8]
 8005bf8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005bfc:	3801      	subs	r0, #1
 8005bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c06:	ed62 7a01 	vstmdb	r2!, {s15}
 8005c0a:	ed02 7a01 	vstr	s14, [r2, #-4]
 8005c0e:	e797      	b.n	8005b40 <__kernel_rem_pio2f+0x3a8>
 8005c10:	ed52 6a01 	vldr	s13, [r2, #-4]
 8005c14:	ed52 7a02 	vldr	s15, [r2, #-8]
 8005c18:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005c1c:	3801      	subs	r0, #1
 8005c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c26:	ed62 7a01 	vstmdb	r2!, {s15}
 8005c2a:	ed02 7a01 	vstr	s14, [r2, #-4]
 8005c2e:	e78b      	b.n	8005b48 <__kernel_rem_pio2f+0x3b0>
 8005c30:	ed33 7a01 	vldmdb	r3!, {s14}
 8005c34:	3c01      	subs	r4, #1
 8005c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c3a:	e789      	b.n	8005b50 <__kernel_rem_pio2f+0x3b8>
 8005c3c:	eef1 6a66 	vneg.f32	s13, s13
 8005c40:	eeb1 7a47 	vneg.f32	s14, s14
 8005c44:	edcb 6a00 	vstr	s13, [fp]
 8005c48:	ed8b 7a01 	vstr	s14, [fp, #4]
 8005c4c:	eef1 7a67 	vneg.f32	s15, s15
 8005c50:	e78a      	b.n	8005b68 <__kernel_rem_pio2f+0x3d0>
 8005c52:	bf00      	nop

08005c54 <__kernel_sinf>:
 8005c54:	ee10 3a10 	vmov	r3, s0
 8005c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c5c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005c60:	da04      	bge.n	8005c6c <__kernel_sinf+0x18>
 8005c62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005c66:	ee17 3a90 	vmov	r3, s15
 8005c6a:	b35b      	cbz	r3, 8005cc4 <__kernel_sinf+0x70>
 8005c6c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005c70:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005cc8 <__kernel_sinf+0x74>
 8005c74:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005ccc <__kernel_sinf+0x78>
 8005c78:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005c7c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005cd0 <__kernel_sinf+0x7c>
 8005c80:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005c84:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005cd4 <__kernel_sinf+0x80>
 8005c88:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005c8c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005cd8 <__kernel_sinf+0x84>
 8005c90:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005c94:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005c98:	b930      	cbnz	r0, 8005ca8 <__kernel_sinf+0x54>
 8005c9a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005cdc <__kernel_sinf+0x88>
 8005c9e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005ca2:	eea6 0a86 	vfma.f32	s0, s13, s12
 8005ca6:	4770      	bx	lr
 8005ca8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005cac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005cb0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005cb4:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8005cb8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005ce0 <__kernel_sinf+0x8c>
 8005cbc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005cc0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	2f2ec9d3 	.word	0x2f2ec9d3
 8005ccc:	b2d72f34 	.word	0xb2d72f34
 8005cd0:	3638ef1b 	.word	0x3638ef1b
 8005cd4:	b9500d01 	.word	0xb9500d01
 8005cd8:	3c088889 	.word	0x3c088889
 8005cdc:	be2aaaab 	.word	0xbe2aaaab
 8005ce0:	3e2aaaab 	.word	0x3e2aaaab

08005ce4 <fabsf>:
 8005ce4:	ee10 3a10 	vmov	r3, s0
 8005ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cec:	ee00 3a10 	vmov	s0, r3
 8005cf0:	4770      	bx	lr
	...

08005cf4 <floorf>:
 8005cf4:	ee10 3a10 	vmov	r3, s0
 8005cf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005cfc:	0dca      	lsrs	r2, r1, #23
 8005cfe:	3a7f      	subs	r2, #127	; 0x7f
 8005d00:	2a16      	cmp	r2, #22
 8005d02:	dc2a      	bgt.n	8005d5a <floorf+0x66>
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	da11      	bge.n	8005d2c <floorf+0x38>
 8005d08:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005d6c <floorf+0x78>
 8005d0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d18:	dd05      	ble.n	8005d26 <floorf+0x32>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	da23      	bge.n	8005d66 <floorf+0x72>
 8005d1e:	4a14      	ldr	r2, [pc, #80]	; (8005d70 <floorf+0x7c>)
 8005d20:	2900      	cmp	r1, #0
 8005d22:	bf18      	it	ne
 8005d24:	4613      	movne	r3, r2
 8005d26:	ee00 3a10 	vmov	s0, r3
 8005d2a:	4770      	bx	lr
 8005d2c:	4911      	ldr	r1, [pc, #68]	; (8005d74 <floorf+0x80>)
 8005d2e:	4111      	asrs	r1, r2
 8005d30:	420b      	tst	r3, r1
 8005d32:	d0fa      	beq.n	8005d2a <floorf+0x36>
 8005d34:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005d6c <floorf+0x78>
 8005d38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d44:	ddef      	ble.n	8005d26 <floorf+0x32>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfbe      	ittt	lt
 8005d4a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005d4e:	fa40 f202 	asrlt.w	r2, r0, r2
 8005d52:	189b      	addlt	r3, r3, r2
 8005d54:	ea23 0301 	bic.w	r3, r3, r1
 8005d58:	e7e5      	b.n	8005d26 <floorf+0x32>
 8005d5a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005d5e:	d3e4      	bcc.n	8005d2a <floorf+0x36>
 8005d60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005d64:	4770      	bx	lr
 8005d66:	2300      	movs	r3, #0
 8005d68:	e7dd      	b.n	8005d26 <floorf+0x32>
 8005d6a:	bf00      	nop
 8005d6c:	7149f2ca 	.word	0x7149f2ca
 8005d70:	bf800000 	.word	0xbf800000
 8005d74:	007fffff 	.word	0x007fffff

08005d78 <scalbnf>:
 8005d78:	b508      	push	{r3, lr}
 8005d7a:	ee10 2a10 	vmov	r2, s0
 8005d7e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8005d82:	ed2d 8b02 	vpush	{d8}
 8005d86:	eef0 0a40 	vmov.f32	s1, s0
 8005d8a:	d004      	beq.n	8005d96 <scalbnf+0x1e>
 8005d8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005d90:	d306      	bcc.n	8005da0 <scalbnf+0x28>
 8005d92:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005d96:	ecbd 8b02 	vpop	{d8}
 8005d9a:	eeb0 0a60 	vmov.f32	s0, s1
 8005d9e:	bd08      	pop	{r3, pc}
 8005da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005da4:	d21c      	bcs.n	8005de0 <scalbnf+0x68>
 8005da6:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <scalbnf+0xac>)
 8005da8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005e28 <scalbnf+0xb0>
 8005dac:	4298      	cmp	r0, r3
 8005dae:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005db2:	db10      	blt.n	8005dd6 <scalbnf+0x5e>
 8005db4:	ee10 2a90 	vmov	r2, s1
 8005db8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005dbc:	3b19      	subs	r3, #25
 8005dbe:	4403      	add	r3, r0
 8005dc0:	2bfe      	cmp	r3, #254	; 0xfe
 8005dc2:	dd0f      	ble.n	8005de4 <scalbnf+0x6c>
 8005dc4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8005e2c <scalbnf+0xb4>
 8005dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8005dcc:	f000 f834 	bl	8005e38 <copysignf>
 8005dd0:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005dd4:	e7df      	b.n	8005d96 <scalbnf+0x1e>
 8005dd6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005e30 <scalbnf+0xb8>
 8005dda:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005dde:	e7da      	b.n	8005d96 <scalbnf+0x1e>
 8005de0:	0ddb      	lsrs	r3, r3, #23
 8005de2:	e7ec      	b.n	8005dbe <scalbnf+0x46>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dd06      	ble.n	8005df6 <scalbnf+0x7e>
 8005de8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005dec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005df0:	ee00 3a90 	vmov	s1, r3
 8005df4:	e7cf      	b.n	8005d96 <scalbnf+0x1e>
 8005df6:	f113 0f16 	cmn.w	r3, #22
 8005dfa:	da06      	bge.n	8005e0a <scalbnf+0x92>
 8005dfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e00:	4298      	cmp	r0, r3
 8005e02:	dcdf      	bgt.n	8005dc4 <scalbnf+0x4c>
 8005e04:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8005e30 <scalbnf+0xb8>
 8005e08:	e7de      	b.n	8005dc8 <scalbnf+0x50>
 8005e0a:	3319      	adds	r3, #25
 8005e0c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005e10:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005e14:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005e34 <scalbnf+0xbc>
 8005e18:	ee07 3a10 	vmov	s14, r3
 8005e1c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005e20:	e7b9      	b.n	8005d96 <scalbnf+0x1e>
 8005e22:	bf00      	nop
 8005e24:	ffff3cb0 	.word	0xffff3cb0
 8005e28:	4c000000 	.word	0x4c000000
 8005e2c:	7149f2ca 	.word	0x7149f2ca
 8005e30:	0da24260 	.word	0x0da24260
 8005e34:	33000000 	.word	0x33000000

08005e38 <copysignf>:
 8005e38:	ee10 3a10 	vmov	r3, s0
 8005e3c:	ee10 2a90 	vmov	r2, s1
 8005e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e44:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	ee00 3a10 	vmov	s0, r3
 8005e4e:	4770      	bx	lr

08005e50 <_init>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr

08005e5c <_fini>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr

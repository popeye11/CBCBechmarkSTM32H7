
CBC_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  24000000  08004c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004cc  24000020  08004c90  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00003400  240004ec  08004c90  000204ec  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002f267  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000047e6  00000000  00000000  0004f2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000149d3  00000000  00000000  00053a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec0  00000000  00000000  00068470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002c68  00000000  00000000  00069330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039651  00000000  00000000  0006bf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021e2d  00000000  00000000  000a55e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017341e  00000000  00000000  000c7416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023a834  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003524  00000000  00000000  0023a888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000020 	.word	0x24000020
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004c44 	.word	0x08004c44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000024 	.word	0x24000024
 80002d4:	08004c44 	.word	0x08004c44

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	4a0c      	ldr	r2, [pc, #48]	; (800031c <HAL_InitTick+0x44>)
 80002ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 fd93 	bl	8000e20 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295
 800030c:	f000 fd40 	bl	8000d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	24000000 	.word	0x24000000
 800031c:	24000014 	.word	0x24000014
 8000320:	24000004 	.word	0x24000004

08000324 <HAL_Init>:
{
 8000324:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000328:	4c12      	ldr	r4, [pc, #72]	; (8000374 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 fd1d 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800032e:	4d12      	ldr	r5, [pc, #72]	; (8000378 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000330:	f001 fb1a 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000338:	2000      	movs	r0, #0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033a:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000342:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000348:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800034a:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 800034e:	4c0c      	ldr	r4, [pc, #48]	; (8000380 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000350:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000354:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000356:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800035a:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035c:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035e:	f7ff ffbb 	bl	80002d8 <HAL_InitTick>
 8000362:	b110      	cbz	r0, 800036a <HAL_Init+0x46>
    return HAL_ERROR;
 8000364:	2401      	movs	r4, #1
}
 8000366:	4620      	mov	r0, r4
 8000368:	bd38      	pop	{r3, r4, r5, pc}
 800036a:	4604      	mov	r4, r0
  HAL_MspInit();
 800036c:	f004 fae0 	bl	8004930 <HAL_MspInit>
}
 8000370:	4620      	mov	r0, r4
 8000372:	bd38      	pop	{r3, r4, r5, pc}
 8000374:	08004c5c 	.word	0x08004c5c
 8000378:	24000018 	.word	0x24000018
 800037c:	58024400 	.word	0x58024400
 8000380:	24000014 	.word	0x24000014

08000384 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <HAL_IncTick+0x10>)
 8000386:	4b04      	ldr	r3, [pc, #16]	; (8000398 <HAL_IncTick+0x14>)
 8000388:	6811      	ldr	r1, [r2, #0]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	440b      	add	r3, r1
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	24000090 	.word	0x24000090
 8000398:	24000000 	.word	0x24000000

0800039c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800039c:	4b01      	ldr	r3, [pc, #4]	; (80003a4 <HAL_GetTick+0x8>)
 800039e:	6818      	ldr	r0, [r3, #0]
}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	24000090 	.word	0x24000090

080003a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a8:	b538      	push	{r3, r4, r5, lr}
 80003aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003ac:	f7ff fff6 	bl	800039c <HAL_GetTick>
 80003b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b2:	1c63      	adds	r3, r4, #1
 80003b4:	d002      	beq.n	80003bc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <HAL_Delay+0x20>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003bc:	f7ff ffee 	bl	800039c <HAL_GetTick>
 80003c0:	1b43      	subs	r3, r0, r5
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d3fa      	bcc.n	80003bc <HAL_Delay+0x14>
  {
  }
}
 80003c6:	bd38      	pop	{r3, r4, r5, pc}
 80003c8:	24000000 	.word	0x24000000

080003cc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <HAL_GetREVID+0x8>)
 80003ce:	6818      	ldr	r0, [r3, #0]
}
 80003d0:	0c00      	lsrs	r0, r0, #16
 80003d2:	4770      	bx	lr
 80003d4:	5c001000 	.word	0x5c001000

080003d8 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80003da:	6853      	ldr	r3, [r2, #4]
 80003dc:	ea23 0000 	bic.w	r0, r3, r0
 80003e0:	4301      	orrs	r1, r0
 80003e2:	6051      	str	r1, [r2, #4]
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	58000400 	.word	0x58000400

080003ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80003ee:	2200      	movs	r2, #0
{
 80003f0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80003f2:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80003f4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80003f8:	2a01      	cmp	r2, #1
 80003fa:	f000 813a 	beq.w	8000672 <HAL_ADC_ConfigChannel+0x286>
 80003fe:	4603      	mov	r3, r0
 8000400:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000402:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8000404:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000408:	6894      	ldr	r4, [r2, #8]
 800040a:	0766      	lsls	r6, r4, #29
 800040c:	f100 8099 	bmi.w	8000542 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000410:	680c      	ldr	r4, [r1, #0]
 8000412:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8000416:	2d00      	cmp	r5, #0
 8000418:	f040 809e 	bne.w	8000558 <HAL_ADC_ConfigChannel+0x16c>
 800041c:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8000420:	fa00 f00c 	lsl.w	r0, r0, ip
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000424:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8000426:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000428:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800042a:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 800042c:	4034      	ands	r4, r6
 800042e:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000430:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8000434:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8000438:	40a6      	lsls	r6, r4
 800043a:	61d0      	str	r0, [r2, #28]
 800043c:	fa0c f404 	lsl.w	r4, ip, r4
 8000440:	5978      	ldr	r0, [r7, r5]
 8000442:	ea20 0006 	bic.w	r0, r0, r6
 8000446:	4320      	orrs	r0, r4
 8000448:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800044a:	6890      	ldr	r0, [r2, #8]
 800044c:	0745      	lsls	r5, r0, #29
 800044e:	f100 8081 	bmi.w	8000554 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000452:	6895      	ldr	r5, [r2, #8]
 8000454:	f015 0508 	ands.w	r5, r5, #8
 8000458:	d157      	bne.n	800050a <HAL_ADC_ConfigChannel+0x11e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800045a:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800045c:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8000460:	2007      	movs	r0, #7
 8000462:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000464:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8000468:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800046c:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8000470:	fa00 fe04 	lsl.w	lr, r0, r4
 8000474:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000478:	4fc4      	ldr	r7, [pc, #784]	; (800078c <HAL_ADC_ConfigChannel+0x3a0>)
 800047a:	f85c 0006 	ldr.w	r0, [ip, r6]
 800047e:	ea20 000e 	bic.w	r0, r0, lr
 8000482:	4320      	orrs	r0, r4
 8000484:	f84c 0006 	str.w	r0, [ip, r6]
 8000488:	6838      	ldr	r0, [r7, #0]
 800048a:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800048e:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8000492:	f000 8098 	beq.w	80005c6 <HAL_ADC_ConfigChannel+0x1da>
 8000496:	68d0      	ldr	r0, [r2, #12]
 8000498:	68d6      	ldr	r6, [r2, #12]
 800049a:	f010 0f10 	tst.w	r0, #16
 800049e:	6948      	ldr	r0, [r1, #20]
 80004a0:	f040 8107 	bne.w	80006b2 <HAL_ADC_ConfigChannel+0x2c6>
 80004a4:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80004a8:	0076      	lsls	r6, r6, #1
 80004aa:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80004ae:	690f      	ldr	r7, [r1, #16]
 80004b0:	2f04      	cmp	r7, #4
 80004b2:	f000 80e1 	beq.w	8000678 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80004b6:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 80004ba:	6808      	ldr	r0, [r1, #0]
 80004bc:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 80004c0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80004c4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004c8:	ea40 000c 	orr.w	r0, r0, ip
 80004cc:	4330      	orrs	r0, r6
 80004ce:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80004d2:	7e4f      	ldrb	r7, [r1, #25]
 80004d4:	690e      	ldr	r6, [r1, #16]
 80004d6:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80004d8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80004dc:	bf0c      	ite	eq
 80004de:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80004e2:	2700      	movne	r7, #0
 80004e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80004e8:	4338      	orrs	r0, r7
 80004ea:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80004ee:	7e0c      	ldrb	r4, [r1, #24]
 80004f0:	6908      	ldr	r0, [r1, #16]
 80004f2:	2c01      	cmp	r4, #1
 80004f4:	d104      	bne.n	8000500 <HAL_ADC_ConfigChannel+0x114>
 80004f6:	f000 001f 	and.w	r0, r0, #31
 80004fa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80004fe:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000500:	6910      	ldr	r0, [r2, #16]
 8000502:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8000506:	4305      	orrs	r5, r0
 8000508:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800050a:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800050c:	07c4      	lsls	r4, r0, #31
 800050e:	d416      	bmi.n	800053e <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000510:	68ce      	ldr	r6, [r1, #12]
 8000512:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000514:	f006 0718 	and.w	r7, r6, #24
 8000518:	4c9d      	ldr	r4, [pc, #628]	; (8000790 <HAL_ADC_ConfigChannel+0x3a4>)
 800051a:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 800051e:	40fc      	lsrs	r4, r7
 8000520:	f3c0 0713 	ubfx	r7, r0, #0, #20

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000524:	f8df c28c 	ldr.w	ip, [pc, #652]	; 80007b4 <HAL_ADC_ConfigChannel+0x3c8>
 8000528:	4004      	ands	r4, r0
 800052a:	ea25 0507 	bic.w	r5, r5, r7
 800052e:	4566      	cmp	r6, ip
 8000530:	ea44 0405 	orr.w	r4, r4, r5
 8000534:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8000538:	d04d      	beq.n	80005d6 <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800053a:	2800      	cmp	r0, #0
 800053c:	db15      	blt.n	800056a <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800053e:	2000      	movs	r0, #0
 8000540:	e003      	b.n	800054a <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000542:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000544:	f042 0220 	orr.w	r2, r2, #32
 8000548:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8000550:	b003      	add	sp, #12
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000554:	6890      	ldr	r0, [r2, #8]
 8000556:	e7d8      	b.n	800050a <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000558:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800055c:	b115      	cbz	r5, 8000564 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800055e:	fab5 f585 	clz	r5, r5
 8000562:	40a8      	lsls	r0, r5
 8000564:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8000568:	e75c      	b.n	8000424 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800056a:	498a      	ldr	r1, [pc, #552]	; (8000794 <HAL_ADC_ConfigChannel+0x3a8>)
 800056c:	428a      	cmp	r2, r1
 800056e:	f000 80c6 	beq.w	80006fe <HAL_ADC_ConfigChannel+0x312>
 8000572:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000576:	428a      	cmp	r2, r1
 8000578:	f000 80c1 	beq.w	80006fe <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800057c:	4e86      	ldr	r6, [pc, #536]	; (8000798 <HAL_ADC_ConfigChannel+0x3ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800057e:	4d87      	ldr	r5, [pc, #540]	; (800079c <HAL_ADC_ConfigChannel+0x3b0>)
 8000580:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000582:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000584:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000588:	43e4      	mvns	r4, r4
 800058a:	f004 0401 	and.w	r4, r4, #1
 800058e:	2c00      	cmp	r4, #0
 8000590:	f000 80c3 	beq.w	800071a <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000594:	4c82      	ldr	r4, [pc, #520]	; (80007a0 <HAL_ADC_ConfigChannel+0x3b4>)
 8000596:	42a0      	cmp	r0, r4
 8000598:	f000 810e 	beq.w	80007b8 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800059c:	4c81      	ldr	r4, [pc, #516]	; (80007a4 <HAL_ADC_ConfigChannel+0x3b8>)
 800059e:	42a0      	cmp	r0, r4
 80005a0:	f000 812d 	beq.w	80007fe <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80005a4:	4c80      	ldr	r4, [pc, #512]	; (80007a8 <HAL_ADC_ConfigChannel+0x3bc>)
 80005a6:	42a0      	cmp	r0, r4
 80005a8:	d1c9      	bne.n	800053e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 80005aa:	0249      	lsls	r1, r1, #9
 80005ac:	d4c7      	bmi.n	800053e <HAL_ADC_ConfigChannel+0x152>
 80005ae:	497a      	ldr	r1, [pc, #488]	; (8000798 <HAL_ADC_ConfigChannel+0x3ac>)
 80005b0:	428a      	cmp	r2, r1
 80005b2:	d1c4      	bne.n	800053e <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80005b4:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b6:	2000      	movs	r0, #0
 80005b8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80005bc:	4332      	orrs	r2, r6
 80005be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80005c2:	60aa      	str	r2, [r5, #8]
}
 80005c4:	e7c1      	b.n	800054a <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80005c6:	68d6      	ldr	r6, [r2, #12]
 80005c8:	6948      	ldr	r0, [r1, #20]
 80005ca:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80005ce:	0076      	lsls	r6, r6, #1
 80005d0:	fa00 f606 	lsl.w	r6, r0, r6
 80005d4:	e76b      	b.n	80004ae <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80005d6:	2f00      	cmp	r7, #0
 80005d8:	d071      	beq.n	80006be <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005da:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80005de:	2c00      	cmp	r4, #0
 80005e0:	f000 80af 	beq.w	8000742 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80005e4:	fab4 f484 	clz	r4, r4
 80005e8:	3401      	adds	r4, #1
 80005ea:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80005ee:	2c09      	cmp	r4, #9
 80005f0:	f240 80a7 	bls.w	8000742 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005f4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	f000 8114 	beq.w	8000826 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80005fe:	fab5 f585 	clz	r5, r5
 8000602:	3501      	adds	r5, #1
 8000604:	06ad      	lsls	r5, r5, #26
 8000606:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800060a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800060e:	2c00      	cmp	r4, #0
 8000610:	f000 8107 	beq.w	8000822 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8000614:	2601      	movs	r6, #1
 8000616:	fab4 f484 	clz	r4, r4
 800061a:	4434      	add	r4, r6
 800061c:	f004 041f 	and.w	r4, r4, #31
 8000620:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000624:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000626:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800062a:	2800      	cmp	r0, #0
 800062c:	f000 80f7 	beq.w	800081e <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8000630:	fab0 f480 	clz	r4, r0
 8000634:	3401      	adds	r4, #1
 8000636:	f004 041f 	and.w	r4, r4, #31
 800063a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800063e:	f1a4 001e 	sub.w	r0, r4, #30
 8000642:	0500      	lsls	r0, r0, #20
 8000644:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000648:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 800064a:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800064e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8000652:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000654:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8000656:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800065a:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 800065e:	fa0c fc00 	lsl.w	ip, ip, r0
 8000662:	4086      	lsls	r6, r0
 8000664:	597c      	ldr	r4, [r7, r5]
 8000666:	ea24 000c 	bic.w	r0, r4, ip
 800066a:	4330      	orrs	r0, r6
 800066c:	5178      	str	r0, [r7, r5]
 800066e:	6808      	ldr	r0, [r1, #0]
}
 8000670:	e763      	b.n	800053a <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8000672:	2002      	movs	r0, #2
}
 8000674:	b003      	add	sp, #12
 8000676:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000678:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800067a:	680d      	ldr	r5, [r1, #0]
 800067c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000680:	06ac      	lsls	r4, r5, #26
 8000682:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8000686:	d030      	beq.n	80006ea <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000688:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800068a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800068e:	4284      	cmp	r4, r0
 8000690:	d026      	beq.n	80006e0 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000692:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8000694:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000698:	4284      	cmp	r4, r0
 800069a:	d02b      	beq.n	80006f4 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800069c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800069e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80006a2:	4284      	cmp	r4, r0
 80006a4:	f47f af31 	bne.w	800050a <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80006a8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80006aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006ae:	66d0      	str	r0, [r2, #108]	; 0x6c
 80006b0:	e72b      	b.n	800050a <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80006b2:	0876      	lsrs	r6, r6, #1
 80006b4:	f006 0608 	and.w	r6, r6, #8
 80006b8:	fa00 f606 	lsl.w	r6, r0, r6
 80006bc:	e6f7      	b.n	80004ae <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006be:	0e80      	lsrs	r0, r0, #26
 80006c0:	1c44      	adds	r4, r0, #1
 80006c2:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80006c6:	2e09      	cmp	r6, #9
 80006c8:	d82d      	bhi.n	8000726 <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80006ca:	06a5      	lsls	r5, r4, #26
 80006cc:	2401      	movs	r4, #1
 80006ce:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80006d2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80006d6:	fa04 f606 	lsl.w	r6, r4, r6
 80006da:	0500      	lsls	r0, r0, #20
 80006dc:	4335      	orrs	r5, r6
 80006de:	e7b3      	b.n	8000648 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80006e0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80006e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006e6:	6650      	str	r0, [r2, #100]	; 0x64
 80006e8:	e7d3      	b.n	8000692 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80006ea:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80006ec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006f0:	6610      	str	r0, [r2, #96]	; 0x60
 80006f2:	e7c9      	b.n	8000688 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80006f4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80006f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006fa:	6690      	str	r0, [r2, #104]	; 0x68
 80006fc:	e7ce      	b.n	800069c <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006fe:	492b      	ldr	r1, [pc, #172]	; (80007ac <HAL_ADC_ConfigChannel+0x3c0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000700:	4e24      	ldr	r6, [pc, #144]	; (8000794 <HAL_ADC_ConfigChannel+0x3a8>)
 8000702:	4c2b      	ldr	r4, [pc, #172]	; (80007b0 <HAL_ADC_ConfigChannel+0x3c4>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000704:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000706:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000708:	68b7      	ldr	r7, [r6, #8]
 800070a:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800070c:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000710:	433c      	orrs	r4, r7
 8000712:	43e4      	mvns	r4, r4
 8000714:	f004 0401 	and.w	r4, r4, #1
 8000718:	e739      	b.n	800058e <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800071a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800071c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800071e:	f042 0220 	orr.w	r2, r2, #32
 8000722:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8000724:	e711      	b.n	800054a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000726:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800072a:	2701      	movs	r7, #1
 800072c:	06a5      	lsls	r5, r4, #26
 800072e:	381e      	subs	r0, #30
 8000730:	fa07 f606 	lsl.w	r6, r7, r6
 8000734:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000738:	0500      	lsls	r0, r0, #20
 800073a:	4335      	orrs	r5, r6
 800073c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8000740:	e782      	b.n	8000648 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000742:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8000746:	2d00      	cmp	r5, #0
 8000748:	d075      	beq.n	8000836 <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 800074a:	fab5 f585 	clz	r5, r5
 800074e:	3501      	adds	r5, #1
 8000750:	06ad      	lsls	r5, r5, #26
 8000752:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000756:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800075a:	2c00      	cmp	r4, #0
 800075c:	d069      	beq.n	8000832 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800075e:	2601      	movs	r6, #1
 8000760:	fab4 f484 	clz	r4, r4
 8000764:	4434      	add	r4, r6
 8000766:	f004 041f 	and.w	r4, r4, #31
 800076a:	fa06 f404 	lsl.w	r4, r6, r4
 800076e:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000770:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8000774:	2800      	cmp	r0, #0
 8000776:	d059      	beq.n	800082c <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8000778:	fab0 f480 	clz	r4, r0
 800077c:	3401      	adds	r4, #1
 800077e:	f004 041f 	and.w	r4, r4, #31
 8000782:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000786:	0520      	lsls	r0, r4, #20
 8000788:	e75e      	b.n	8000648 <HAL_ADC_ConfigChannel+0x25c>
 800078a:	bf00      	nop
 800078c:	5c001000 	.word	0x5c001000
 8000790:	000fffff 	.word	0x000fffff
 8000794:	40022000 	.word	0x40022000
 8000798:	58026000 	.word	0x58026000
 800079c:	58026300 	.word	0x58026300
 80007a0:	cb840000 	.word	0xcb840000
 80007a4:	c7520000 	.word	0xc7520000
 80007a8:	cfb80000 	.word	0xcfb80000
 80007ac:	40022300 	.word	0x40022300
 80007b0:	40022100 	.word	0x40022100
 80007b4:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80007b8:	0208      	lsls	r0, r1, #8
 80007ba:	f53f aec0 	bmi.w	800053e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80007be:	491f      	ldr	r1, [pc, #124]	; (800083c <HAL_ADC_ConfigChannel+0x450>)
 80007c0:	428a      	cmp	r2, r1
 80007c2:	f47f aebc 	bne.w	800053e <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <HAL_ADC_ConfigChannel+0x454>)
 80007c8:	481e      	ldr	r0, [pc, #120]	; (8000844 <HAL_ADC_ConfigChannel+0x458>)
 80007ca:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007cc:	68a9      	ldr	r1, [r5, #8]
 80007ce:	0992      	lsrs	r2, r2, #6
 80007d0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80007d4:	fba0 0202 	umull	r0, r2, r0, r2
 80007d8:	4331      	orrs	r1, r6
 80007da:	0992      	lsrs	r2, r2, #6
 80007dc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007e0:	3201      	adds	r2, #1
 80007e2:	60a9      	str	r1, [r5, #8]
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80007e8:	9a01      	ldr	r2, [sp, #4]
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	f43f aea7 	beq.w	800053e <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 80007f0:	9a01      	ldr	r2, [sp, #4]
 80007f2:	3a01      	subs	r2, #1
 80007f4:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80007f6:	9a01      	ldr	r2, [sp, #4]
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d1f9      	bne.n	80007f0 <HAL_ADC_ConfigChannel+0x404>
 80007fc:	e69f      	b.n	800053e <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80007fe:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8000802:	f47f ae9c 	bne.w	800053e <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000806:	490d      	ldr	r1, [pc, #52]	; (800083c <HAL_ADC_ConfigChannel+0x450>)
 8000808:	428a      	cmp	r2, r1
 800080a:	f47f ae98 	bne.w	800053e <HAL_ADC_ConfigChannel+0x152>
 800080e:	68aa      	ldr	r2, [r5, #8]
 8000810:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000814:	4332      	orrs	r2, r6
 8000816:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800081a:	60aa      	str	r2, [r5, #8]
}
 800081c:	e695      	b.n	800054a <HAL_ADC_ConfigChannel+0x15e>
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <HAL_ADC_ConfigChannel+0x45c>)
 8000820:	e712      	b.n	8000648 <HAL_ADC_ConfigChannel+0x25c>
 8000822:	2402      	movs	r4, #2
 8000824:	e6fe      	b.n	8000624 <HAL_ADC_ConfigChannel+0x238>
 8000826:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800082a:	e6ee      	b.n	800060a <HAL_ADC_ConfigChannel+0x21e>
 800082c:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8000830:	e70a      	b.n	8000648 <HAL_ADC_ConfigChannel+0x25c>
 8000832:	2402      	movs	r4, #2
 8000834:	e79b      	b.n	800076e <HAL_ADC_ConfigChannel+0x382>
 8000836:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800083a:	e78c      	b.n	8000756 <HAL_ADC_ConfigChannel+0x36a>
 800083c:	58026000 	.word	0x58026000
 8000840:	24000014 	.word	0x24000014
 8000844:	053e2d63 	.word	0x053e2d63
 8000848:	fe500000 	.word	0xfe500000

0800084c <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800084c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	07d1      	lsls	r1, r2, #31
 8000852:	d501      	bpl.n	8000858 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000854:	2000      	movs	r0, #0
}
 8000856:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000858:	6899      	ldr	r1, [r3, #8]
 800085a:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <ADC_Enable+0x94>)
 800085c:	4211      	tst	r1, r2
{
 800085e:	b570      	push	{r4, r5, r6, lr}
 8000860:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000862:	d008      	beq.n	8000876 <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000864:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8000866:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800086e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000870:	4303      	orrs	r3, r0
 8000872:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8000874:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8000876:	6899      	ldr	r1, [r3, #8]
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <ADC_Enable+0x98>)
 800087a:	400a      	ands	r2, r1
 800087c:	f042 0201 	orr.w	r2, r2, #1
 8000880:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000882:	f7ff fd8b 	bl	800039c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 800088a:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800088c:	4293      	cmp	r3, r2
 800088e:	d01f      	beq.n	80008d0 <ADC_Enable+0x84>
 8000890:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000894:	4293      	cmp	r3, r2
 8000896:	d01b      	beq.n	80008d0 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <ADC_Enable+0xa0>)
 800089a:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	07d6      	lsls	r6, r2, #31
 80008a0:	d414      	bmi.n	80008cc <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 80008a2:	4e10      	ldr	r6, [pc, #64]	; (80008e4 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80008a4:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80008a6:	07d0      	lsls	r0, r2, #31
 80008a8:	d404      	bmi.n	80008b4 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	4032      	ands	r2, r6
 80008ae:	f042 0201 	orr.w	r2, r2, #1
 80008b2:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80008b4:	f7ff fd72 	bl	800039c <HAL_GetTick>
 80008b8:	1b43      	subs	r3, r0, r5
 80008ba:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80008bc:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80008be:	d902      	bls.n	80008c6 <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	07d1      	lsls	r1, r2, #31
 80008c4:	d5ce      	bpl.n	8000864 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	07d2      	lsls	r2, r2, #31
 80008ca:	d5eb      	bpl.n	80008a4 <ADC_Enable+0x58>
  return HAL_OK;
 80008cc:	2000      	movs	r0, #0
}
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <ADC_Enable+0xa4>)
 80008d2:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80008d4:	06d2      	lsls	r2, r2, #27
 80008d6:	d0e1      	beq.n	800089c <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d1de      	bne.n	800089c <ADC_Enable+0x50>
 80008de:	e7f5      	b.n	80008cc <ADC_Enable+0x80>
 80008e0:	8000003f 	.word	0x8000003f
 80008e4:	7fffffc0 	.word	0x7fffffc0
 80008e8:	40022000 	.word	0x40022000
 80008ec:	58026300 	.word	0x58026300
 80008f0:	40022300 	.word	0x40022300
 80008f4:	40022100 	.word	0x40022100

080008f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80008f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80008fa:	4a5a      	ldr	r2, [pc, #360]	; (8000a64 <ADC_ConfigureBoostMode+0x16c>)
{
 80008fc:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80008fe:	6803      	ldr	r3, [r0, #0]
 8000900:	4293      	cmp	r3, r2
 8000902:	d029      	beq.n	8000958 <ADC_ConfigureBoostMode+0x60>
 8000904:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000908:	4293      	cmp	r3, r2
 800090a:	d025      	beq.n	8000958 <ADC_ConfigureBoostMode+0x60>
 800090c:	4b56      	ldr	r3, [pc, #344]	; (8000a68 <ADC_ConfigureBoostMode+0x170>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000914:	bf14      	ite	ne
 8000916:	2301      	movne	r3, #1
 8000918:	2300      	moveq	r3, #0
 800091a:	b333      	cbz	r3, 800096a <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800091c:	f001 f9ee 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8000920:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8000922:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8000924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000928:	f000 808b 	beq.w	8000a42 <ADC_ConfigureBoostMode+0x14a>
 800092c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000930:	d06f      	beq.n	8000a12 <ADC_ConfigureBoostMode+0x11a>
 8000932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000936:	f000 8084 	beq.w	8000a42 <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800093a:	f7ff fd47 	bl	80003cc <HAL_GetREVID>
 800093e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000942:	4298      	cmp	r0, r3
 8000944:	d84e      	bhi.n	80009e4 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8000946:	4b49      	ldr	r3, [pc, #292]	; (8000a6c <ADC_ConfigureBoostMode+0x174>)
 8000948:	429d      	cmp	r5, r3
 800094a:	d92d      	bls.n	80009a8 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800094c:	6822      	ldr	r2, [r4, #0]
 800094e:	6893      	ldr	r3, [r2, #8]
 8000950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000954:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8000956:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8000958:	4b45      	ldr	r3, [pc, #276]	; (8000a70 <ADC_ConfigureBoostMode+0x178>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000960:	bf14      	ite	ne
 8000962:	2301      	movne	r3, #1
 8000964:	2300      	moveq	r3, #0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1d8      	bne.n	800091c <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800096a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800096e:	f002 fa57 	bl	8002e20 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8000972:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8000974:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8000976:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800097a:	d06c      	beq.n	8000a56 <ADC_ConfigureBoostMode+0x15e>
 800097c:	d808      	bhi.n	8000990 <ADC_ConfigureBoostMode+0x98>
 800097e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8000982:	d050      	beq.n	8000a26 <ADC_ConfigureBoostMode+0x12e>
 8000984:	d916      	bls.n	80009b4 <ADC_ConfigureBoostMode+0xbc>
 8000986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800098a:	d1d6      	bne.n	800093a <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 800098c:	0945      	lsrs	r5, r0, #5
        break;
 800098e:	e7d4      	b.n	800093a <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8000990:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8000994:	d045      	beq.n	8000a22 <ADC_ConfigureBoostMode+0x12a>
 8000996:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800099a:	d1ce      	bne.n	800093a <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800099c:	f7ff fd16 	bl	80003cc <HAL_GetREVID>
 80009a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80009a4:	4298      	cmp	r0, r3
 80009a6:	d840      	bhi.n	8000a2a <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80009a8:	6822      	ldr	r2, [r4, #0]
 80009aa:	6893      	ldr	r3, [r2, #8]
 80009ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009b0:	6093      	str	r3, [r2, #8]
}
 80009b2:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80009b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80009b8:	d006      	beq.n	80009c8 <ADC_ConfigureBoostMode+0xd0>
 80009ba:	d90a      	bls.n	80009d2 <ADC_ConfigureBoostMode+0xda>
 80009bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80009c0:	d002      	beq.n	80009c8 <ADC_ConfigureBoostMode+0xd0>
 80009c2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80009c6:	d1b8      	bne.n	800093a <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80009c8:	0c9b      	lsrs	r3, r3, #18
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80009d0:	e7b3      	b.n	800093a <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 80009d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80009d6:	d0f7      	beq.n	80009c8 <ADC_ConfigureBoostMode+0xd0>
 80009d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80009dc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80009e0:	d0f2      	beq.n	80009c8 <ADC_ConfigureBoostMode+0xd0>
 80009e2:	e7aa      	b.n	800093a <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <ADC_ConfigureBoostMode+0x17c>)
 80009e6:	429d      	cmp	r5, r3
 80009e8:	d805      	bhi.n	80009f6 <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	6893      	ldr	r3, [r2, #8]
 80009ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009f2:	6093      	str	r3, [r2, #8]
}
 80009f4:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <ADC_ConfigureBoostMode+0x180>)
 80009f8:	429d      	cmp	r5, r3
 80009fa:	d91a      	bls.n	8000a32 <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80009fe:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8000a00:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000a02:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8000a04:	d829      	bhi.n	8000a5a <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8000a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0e:	6093      	str	r3, [r2, #8]
}
 8000a10:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8000a12:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000a14:	f7ff fcda 	bl	80003cc <HAL_GetREVID>
 8000a18:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a1c:	4298      	cmp	r0, r3
 8000a1e:	d8e1      	bhi.n	80009e4 <ADC_ConfigureBoostMode+0xec>
 8000a20:	e791      	b.n	8000946 <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8000a22:	09c5      	lsrs	r5, r0, #7
        break;
 8000a24:	e789      	b.n	800093a <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8000a26:	0905      	lsrs	r5, r0, #4
        break;
 8000a28:	e787      	b.n	800093a <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <ADC_ConfigureBoostMode+0x17c>)
 8000a2c:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8000a30:	d2db      	bcs.n	80009ea <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8000a32:	6822      	ldr	r2, [r4, #0]
 8000a34:	6893      	ldr	r3, [r2, #8]
 8000a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6093      	str	r3, [r2, #8]
}
 8000a40:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8000a48:	f7ff fcc0 	bl	80003cc <HAL_GetREVID>
 8000a4c:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a50:	4298      	cmp	r0, r3
 8000a52:	d8c7      	bhi.n	80009e4 <ADC_ConfigureBoostMode+0xec>
 8000a54:	e777      	b.n	8000946 <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8000a56:	0985      	lsrs	r5, r0, #6
        break;
 8000a58:	e76f      	b.n	800093a <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8000a5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000a5e:	6093      	str	r3, [r2, #8]
}
 8000a60:	bd38      	pop	{r3, r4, r5, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000
 8000a68:	58026300 	.word	0x58026300
 8000a6c:	01312d00 	.word	0x01312d00
 8000a70:	40022300 	.word	0x40022300
 8000a74:	00bebc21 	.word	0x00bebc21
 8000a78:	017d7841 	.word	0x017d7841
 8000a7c:	02faf081 	.word	0x02faf081

08000a80 <HAL_ADC_Init>:
{
 8000a80:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8000a82:	2300      	movs	r3, #0
{
 8000a84:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8000a86:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	f000 80d0 	beq.w	8000c2e <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a8e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000a90:	4604      	mov	r4, r0
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ba 	beq.w	8000c0c <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a98:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a9a:	6893      	ldr	r3, [r2, #8]
 8000a9c:	009d      	lsls	r5, r3, #2
 8000a9e:	d503      	bpl.n	8000aa8 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000aa0:	6891      	ldr	r1, [r2, #8]
 8000aa2:	4b71      	ldr	r3, [pc, #452]	; (8000c68 <HAL_ADC_Init+0x1e8>)
 8000aa4:	400b      	ands	r3, r1
 8000aa6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000aa8:	6893      	ldr	r3, [r2, #8]
 8000aaa:	00d8      	lsls	r0, r3, #3
 8000aac:	d416      	bmi.n	8000adc <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000aae:	4b6f      	ldr	r3, [pc, #444]	; (8000c6c <HAL_ADC_Init+0x1ec>)
 8000ab0:	4d6f      	ldr	r5, [pc, #444]	; (8000c70 <HAL_ADC_Init+0x1f0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8000ab4:	6890      	ldr	r0, [r2, #8]
 8000ab6:	099b      	lsrs	r3, r3, #6
 8000ab8:	496e      	ldr	r1, [pc, #440]	; (8000c74 <HAL_ADC_Init+0x1f4>)
 8000aba:	fba5 5303 	umull	r5, r3, r5, r3
 8000abe:	4001      	ands	r1, r0
 8000ac0:	099b      	lsrs	r3, r3, #6
 8000ac2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	6091      	str	r1, [r2, #8]
 8000aca:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000acc:	9b01      	ldr	r3, [sp, #4]
 8000ace:	b12b      	cbz	r3, 8000adc <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8000ad0:	9b01      	ldr	r3, [sp, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000ad6:	9b01      	ldr	r3, [sp, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f9      	bne.n	8000ad0 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000adc:	6893      	ldr	r3, [r2, #8]
 8000ade:	00d9      	lsls	r1, r3, #3
 8000ae0:	d424      	bmi.n	8000b2c <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000ae4:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000aee:	432b      	orrs	r3, r5
 8000af0:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000af2:	6893      	ldr	r3, [r2, #8]
 8000af4:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000af8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000afa:	d11d      	bne.n	8000b38 <HAL_ADC_Init+0xb8>
 8000afc:	06db      	lsls	r3, r3, #27
 8000afe:	d41b      	bmi.n	8000b38 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8000b00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b02:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b0c:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b0e:	07de      	lsls	r6, r3, #31
 8000b10:	d428      	bmi.n	8000b64 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b12:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <HAL_ADC_Init+0x1f8>)
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d017      	beq.n	8000b48 <HAL_ADC_Init+0xc8>
 8000b18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d013      	beq.n	8000b48 <HAL_ADC_Init+0xc8>
 8000b20:	4b56      	ldr	r3, [pc, #344]	; (8000c7c <HAL_ADC_Init+0x1fc>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	07d9      	lsls	r1, r3, #31
 8000b26:	d41d      	bmi.n	8000b64 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b28:	4a55      	ldr	r2, [pc, #340]	; (8000c80 <HAL_ADC_Init+0x200>)
 8000b2a:	e015      	b.n	8000b58 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b2c:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2e:	2500      	movs	r5, #0
 8000b30:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b36:	d0e1      	beq.n	8000afc <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b38:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000b3a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
}
 8000b40:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b42:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000b44:	b002      	add	sp, #8
 8000b46:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b48:	4a4b      	ldr	r2, [pc, #300]	; (8000c78 <HAL_ADC_Init+0x1f8>)
 8000b4a:	4b4e      	ldr	r3, [pc, #312]	; (8000c84 <HAL_ADC_Init+0x204>)
 8000b4c:	6892      	ldr	r2, [r2, #8]
 8000b4e:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b50:	4313      	orrs	r3, r2
 8000b52:	07d8      	lsls	r0, r3, #31
 8000b54:	d406      	bmi.n	8000b64 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b56:	4a4c      	ldr	r2, [pc, #304]	; (8000c88 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b58:	6893      	ldr	r3, [r2, #8]
 8000b5a:	6861      	ldr	r1, [r4, #4]
 8000b5c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b60:	430b      	orrs	r3, r1
 8000b62:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000b64:	f7ff fc32 	bl	80003cc <HAL_GetREVID>
 8000b68:	f241 0303 	movw	r3, #4099	; 0x1003
 8000b6c:	68a1      	ldr	r1, [r4, #8]
 8000b6e:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b70:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000b72:	d851      	bhi.n	8000c18 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b74:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b76:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000b78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000b7a:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8000b7e:	4302      	orrs	r2, r0
 8000b80:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d103      	bne.n	8000b8e <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b86:	6a23      	ldr	r3, [r4, #32]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b90:	b123      	cbz	r3, 8000b9c <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b92:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000b96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000b98:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b9a:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	493b      	ldr	r1, [pc, #236]	; (8000c8c <HAL_ADC_Init+0x20c>)
 8000ba0:	68d8      	ldr	r0, [r3, #12]
 8000ba2:	4001      	ands	r1, r0
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000bae:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bb0:	d11c      	bne.n	8000bec <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000bb2:	0712      	lsls	r2, r2, #28
 8000bb4:	d41a      	bmi.n	8000bec <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000bb6:	68d9      	ldr	r1, [r3, #12]
 8000bb8:	4a35      	ldr	r2, [pc, #212]	; (8000c90 <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bba:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000bc0:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000bc8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000bcc:	2a01      	cmp	r2, #1
 8000bce:	d03a      	beq.n	8000c46 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	f022 0201 	bic.w	r2, r2, #1
 8000bd6:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000bd8:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8000bda:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bde:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000be2:	430a      	orrs	r2, r1
 8000be4:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8000be6:	f7ff fe87 	bl	80008f8 <ADC_ConfigureBoostMode>
 8000bea:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bec:	68e2      	ldr	r2, [r4, #12]
 8000bee:	2a01      	cmp	r2, #1
 8000bf0:	d021      	beq.n	8000c36 <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bf4:	f022 020f 	bic.w	r2, r2, #15
 8000bf8:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8000bfc:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bfe:	f023 0303 	bic.w	r3, r3, #3
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8000c0c:	f003 f958 	bl	8003ec0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c10:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000c12:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8000c16:	e73f      	b.n	8000a98 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000c18:	2910      	cmp	r1, #16
 8000c1a:	d1ab      	bne.n	8000b74 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c1c:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c1e:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000c22:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8000c26:	430a      	orrs	r2, r1
 8000c28:	f042 021c 	orr.w	r2, r2, #28
 8000c2c:	e7a9      	b.n	8000b82 <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8000c2e:	2501      	movs	r5, #1
}
 8000c30:	4628      	mov	r0, r5
 8000c32:	b002      	add	sp, #8
 8000c34:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c38:	69a2      	ldr	r2, [r4, #24]
 8000c3a:	f021 010f 	bic.w	r1, r1, #15
 8000c3e:	3a01      	subs	r2, #1
 8000c40:	430a      	orrs	r2, r1
 8000c42:	631a      	str	r2, [r3, #48]	; 0x30
 8000c44:	e7d9      	b.n	8000bfa <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000c46:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8000c4a:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8000c4c:	3901      	subs	r1, #1
 8000c4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000c50:	4332      	orrs	r2, r6
 8000c52:	691e      	ldr	r6, [r3, #16]
 8000c54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c58:	490e      	ldr	r1, [pc, #56]	; (8000c94 <HAL_ADC_Init+0x214>)
 8000c5a:	4302      	orrs	r2, r0
 8000c5c:	4031      	ands	r1, r6
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	f042 0201 	orr.w	r2, r2, #1
 8000c64:	611a      	str	r2, [r3, #16]
 8000c66:	e7b7      	b.n	8000bd8 <HAL_ADC_Init+0x158>
 8000c68:	5fffffc0 	.word	0x5fffffc0
 8000c6c:	24000014 	.word	0x24000014
 8000c70:	053e2d63 	.word	0x053e2d63
 8000c74:	6fffffc0 	.word	0x6fffffc0
 8000c78:	40022000 	.word	0x40022000
 8000c7c:	58026000 	.word	0x58026000
 8000c80:	58026300 	.word	0x58026300
 8000c84:	40022100 	.word	0x40022100
 8000c88:	40022300 	.word	0x40022300
 8000c8c:	fff0c003 	.word	0xfff0c003
 8000c90:	ffffbffc 	.word	0xffffbffc
 8000c94:	fc00f81e 	.word	0xfc00f81e

08000c98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8000c98:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c9a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8000c9e:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000ca0:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8000ca2:	2a01      	cmp	r2, #1
 8000ca4:	d04d      	beq.n	8000d42 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000ca6:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000ca8:	4c2b      	ldr	r4, [pc, #172]	; (8000d58 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8000caa:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8000cac:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000cae:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8000cb0:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000cb2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8000cb4:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8000cb8:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000cba:	d008      	beq.n	8000cce <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cbc:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc2:	f041 0120 	orr.w	r1, r1, #32
 8000cc6:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000cc8:	b01a      	add	sp, #104	; 0x68
 8000cca:	bcf0      	pop	{r4, r5, r6, r7}
 8000ccc:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cce:	4c23      	ldr	r4, [pc, #140]	; (8000d5c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8000cd0:	68a2      	ldr	r2, [r4, #8]
 8000cd2:	0752      	lsls	r2, r2, #29
 8000cd4:	d50b      	bpl.n	8000cee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8000cd6:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000cda:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cdc:	f042 0220 	orr.w	r2, r2, #32
 8000ce0:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000ce8:	b01a      	add	sp, #104	; 0x68
 8000cea:	bcf0      	pop	{r4, r5, r6, r7}
 8000cec:	4770      	bx	lr
 8000cee:	68a8      	ldr	r0, [r5, #8]
 8000cf0:	f010 0004 	ands.w	r0, r0, #4
 8000cf4:	d1f0      	bne.n	8000cd8 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8000cf6:	b1c6      	cbz	r6, 8000d2a <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8000cf8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8000d64 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8000cfc:	684f      	ldr	r7, [r1, #4]
 8000cfe:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8000d02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000d06:	433a      	orrs	r2, r7
 8000d08:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d0c:	68ad      	ldr	r5, [r5, #8]
 8000d0e:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d10:	432a      	orrs	r2, r5
 8000d12:	07d4      	lsls	r4, r2, #31
 8000d14:	d413      	bmi.n	8000d3e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8000d16:	688a      	ldr	r2, [r1, #8]
 8000d18:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8000d1c:	4910      	ldr	r1, [pc, #64]	; (8000d60 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8000d1e:	4316      	orrs	r6, r2
 8000d20:	4021      	ands	r1, r4
 8000d22:	430e      	orrs	r6, r1
 8000d24:	f8cc 6008 	str.w	r6, [ip, #8]
 8000d28:	e7db      	b.n	8000ce2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8000d2c:	688a      	ldr	r2, [r1, #8]
 8000d2e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000d32:	608a      	str	r2, [r1, #8]
 8000d34:	68a8      	ldr	r0, [r5, #8]
 8000d36:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d38:	4302      	orrs	r2, r0
 8000d3a:	07d0      	lsls	r0, r2, #31
 8000d3c:	d505      	bpl.n	8000d4a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e7cf      	b.n	8000ce2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8000d42:	2002      	movs	r0, #2
}
 8000d44:	b01a      	add	sp, #104	; 0x68
 8000d46:	bcf0      	pop	{r4, r5, r6, r7}
 8000d48:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000d4a:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d4c:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8000d50:	4022      	ands	r2, r4
 8000d52:	608a      	str	r2, [r1, #8]
 8000d54:	e7c5      	b.n	8000ce2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8000d56:	bf00      	nop
 8000d58:	40022000 	.word	0x40022000
 8000d5c:	40022100 	.word	0x40022100
 8000d60:	fffff0e0 	.word	0xfffff0e0
 8000d64:	40022300 	.word	0x40022300

08000d68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000d7a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000d82:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d84:	60cb      	str	r3, [r1, #12]
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	05fa0000 	.word	0x05fa0000

08000d90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_NVIC_SetPriority+0x68>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	2d04      	cmp	r5, #4
 8000da2:	bf28      	it	cs
 8000da4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	2c06      	cmp	r4, #6
 8000da8:	d919      	bls.n	8000dde <HAL_NVIC_SetPriority+0x4e>
 8000daa:	3b03      	subs	r3, #3
 8000dac:	f04f 34ff 	mov.w	r4, #4294967295
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db6:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8000dba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	fa04 f405 	lsl.w	r4, r4, r5
 8000dc0:	ea21 0104 	bic.w	r1, r1, r4
 8000dc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000dc8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	db0a      	blt.n	8000de4 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	0109      	lsls	r1, r1, #4
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_NVIC_SetPriority+0x6c>)
 8000dd2:	b2c9      	uxtb	r1, r1
 8000dd4:	4403      	add	r3, r0
 8000dd6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000dda:	bc30      	pop	{r4, r5}
 8000ddc:	4770      	bx	lr
 8000dde:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de0:	4613      	mov	r3, r2
 8000de2:	e7e8      	b.n	8000db6 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	f000 000f 	and.w	r0, r0, #15
 8000de8:	0109      	lsls	r1, r1, #4
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_NVIC_SetPriority+0x70>)
 8000dec:	b2c9      	uxtb	r1, r1
 8000dee:	4403      	add	r3, r0
 8000df0:	7619      	strb	r1, [r3, #24]
 8000df2:	bc30      	pop	{r4, r5}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ecfc 	.word	0xe000ecfc

08000e04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e04:	2800      	cmp	r0, #0
 8000e06:	db07      	blt.n	8000e18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f000 011f 	and.w	r1, r0, #31
 8000e0e:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <HAL_NVIC_EnableIRQ+0x18>)
 8000e10:	0940      	lsrs	r0, r0, #5
 8000e12:	408b      	lsls	r3, r1
 8000e14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	3801      	subs	r0, #1
 8000e22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e26:	d20d      	bcs.n	8000e44 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2c:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	25f0      	movs	r5, #240	; 0xf0
 8000e32:	4c06      	ldr	r4, [pc, #24]	; (8000e4c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e34:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e36:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000e40:	bc30      	pop	{r4, r5}
 8000e42:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e44:	2001      	movs	r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	e000e010 	.word	0xe000e010
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8000e50:	b188      	cbz	r0, 8000e76 <HAL_DAC_Init+0x26>
{
 8000e52:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000e54:	7903      	ldrb	r3, [r0, #4]
 8000e56:	4604      	mov	r4, r0
 8000e58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e5c:	b13b      	cbz	r3, 8000e6e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e5e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e60:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000e62:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e64:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8000e66:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e68:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000e6a:	7122      	strb	r2, [r4, #4]
}
 8000e6c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8000e6e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8000e70:	f003 f8b8 	bl	8003fe4 <HAL_DAC_MspInit>
 8000e74:	e7f3      	b.n	8000e5e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8000e76:	2001      	movs	r0, #1
}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e80:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8000e82:	680f      	ldr	r7, [r1, #0]
  __HAL_LOCK(hdac);
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	f000 8095 	beq.w	8000fb4 <HAL_DAC_ConfigChannel+0x138>
 8000e8a:	4615      	mov	r5, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e8c:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8000e8e:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000e90:	2f04      	cmp	r7, #4
 8000e92:	4606      	mov	r6, r0
 8000e94:	460c      	mov	r4, r1
  __HAL_LOCK(hdac);
 8000e96:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e98:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000e9a:	d04a      	beq.n	8000f32 <HAL_DAC_ConfigChannel+0xb6>
 8000e9c:	f005 0210 	and.w	r2, r5, #16
 8000ea0:	6801      	ldr	r1, [r0, #0]
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000ea2:	6923      	ldr	r3, [r4, #16]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d108      	bne.n	8000eba <HAL_DAC_ConfigChannel+0x3e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000ea8:	251f      	movs	r5, #31
    tmpreg1 = hdac->Instance->CCR;
 8000eaa:	6b88      	ldr	r0, [r1, #56]	; 0x38
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eac:	6963      	ldr	r3, [r4, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000eae:	4095      	lsls	r5, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eb0:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000eb2:	ea20 0005 	bic.w	r0, r0, r5
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eb6:	4303      	orrs	r3, r0
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000eb8:	638b      	str	r3, [r1, #56]	; 0x38
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000eba:	2007      	movs	r0, #7
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000ebc:	68e5      	ldr	r5, [r4, #12]
  tmpreg1 = hdac->Instance->MCR;
 8000ebe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000ec0:	4090      	lsls	r0, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000ec2:	2d01      	cmp	r5, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000ec4:	ea23 0000 	bic.w	r0, r3, r0
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000ec8:	d02e      	beq.n	8000f28 <HAL_DAC_ConfigChannel+0xac>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000eca:	2d02      	cmp	r5, #2
 8000ecc:	68a5      	ldr	r5, [r4, #8]
 8000ece:	d02e      	beq.n	8000f2e <HAL_DAC_ConfigChannel+0xb2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000ed0:	fab5 f385 	clz	r3, r5
 8000ed4:	095b      	lsrs	r3, r3, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000ed6:	432b      	orrs	r3, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000ed8:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000edc:	6865      	ldr	r5, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000ede:	f640 74fe 	movw	r4, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000ee2:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000ee4:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000ee8:	fa04 f702 	lsl.w	r7, r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eec:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000eee:	4093      	lsls	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ef0:	24c0      	movs	r4, #192	; 0xc0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ef2:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 8000ef6:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000efa:	4303      	orrs	r3, r0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000efc:	4094      	lsls	r4, r2

  /* Return function status */
  return HAL_OK;
 8000efe:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 8000f00:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000f02:	680b      	ldr	r3, [r1, #0]
 8000f04:	ea23 0308 	bic.w	r3, r3, r8
 8000f08:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 8000f0a:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000f0c:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f10:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8000f12:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000f14:	680a      	ldr	r2, [r1, #0]
 8000f16:	ea22 0204 	bic.w	r2, r2, r4
 8000f1a:	600a      	str	r2, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000f1c:	f886 e004 	strb.w	lr, [r6, #4]
  __HAL_UNLOCK(hdac);
 8000f20:	f886 c005 	strb.w	ip, [r6, #5]
}
 8000f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f28:	68a5      	ldr	r5, [r4, #8]
    connectOnChip = 0x00000000UL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e7d3      	b.n	8000ed6 <HAL_DAC_ConfigChannel+0x5a>
    connectOnChip = DAC_MCR_MODE1_0;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e7d1      	b.n	8000ed6 <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 8000f32:	f7ff fa33 	bl	800039c <HAL_GetTick>
 8000f36:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8000f38:	b9c5      	cbnz	r5, 8000f6c <HAL_DAC_ConfigChannel+0xf0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f3a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000fcc <HAL_DAC_ConfigChannel+0x150>
 8000f3e:	e004      	b.n	8000f4a <HAL_DAC_ConfigChannel+0xce>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f40:	f7ff fa2c 	bl	800039c <HAL_GetTick>
 8000f44:	1bc3      	subs	r3, r0, r7
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d837      	bhi.n	8000fba <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f4a:	6833      	ldr	r3, [r6, #0]
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4e:	ea13 0f08 	tst.w	r3, r8
 8000f52:	d1f5      	bne.n	8000f40 <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fa27 	bl	80003a8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f5a:	6831      	ldr	r1, [r6, #0]
 8000f5c:	69a3      	ldr	r3, [r4, #24]
 8000f5e:	640b      	str	r3, [r1, #64]	; 0x40
 8000f60:	e00e      	b.n	8000f80 <HAL_DAC_ConfigChannel+0x104>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f62:	f7ff fa1b 	bl	800039c <HAL_GetTick>
 8000f66:	1bc3      	subs	r3, r0, r7
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d826      	bhi.n	8000fba <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000f6c:	6833      	ldr	r3, [r6, #0]
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dbf6      	blt.n	8000f62 <HAL_DAC_ConfigChannel+0xe6>
      HAL_Delay(1U);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff fa17 	bl	80003a8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f7a:	6831      	ldr	r1, [r6, #0]
 8000f7c:	69a3      	ldr	r3, [r4, #24]
 8000f7e:	644b      	str	r3, [r1, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f80:	f005 0210 	and.w	r2, r5, #16
 8000f84:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8000f88:	6c88      	ldr	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f8a:	23ff      	movs	r3, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f8c:	69e7      	ldr	r7, [r4, #28]
 8000f8e:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f92:	fa03 f502 	lsl.w	r5, r3, r2
 8000f96:	6a23      	ldr	r3, [r4, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f98:	4097      	lsls	r7, r2
 8000f9a:	ea20 000c 	bic.w	r0, r0, ip
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	6827      	ldr	r7, [r4, #0]
 8000fa2:	6488      	str	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000fa4:	fa03 f002 	lsl.w	r0, r3, r2
 8000fa8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000faa:	ea23 0305 	bic.w	r3, r3, r5
 8000fae:	4303      	orrs	r3, r0
 8000fb0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8000fb2:	e776      	b.n	8000ea2 <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 8000fb4:	2002      	movs	r0, #2
}
 8000fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fba:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fbc:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8000fc2:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fc4:	6133      	str	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fc6:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 8000fc8:	e7ac      	b.n	8000f24 <HAL_DAC_ConfigChannel+0xa8>
 8000fca:	bf00      	nop
 8000fcc:	20008000 	.word	0x20008000

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fd4:	680e      	ldr	r6, [r1, #0]
{
 8000fd6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fd8:	2e00      	cmp	r6, #0
 8000fda:	f000 80d3 	beq.w	8001184 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8000fde:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	f8df a220 	ldr.w	sl, [pc, #544]	; 8001204 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fe4:	f8df b220 	ldr.w	fp, [pc, #544]	; 8001208 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fe8:	46b1      	mov	r9, r6
 8000fea:	e020      	b.n	800102e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fee:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff2:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ff6:	f04f 0e0f 	mov.w	lr, #15
 8000ffa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ffe:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001000:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001004:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8001008:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800100a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800100e:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001012:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001016:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800101c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800101e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8001022:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8001024:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001026:	fa39 f203 	lsrs.w	r2, r9, r3
 800102a:	f000 80ab 	beq.w	8001184 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800102e:	2201      	movs	r2, #1
 8001030:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8001032:	ea12 0809 	ands.w	r8, r2, r9
 8001036:	d0f5      	beq.n	8001024 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001038:	684c      	ldr	r4, [r1, #4]
 800103a:	005f      	lsls	r7, r3, #1
 800103c:	f024 0c10 	bic.w	ip, r4, #16
 8001040:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001044:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001046:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104a:	f200 809e 	bhi.w	800118a <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800104e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8001052:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001056:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001058:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800105a:	ea2e 0e05 	bic.w	lr, lr, r5
 800105e:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001060:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001062:	68ce      	ldr	r6, [r1, #12]
 8001064:	40be      	lsls	r6, r7
 8001066:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800106a:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 800106c:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001070:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001074:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001078:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800107a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800107c:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001082:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001084:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001088:	fa02 f207 	lsl.w	r2, r2, r7
 800108c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8001090:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	d0ab      	beq.n	8000fec <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8001094:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001096:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800109a:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109c:	fa02 f707 	lsl.w	r7, r2, r7
 80010a0:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80010a2:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a4:	00e6      	lsls	r6, r4, #3
 80010a6:	d5bd      	bpl.n	8001024 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a8:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 80010ac:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	f046 0602 	orr.w	r6, r6, #2
 80010ba:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010be:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c0:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80010c4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80010c8:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010cc:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d0:	f006 0602 	and.w	r6, r6, #2
 80010d4:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010d6:	4e42      	ldr	r6, [pc, #264]	; (80011e0 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010da:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80010dc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010de:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010e2:	d020      	beq.n	8001126 <HAL_GPIO_Init+0x156>
 80010e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010e8:	42b0      	cmp	r0, r6
 80010ea:	d056      	beq.n	800119a <HAL_GPIO_Init+0x1ca>
 80010ec:	4e3d      	ldr	r6, [pc, #244]	; (80011e4 <HAL_GPIO_Init+0x214>)
 80010ee:	42b0      	cmp	r0, r6
 80010f0:	d058      	beq.n	80011a4 <HAL_GPIO_Init+0x1d4>
 80010f2:	4e3d      	ldr	r6, [pc, #244]	; (80011e8 <HAL_GPIO_Init+0x218>)
 80010f4:	42b0      	cmp	r0, r6
 80010f6:	d04b      	beq.n	8001190 <HAL_GPIO_Init+0x1c0>
 80010f8:	4e3c      	ldr	r6, [pc, #240]	; (80011ec <HAL_GPIO_Init+0x21c>)
 80010fa:	42b0      	cmp	r0, r6
 80010fc:	d05c      	beq.n	80011b8 <HAL_GPIO_Init+0x1e8>
 80010fe:	4e3c      	ldr	r6, [pc, #240]	; (80011f0 <HAL_GPIO_Init+0x220>)
 8001100:	42b0      	cmp	r0, r6
 8001102:	d05e      	beq.n	80011c2 <HAL_GPIO_Init+0x1f2>
 8001104:	4e3b      	ldr	r6, [pc, #236]	; (80011f4 <HAL_GPIO_Init+0x224>)
 8001106:	42b0      	cmp	r0, r6
 8001108:	d051      	beq.n	80011ae <HAL_GPIO_Init+0x1de>
 800110a:	4e3b      	ldr	r6, [pc, #236]	; (80011f8 <HAL_GPIO_Init+0x228>)
 800110c:	42b0      	cmp	r0, r6
 800110e:	d05d      	beq.n	80011cc <HAL_GPIO_Init+0x1fc>
 8001110:	4e3a      	ldr	r6, [pc, #232]	; (80011fc <HAL_GPIO_Init+0x22c>)
 8001112:	42b0      	cmp	r0, r6
 8001114:	d05f      	beq.n	80011d6 <HAL_GPIO_Init+0x206>
 8001116:	4e3a      	ldr	r6, [pc, #232]	; (8001200 <HAL_GPIO_Init+0x230>)
 8001118:	42b0      	cmp	r0, r6
 800111a:	bf0c      	ite	eq
 800111c:	2609      	moveq	r6, #9
 800111e:	260a      	movne	r6, #10
 8001120:	fa06 f202 	lsl.w	r2, r6, r2
 8001124:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001126:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8001128:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 800112c:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001130:	03e5      	lsls	r5, r4, #15
    position++;
 8001132:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8001136:	bf54      	ite	pl
 8001138:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800113a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800113e:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001142:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8001144:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8001148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800114c:	bf54      	ite	pl
 800114e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001150:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001154:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8001156:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800115a:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 800115c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8001160:	bf54      	ite	pl
 8001162:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001164:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001168:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800116a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800116e:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8001170:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8001172:	bf54      	ite	pl
 8001174:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8001176:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800117a:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800117c:	fa39 f203 	lsrs.w	r2, r9, r3
 8001180:	f47f af55 	bne.w	800102e <HAL_GPIO_Init+0x5e>
  }
}
 8001184:	b005      	add	sp, #20
 8001186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800118a:	40bd      	lsls	r5, r7
 800118c:	43ed      	mvns	r5, r5
 800118e:	e775      	b.n	800107c <HAL_GPIO_Init+0xac>
 8001190:	2603      	movs	r6, #3
 8001192:	fa06 f202 	lsl.w	r2, r6, r2
 8001196:	4315      	orrs	r5, r2
 8001198:	e7c5      	b.n	8001126 <HAL_GPIO_Init+0x156>
 800119a:	2601      	movs	r6, #1
 800119c:	fa06 f202 	lsl.w	r2, r6, r2
 80011a0:	4315      	orrs	r5, r2
 80011a2:	e7c0      	b.n	8001126 <HAL_GPIO_Init+0x156>
 80011a4:	2602      	movs	r6, #2
 80011a6:	fa06 f202 	lsl.w	r2, r6, r2
 80011aa:	4315      	orrs	r5, r2
 80011ac:	e7bb      	b.n	8001126 <HAL_GPIO_Init+0x156>
 80011ae:	2606      	movs	r6, #6
 80011b0:	fa06 f202 	lsl.w	r2, r6, r2
 80011b4:	4315      	orrs	r5, r2
 80011b6:	e7b6      	b.n	8001126 <HAL_GPIO_Init+0x156>
 80011b8:	2604      	movs	r6, #4
 80011ba:	fa06 f202 	lsl.w	r2, r6, r2
 80011be:	4315      	orrs	r5, r2
 80011c0:	e7b1      	b.n	8001126 <HAL_GPIO_Init+0x156>
 80011c2:	2605      	movs	r6, #5
 80011c4:	fa06 f202 	lsl.w	r2, r6, r2
 80011c8:	4315      	orrs	r5, r2
 80011ca:	e7ac      	b.n	8001126 <HAL_GPIO_Init+0x156>
 80011cc:	2607      	movs	r6, #7
 80011ce:	fa06 f202 	lsl.w	r2, r6, r2
 80011d2:	4315      	orrs	r5, r2
 80011d4:	e7a7      	b.n	8001126 <HAL_GPIO_Init+0x156>
 80011d6:	2608      	movs	r6, #8
 80011d8:	fa06 f202 	lsl.w	r2, r6, r2
 80011dc:	4315      	orrs	r5, r2
 80011de:	e7a2      	b.n	8001126 <HAL_GPIO_Init+0x156>
 80011e0:	58020000 	.word	0x58020000
 80011e4:	58020800 	.word	0x58020800
 80011e8:	58020c00 	.word	0x58020c00
 80011ec:	58021000 	.word	0x58021000
 80011f0:	58021400 	.word	0x58021400
 80011f4:	58021800 	.word	0x58021800
 80011f8:	58021c00 	.word	0x58021c00
 80011fc:	58022000 	.word	0x58022000
 8001200:	58022400 	.word	0x58022400
 8001204:	58024400 	.word	0x58024400
 8001208:	58000080 	.word	0x58000080

0800120c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800120c:	b902      	cbnz	r2, 8001210 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800120e:	0409      	lsls	r1, r1, #16
 8001210:	6181      	str	r1, [r0, #24]
  }
}
 8001212:	4770      	bx	lr

08001214 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001214:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001216:	ea01 0203 	and.w	r2, r1, r3
 800121a:	ea21 0103 	bic.w	r1, r1, r3
 800121e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001222:	6181      	str	r1, [r0, #24]
}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001228:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_PWREx_ConfigSupply+0x48>)
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	0752      	lsls	r2, r2, #29
 8001230:	d406      	bmi.n	8001240 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001238:	1a18      	subs	r0, r3, r0
 800123a:	bf18      	it	ne
 800123c:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800123e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001240:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001242:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001244:	f022 0207 	bic.w	r2, r2, #7
 8001248:	4310      	orrs	r0, r2
 800124a:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 800124c:	f7ff f8a6 	bl	800039c <HAL_GetTick>
 8001250:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001252:	e005      	b.n	8001260 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001254:	f7ff f8a2 	bl	800039c <HAL_GetTick>
 8001258:	1b00      	subs	r0, r0, r4
 800125a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800125e:	d804      	bhi.n	800126a <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001260:	686b      	ldr	r3, [r5, #4]
 8001262:	049b      	lsls	r3, r3, #18
 8001264:	d5f6      	bpl.n	8001254 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8001266:	2000      	movs	r0, #0
}
 8001268:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800126a:	2001      	movs	r0, #1
}
 800126c:	bd38      	pop	{r3, r4, r5, pc}
 800126e:	bf00      	nop
 8001270:	58024800 	.word	0x58024800

08001274 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001274:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8001276:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800127a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800127c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800127e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001282:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001286:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 8001288:	d038      	beq.n	80012fc <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800128a:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800128e:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001292:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001296:	fb01 f105 	mul.w	r1, r1, r5
 800129a:	2a01      	cmp	r2, #1
 800129c:	ee07 1a90 	vmov	s15, r1
 80012a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80012a4:	d002      	beq.n	80012ac <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80012a6:	2a02      	cmp	r2, #2
 80012a8:	d04e      	beq.n	8001348 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80012aa:	b34a      	cbz	r2, 8001300 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80012ac:	ee07 0a90 	vmov	s15, r0
 80012b0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001368 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80012be:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800136c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80012c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012c6:	ee06 3a90 	vmov	s13, r3
 80012ca:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80012ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80012d2:	ee76 6a85 	vadd.f32	s13, s13, s10
 80012d6:	eee7 6a25 	vfma.f32	s13, s14, s11
 80012da:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80012e6:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f8:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80012fc:	bc30      	pop	{r4, r5}
 80012fe:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	0692      	lsls	r2, r2, #26
 8001304:	d527      	bpl.n	8001356 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001306:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001308:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800130c:	4a18      	ldr	r2, [pc, #96]	; (8001370 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800130e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001312:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800131c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800131e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800136c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8001322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001326:	ee06 2a10 	vmov	s12, r2
 800132a:	ee06 3a90 	vmov	s13, r3
 800132e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8001332:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001336:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800133a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800133e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8001342:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001346:	e7ca      	b.n	80012de <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001348:	ee07 0a90 	vmov	s15, r0
 800134c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001374 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	e7b0      	b.n	80012b8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001356:	ee07 0a90 	vmov	s15, r0
 800135a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001378 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	e7a9      	b.n	80012b8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8001364:	58024400 	.word	0x58024400
 8001368:	4a742400 	.word	0x4a742400
 800136c:	39000000 	.word	0x39000000
 8001370:	03d09000 	.word	0x03d09000
 8001374:	4af42400 	.word	0x4af42400
 8001378:	4c742400 	.word	0x4c742400

0800137c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800137c:	2800      	cmp	r0, #0
 800137e:	f000 81f7 	beq.w	8001770 <HAL_RCC_OscConfig+0x3f4>
{
 8001382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001384:	6803      	ldr	r3, [r0, #0]
 8001386:	4604      	mov	r4, r0
 8001388:	07d9      	lsls	r1, r3, #31
 800138a:	d52e      	bpl.n	80013ea <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138c:	49b4      	ldr	r1, [pc, #720]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 800138e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001390:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001392:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001396:	2a10      	cmp	r2, #16
 8001398:	f000 812c 	beq.w	80015f4 <HAL_RCC_OscConfig+0x278>
 800139c:	2a18      	cmp	r2, #24
 800139e:	f000 8124 	beq.w	80015ea <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	6863      	ldr	r3, [r4, #4]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	f000 8167 	beq.w	800167a <HAL_RCC_OscConfig+0x2fe>
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 817f 	beq.w	80016b0 <HAL_RCC_OscConfig+0x334>
 80013b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b6:	4baa      	ldr	r3, [pc, #680]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	f000 8278 	beq.w	80018ae <HAL_RCC_OscConfig+0x532>
 80013be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013cc:	f7fe ffe6 	bl	800039c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013d0:	4ea3      	ldr	r6, [pc, #652]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 80013d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013d4:	e005      	b.n	80013e2 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d6:	f7fe ffe1 	bl	800039c <HAL_GetTick>
 80013da:	1b40      	subs	r0, r0, r5
 80013dc:	2864      	cmp	r0, #100	; 0x64
 80013de:	f200 8165 	bhi.w	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013e2:	6833      	ldr	r3, [r6, #0]
 80013e4:	039f      	lsls	r7, r3, #14
 80013e6:	d5f6      	bpl.n	80013d6 <HAL_RCC_OscConfig+0x5a>
 80013e8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	0799      	lsls	r1, r3, #30
 80013ec:	d521      	bpl.n	8001432 <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ee:	4a9c      	ldr	r2, [pc, #624]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 80013f0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013f4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80013f8:	f040 80a8 	bne.w	800154c <HAL_RCC_OscConfig+0x1d0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013fc:	4b98      	ldr	r3, [pc, #608]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	075b      	lsls	r3, r3, #29
 8001402:	d503      	bpl.n	800140c <HAL_RCC_OscConfig+0x90>
 8001404:	68e3      	ldr	r3, [r4, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80ed 	beq.w	80015e6 <HAL_RCC_OscConfig+0x26a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	f7fe ffde 	bl	80003cc <HAL_GetREVID>
 8001410:	f241 0303 	movw	r3, #4099	; 0x1003
 8001414:	4298      	cmp	r0, r3
 8001416:	f200 8189 	bhi.w	800172c <HAL_RCC_OscConfig+0x3b0>
 800141a:	6922      	ldr	r2, [r4, #16]
 800141c:	2a40      	cmp	r2, #64	; 0x40
 800141e:	f000 824e 	beq.w	80018be <HAL_RCC_OscConfig+0x542>
 8001422:	498f      	ldr	r1, [pc, #572]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 8001424:	684b      	ldr	r3, [r1, #4]
 8001426:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800142a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800142e:	604b      	str	r3, [r1, #4]
 8001430:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001432:	06d9      	lsls	r1, r3, #27
 8001434:	d456      	bmi.n	80014e4 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001436:	071d      	lsls	r5, r3, #28
 8001438:	d517      	bpl.n	800146a <HAL_RCC_OscConfig+0xee>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143a:	6963      	ldr	r3, [r4, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80b4 	beq.w	80015aa <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b87      	ldr	r3, [pc, #540]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 8001444:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001446:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800144e:	f7fe ffa5 	bl	800039c <HAL_GetTick>
 8001452:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001454:	e005      	b.n	8001462 <HAL_RCC_OscConfig+0xe6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001456:	f7fe ffa1 	bl	800039c <HAL_GetTick>
 800145a:	1b40      	subs	r0, r0, r5
 800145c:	2802      	cmp	r0, #2
 800145e:	f200 8125 	bhi.w	80016ac <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001462:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001464:	0798      	lsls	r0, r3, #30
 8001466:	d5f6      	bpl.n	8001456 <HAL_RCC_OscConfig+0xda>
 8001468:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800146a:	069a      	lsls	r2, r3, #26
 800146c:	d517      	bpl.n	800149e <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800146e:	69a3      	ldr	r3, [r4, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8134 	beq.w	80016de <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 8001476:	4b7a      	ldr	r3, [pc, #488]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 8001478:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800147a:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 800147c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001480:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001482:	f7fe ff8b 	bl	800039c <HAL_GetTick>
 8001486:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001488:	e005      	b.n	8001496 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800148a:	f7fe ff87 	bl	800039c <HAL_GetTick>
 800148e:	1b40      	subs	r0, r0, r5
 8001490:	2802      	cmp	r0, #2
 8001492:	f200 810b 	bhi.w	80016ac <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001496:	6833      	ldr	r3, [r6, #0]
 8001498:	049f      	lsls	r7, r3, #18
 800149a:	d5f6      	bpl.n	800148a <HAL_RCC_OscConfig+0x10e>
 800149c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149e:	0759      	lsls	r1, r3, #29
 80014a0:	f100 80b2 	bmi.w	8001608 <HAL_RCC_OscConfig+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014a6:	b1d8      	cbz	r0, 80014e0 <HAL_RCC_OscConfig+0x164>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80014a8:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80014b0:	2a18      	cmp	r2, #24
 80014b2:	f000 81ce 	beq.w	8001852 <HAL_RCC_OscConfig+0x4d6>
        __HAL_RCC_PLL_DISABLE();
 80014b6:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b8:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ba:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80014bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80014c0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c2:	f000 8161 	beq.w	8001788 <HAL_RCC_OscConfig+0x40c>
        tickstart = HAL_GetTick();
 80014c6:	f7fe ff69 	bl	800039c <HAL_GetTick>
 80014ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014cc:	e005      	b.n	80014da <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7fe ff65 	bl	800039c <HAL_GetTick>
 80014d2:	1b00      	subs	r0, r0, r4
 80014d4:	2802      	cmp	r0, #2
 80014d6:	f200 80e9 	bhi.w	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014da:	682b      	ldr	r3, [r5, #0]
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	d4f6      	bmi.n	80014ce <HAL_RCC_OscConfig+0x152>
  return HAL_OK;
 80014e0:	2000      	movs	r0, #0
}
 80014e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e4:	4a5e      	ldr	r2, [pc, #376]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 80014e6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d072      	beq.n	80015d8 <HAL_RCC_OscConfig+0x25c>
 80014f2:	2b18      	cmp	r3, #24
 80014f4:	d06c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014f6:	69e3      	ldr	r3, [r4, #28]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8103 	beq.w	8001704 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 8001500:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001502:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8001504:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001508:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800150a:	f7fe ff47 	bl	800039c <HAL_GetTick>
 800150e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001510:	e005      	b.n	800151e <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001512:	f7fe ff43 	bl	800039c <HAL_GetTick>
 8001516:	1b40      	subs	r0, r0, r5
 8001518:	2802      	cmp	r0, #2
 800151a:	f200 80c7 	bhi.w	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800151e:	6833      	ldr	r3, [r6, #0]
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	d5f6      	bpl.n	8001512 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001524:	f7fe ff52 	bl	80003cc <HAL_GetREVID>
 8001528:	f241 0303 	movw	r3, #4099	; 0x1003
 800152c:	4298      	cmp	r0, r3
 800152e:	f200 81e9 	bhi.w	8001904 <HAL_RCC_OscConfig+0x588>
 8001532:	6a22      	ldr	r2, [r4, #32]
 8001534:	6873      	ldr	r3, [r6, #4]
 8001536:	2a20      	cmp	r2, #32
 8001538:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800153c:	bf0c      	ite	eq
 800153e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001542:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8001546:	6073      	str	r3, [r6, #4]
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	e774      	b.n	8001436 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800154c:	2b18      	cmp	r3, #24
 800154e:	f000 810b 	beq.w	8001768 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001552:	68e2      	ldr	r2, [r4, #12]
 8001554:	2a00      	cmp	r2, #0
 8001556:	f000 80f3 	beq.w	8001740 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800155a:	4941      	ldr	r1, [pc, #260]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 800155c:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155e:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001560:	f023 0319 	bic.w	r3, r3, #25
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001568:	f7fe ff18 	bl	800039c <HAL_GetTick>
 800156c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156e:	e005      	b.n	800157c <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001570:	f7fe ff14 	bl	800039c <HAL_GetTick>
 8001574:	1b40      	subs	r0, r0, r5
 8001576:	2802      	cmp	r0, #2
 8001578:	f200 8098 	bhi.w	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800157c:	6833      	ldr	r3, [r6, #0]
 800157e:	075f      	lsls	r7, r3, #29
 8001580:	d5f6      	bpl.n	8001570 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	f7fe ff23 	bl	80003cc <HAL_GetREVID>
 8001586:	f241 0303 	movw	r3, #4099	; 0x1003
 800158a:	4298      	cmp	r0, r3
 800158c:	f200 81c3 	bhi.w	8001916 <HAL_RCC_OscConfig+0x59a>
 8001590:	6922      	ldr	r2, [r4, #16]
 8001592:	6873      	ldr	r3, [r6, #4]
 8001594:	2a40      	cmp	r2, #64	; 0x40
 8001596:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800159a:	bf0c      	ite	eq
 800159c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80015a0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80015a4:	6073      	str	r3, [r6, #4]
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	e743      	b.n	8001432 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 80015ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ae:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80015b6:	f7fe fef1 	bl	800039c <HAL_GetTick>
 80015ba:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015bc:	e004      	b.n	80015c8 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015be:	f7fe feed 	bl	800039c <HAL_GetTick>
 80015c2:	1b40      	subs	r0, r0, r5
 80015c4:	2802      	cmp	r0, #2
 80015c6:	d871      	bhi.n	80016ac <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015c8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80015ca:	0799      	lsls	r1, r3, #30
 80015cc:	d4f7      	bmi.n	80015be <HAL_RCC_OscConfig+0x242>
 80015ce:	e74b      	b.n	8001468 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	2a01      	cmp	r2, #1
 80015d6:	d18e      	bne.n	80014f6 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	05da      	lsls	r2, r3, #23
 80015de:	d552      	bpl.n	8001686 <HAL_RCC_OscConfig+0x30a>
 80015e0:	69e3      	ldr	r3, [r4, #28]
 80015e2:	2b80      	cmp	r3, #128	; 0x80
 80015e4:	d04f      	beq.n	8001686 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
}
 80015e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015ea:	f001 0103 	and.w	r1, r1, #3
 80015ee:	2902      	cmp	r1, #2
 80015f0:	f47f aed7 	bne.w	80013a2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	0392      	lsls	r2, r2, #14
 80015fa:	f57f aef6 	bpl.w	80013ea <HAL_RCC_OscConfig+0x6e>
 80015fe:	6862      	ldr	r2, [r4, #4]
 8001600:	2a00      	cmp	r2, #0
 8001602:	f47f aef2 	bne.w	80013ea <HAL_RCC_OscConfig+0x6e>
 8001606:	e7ee      	b.n	80015e6 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x2e8>)
 800160a:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800160c:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800160e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001612:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001614:	f7fe fec2 	bl	800039c <HAL_GetTick>
 8001618:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800161a:	e004      	b.n	8001626 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7fe febe 	bl	800039c <HAL_GetTick>
 8001620:	1b40      	subs	r0, r0, r5
 8001622:	2864      	cmp	r0, #100	; 0x64
 8001624:	d842      	bhi.n	80016ac <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001626:	6833      	ldr	r3, [r6, #0]
 8001628:	05da      	lsls	r2, r3, #23
 800162a:	d5f7      	bpl.n	800161c <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	68a3      	ldr	r3, [r4, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	f000 817a 	beq.w	8001928 <HAL_RCC_OscConfig+0x5ac>
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 814b 	beq.w	80018d0 <HAL_RCC_OscConfig+0x554>
 800163a:	2b05      	cmp	r3, #5
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
 800163e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001640:	f000 8187 	beq.w	8001952 <HAL_RCC_OscConfig+0x5d6>
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	671a      	str	r2, [r3, #112]	; 0x70
 800164a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800164c:	f022 0204 	bic.w	r2, r2, #4
 8001650:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001652:	f7fe fea3 	bl	800039c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001656:	4e02      	ldr	r6, [pc, #8]	; (8001660 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800165c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x2f6>
 8001660:	58024400 	.word	0x58024400
 8001664:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7fe fe98 	bl	800039c <HAL_GetTick>
 800166c:	1b40      	subs	r0, r0, r5
 800166e:	42b8      	cmp	r0, r7
 8001670:	d81c      	bhi.n	80016ac <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001672:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001674:	079b      	lsls	r3, r3, #30
 8001676:	d5f7      	bpl.n	8001668 <HAL_RCC_OscConfig+0x2ec>
 8001678:	e714      	b.n	80014a4 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167a:	4aae      	ldr	r2, [pc, #696]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 800167c:	6813      	ldr	r3, [r2, #0]
 800167e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	e6a2      	b.n	80013cc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001686:	f7fe fea1 	bl	80003cc <HAL_GetREVID>
 800168a:	f241 0303 	movw	r3, #4099	; 0x1003
 800168e:	4298      	cmp	r0, r3
 8001690:	d870      	bhi.n	8001774 <HAL_RCC_OscConfig+0x3f8>
 8001692:	6a22      	ldr	r2, [r4, #32]
 8001694:	2a20      	cmp	r2, #32
 8001696:	f000 8153 	beq.w	8001940 <HAL_RCC_OscConfig+0x5c4>
 800169a:	49a6      	ldr	r1, [pc, #664]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 800169c:	684b      	ldr	r3, [r1, #4]
 800169e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016a2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	e6c4      	b.n	8001436 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80016ac:	2003      	movs	r0, #3
}
 80016ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b0:	4ba0      	ldr	r3, [pc, #640]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 80016b2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016b4:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016c4:	f7fe fe6a 	bl	800039c <HAL_GetTick>
 80016c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016ca:	e004      	b.n	80016d6 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f7fe fe66 	bl	800039c <HAL_GetTick>
 80016d0:	1b40      	subs	r0, r0, r5
 80016d2:	2864      	cmp	r0, #100	; 0x64
 80016d4:	d8ea      	bhi.n	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016d6:	6833      	ldr	r3, [r6, #0]
 80016d8:	0398      	lsls	r0, r3, #14
 80016da:	d4f7      	bmi.n	80016cc <HAL_RCC_OscConfig+0x350>
 80016dc:	e684      	b.n	80013e8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 80016de:	4b95      	ldr	r3, [pc, #596]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 80016e0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016e2:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80016e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016ea:	f7fe fe57 	bl	800039c <HAL_GetTick>
 80016ee:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016f0:	e004      	b.n	80016fc <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016f2:	f7fe fe53 	bl	800039c <HAL_GetTick>
 80016f6:	1b40      	subs	r0, r0, r5
 80016f8:	2802      	cmp	r0, #2
 80016fa:	d8d7      	bhi.n	80016ac <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016fc:	6833      	ldr	r3, [r6, #0]
 80016fe:	0498      	lsls	r0, r3, #18
 8001700:	d4f7      	bmi.n	80016f2 <HAL_RCC_OscConfig+0x376>
 8001702:	e6cb      	b.n	800149c <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8001704:	4b8b      	ldr	r3, [pc, #556]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 8001706:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001708:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 800170a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800170e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001710:	f7fe fe44 	bl	800039c <HAL_GetTick>
 8001714:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001716:	e004      	b.n	8001722 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001718:	f7fe fe40 	bl	800039c <HAL_GetTick>
 800171c:	1b40      	subs	r0, r0, r5
 800171e:	2802      	cmp	r0, #2
 8001720:	d8c4      	bhi.n	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001722:	6833      	ldr	r3, [r6, #0]
 8001724:	05df      	lsls	r7, r3, #23
 8001726:	d4f7      	bmi.n	8001718 <HAL_RCC_OscConfig+0x39c>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	e684      	b.n	8001436 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4a81      	ldr	r2, [pc, #516]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 800172e:	6921      	ldr	r1, [r4, #16]
 8001730:	6853      	ldr	r3, [r2, #4]
 8001732:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001736:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800173a:	6053      	str	r3, [r2, #4]
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	e678      	b.n	8001432 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b7c      	ldr	r3, [pc, #496]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 8001742:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001744:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800174c:	f7fe fe26 	bl	800039c <HAL_GetTick>
 8001750:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001752:	e004      	b.n	800175e <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7fe fe22 	bl	800039c <HAL_GetTick>
 8001758:	1b40      	subs	r0, r0, r5
 800175a:	2802      	cmp	r0, #2
 800175c:	d8a6      	bhi.n	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800175e:	6833      	ldr	r3, [r6, #0]
 8001760:	0758      	lsls	r0, r3, #29
 8001762:	d4f7      	bmi.n	8001754 <HAL_RCC_OscConfig+0x3d8>
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	e664      	b.n	8001432 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001768:	0792      	lsls	r2, r2, #30
 800176a:	f47f aef2 	bne.w	8001552 <HAL_RCC_OscConfig+0x1d6>
 800176e:	e645      	b.n	80013fc <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8001770:	2001      	movs	r0, #1
}
 8001772:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001774:	4a6f      	ldr	r2, [pc, #444]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 8001776:	6a21      	ldr	r1, [r4, #32]
 8001778:	68d3      	ldr	r3, [r2, #12]
 800177a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800177e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001782:	60d3      	str	r3, [r2, #12]
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	e656      	b.n	8001436 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8001788:	f7fe fe08 	bl	800039c <HAL_GetTick>
 800178c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800178e:	e004      	b.n	800179a <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7fe fe04 	bl	800039c <HAL_GetTick>
 8001794:	1b80      	subs	r0, r0, r6
 8001796:	2802      	cmp	r0, #2
 8001798:	d888      	bhi.n	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	0199      	lsls	r1, r3, #6
 800179e:	d4f7      	bmi.n	8001790 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x5bc>)
 80017a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80017a6:	4013      	ands	r3, r2
 80017a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017aa:	4964      	ldr	r1, [pc, #400]	; (800193c <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ac:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ae:	4e61      	ldr	r6, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80017b4:	62ab      	str	r3, [r5, #40]	; 0x28
 80017b6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80017b8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80017bc:	3f01      	subs	r7, #1
 80017be:	1e50      	subs	r0, r2, #1
 80017c0:	3b01      	subs	r3, #1
 80017c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017c4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	0400      	lsls	r0, r0, #16
 80017cc:	3a01      	subs	r2, #1
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80017d4:	0612      	lsls	r2, r2, #24
 80017d6:	4303      	orrs	r3, r0
 80017d8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80017dc:	433b      	orrs	r3, r7
 80017de:	4313      	orrs	r3, r2
 80017e0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80017e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017ea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017ee:	4011      	ands	r1, r2
 80017f0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80017f4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017fa:	f023 030c 	bic.w	r3, r3, #12
 80017fe:	4313      	orrs	r3, r2
 8001800:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001802:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001804:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	4313      	orrs	r3, r2
 800180c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800180e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001816:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800181e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001826:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800182e:	682b      	ldr	r3, [r5, #0]
 8001830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001834:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001836:	f7fe fdb1 	bl	800039c <HAL_GetTick>
 800183a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800183c:	e005      	b.n	800184a <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe fdad 	bl	800039c <HAL_GetTick>
 8001842:	1b00      	subs	r0, r0, r4
 8001844:	2802      	cmp	r0, #2
 8001846:	f63f af31 	bhi.w	80016ac <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800184a:	6833      	ldr	r3, [r6, #0]
 800184c:	019a      	lsls	r2, r3, #6
 800184e:	d5f6      	bpl.n	800183e <HAL_RCC_OscConfig+0x4c2>
 8001850:	e646      	b.n	80014e0 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001852:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001856:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001858:	f43f ae43 	beq.w	80014e2 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001860:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001862:	428b      	cmp	r3, r1
 8001864:	f47f aebf 	bne.w	80015e6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001868:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800186e:	429a      	cmp	r2, r3
 8001870:	f47f aeb9 	bne.w	80015e6 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001874:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001876:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800187a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	f47f aeb2 	bne.w	80015e6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001884:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8001888:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	f47f aeab 	bne.w	80015e6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001890:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001892:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8001896:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	f47f aea4 	bne.w	80015e6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800189e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80018a0:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80018a4:	3801      	subs	r0, #1
  return HAL_OK;
 80018a6:	1a28      	subs	r0, r5, r0
 80018a8:	bf18      	it	ne
 80018aa:	2001      	movne	r0, #1
}
 80018ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e586      	b.n	80013cc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 80018c0:	6853      	ldr	r3, [r2, #4]
 80018c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ca:	6053      	str	r3, [r2, #4]
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	e5b0      	b.n	8001432 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018d8:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	671a      	str	r2, [r3, #112]	; 0x70
 80018e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018e2:	f022 0204 	bic.w	r2, r2, #4
 80018e6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80018e8:	f7fe fd58 	bl	800039c <HAL_GetTick>
 80018ec:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018ee:	e005      	b.n	80018fc <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7fe fd54 	bl	800039c <HAL_GetTick>
 80018f4:	1b40      	subs	r0, r0, r5
 80018f6:	42b8      	cmp	r0, r7
 80018f8:	f63f aed8 	bhi.w	80016ac <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018fc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80018fe:	0798      	lsls	r0, r3, #30
 8001900:	d4f6      	bmi.n	80018f0 <HAL_RCC_OscConfig+0x574>
 8001902:	e5cf      	b.n	80014a4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001904:	68f3      	ldr	r3, [r6, #12]
 8001906:	6a22      	ldr	r2, [r4, #32]
 8001908:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800190c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001910:	60f3      	str	r3, [r6, #12]
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	e58f      	b.n	8001436 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	6873      	ldr	r3, [r6, #4]
 8001918:	6922      	ldr	r2, [r4, #16]
 800191a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800191e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001922:	6073      	str	r3, [r6, #4]
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	e584      	b.n	8001432 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	4a02      	ldr	r2, [pc, #8]	; (8001934 <HAL_RCC_OscConfig+0x5b8>)
 800192a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001932:	e68e      	b.n	8001652 <HAL_RCC_OscConfig+0x2d6>
 8001934:	58024400 	.word	0x58024400
 8001938:	fffffc0c 	.word	0xfffffc0c
 800193c:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001940:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_RCC_OscConfig+0x5e8>)
 8001942:	6853      	ldr	r3, [r2, #4]
 8001944:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800194c:	6053      	str	r3, [r2, #4]
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	e571      	b.n	8001436 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	f042 0204 	orr.w	r2, r2, #4
 8001956:	671a      	str	r2, [r3, #112]	; 0x70
 8001958:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	671a      	str	r2, [r3, #112]	; 0x70
 8001960:	e677      	b.n	8001652 <HAL_RCC_OscConfig+0x2d6>
 8001962:	bf00      	nop
 8001964:	58024400 	.word	0x58024400

08001968 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001968:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x120>)
 800196a:	6913      	ldr	r3, [r2, #16]
 800196c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001970:	2b10      	cmp	r3, #16
 8001972:	d004      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x16>
 8001974:	2b18      	cmp	r3, #24
 8001976:	d00d      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x2c>
 8001978:	b11b      	cbz	r3, 8001982 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800197a:	4844      	ldr	r0, [pc, #272]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x124>)
 800197c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197e:	4844      	ldr	r0, [pc, #272]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x128>)
 8001980:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	0699      	lsls	r1, r3, #26
 8001986:	d54a      	bpl.n	8001a1e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001988:	6813      	ldr	r3, [r2, #0]
 800198a:	4842      	ldr	r0, [pc, #264]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x12c>)
 800198c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001990:	40d8      	lsrs	r0, r3
 8001992:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001994:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8001996:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001998:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800199a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 800199c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80019a0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80019a4:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 80019a6:	d038      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80019a8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80019ac:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80019b0:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80019b4:	fb01 f105 	mul.w	r1, r1, r5
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	ee07 1a90 	vmov	s15, r1
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 80019c2:	d002      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x62>
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d02c      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0xba>
 80019c8:	b393      	cbz	r3, 8001a30 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019ca:	ee07 0a90 	vmov	s15, r0
 80019ce:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001a98 <HAL_RCC_GetSysClockFreq+0x130>
 80019d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80019d8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80019dc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8001a9c <HAL_RCC_GetSysClockFreq+0x134>
 80019e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e4:	ee06 3a90 	vmov	s13, r3
 80019e8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80019ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80019f0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80019f4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80019f8:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x120>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001a04:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a16:	ee17 0a90 	vmov	r0, s15
}
 8001a1a:	bc30      	pop	{r4, r5}
 8001a1c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a1e:	481d      	ldr	r0, [pc, #116]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8001a20:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a22:	ee07 0a90 	vmov	s15, r0
 8001a26:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001aa0 <HAL_RCC_GetSysClockFreq+0x138>
 8001a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2e:	e7d2      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	069b      	lsls	r3, r3, #26
 8001a34:	d520      	bpl.n	8001a78 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a36:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a38:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a3c:	4915      	ldr	r1, [pc, #84]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a3e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a42:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a4c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a4e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8001a9c <HAL_RCC_GetSysClockFreq+0x134>
 8001a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a56:	ee06 1a10 	vmov	s12, r1
 8001a5a:	ee06 3a90 	vmov	s13, r3
 8001a5e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8001a62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a66:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001a6a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8001a6e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8001a72:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001a76:	e7c1      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a78:	ee07 0a90 	vmov	s15, r0
 8001a7c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001aa4 <HAL_RCC_GetSysClockFreq+0x13c>
 8001a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a84:	e7a7      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x6e>
 8001a86:	bf00      	nop
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	003d0900 	.word	0x003d0900
 8001a90:	007a1200 	.word	0x007a1200
 8001a94:	03d09000 	.word	0x03d09000
 8001a98:	4a742400 	.word	0x4a742400
 8001a9c:	39000000 	.word	0x39000000
 8001aa0:	4af42400 	.word	0x4af42400
 8001aa4:	4c742400 	.word	0x4c742400

08001aa8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	f000 810e 	beq.w	8001cca <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aae:	4a8d      	ldr	r2, [pc, #564]	; (8001ce4 <HAL_RCC_ClockConfig+0x23c>)
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	428b      	cmp	r3, r1
{
 8001ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001abc:	4604      	mov	r4, r0
 8001abe:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	d20c      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	f023 030f 	bic.w	r3, r3, #15
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001acc:	6813      	ldr	r3, [r2, #0]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	428b      	cmp	r3, r1
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001ad6:	2001      	movs	r0, #1
}
 8001ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	075f      	lsls	r7, r3, #29
 8001ae0:	d50b      	bpl.n	8001afa <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ae2:	4981      	ldr	r1, [pc, #516]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001ae4:	6920      	ldr	r0, [r4, #16]
 8001ae6:	698a      	ldr	r2, [r1, #24]
 8001ae8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001aec:	4290      	cmp	r0, r2
 8001aee:	d904      	bls.n	8001afa <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001af0:	698a      	ldr	r2, [r1, #24]
 8001af2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001af6:	4302      	orrs	r2, r0
 8001af8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afa:	071e      	lsls	r6, r3, #28
 8001afc:	d50b      	bpl.n	8001b16 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001afe:	497a      	ldr	r1, [pc, #488]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001b00:	6960      	ldr	r0, [r4, #20]
 8001b02:	69ca      	ldr	r2, [r1, #28]
 8001b04:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001b08:	4290      	cmp	r0, r2
 8001b0a:	d904      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b0c:	69ca      	ldr	r2, [r1, #28]
 8001b0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b12:	4302      	orrs	r2, r0
 8001b14:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	06d8      	lsls	r0, r3, #27
 8001b18:	d50b      	bpl.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b1a:	4973      	ldr	r1, [pc, #460]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001b1c:	69a0      	ldr	r0, [r4, #24]
 8001b1e:	69ca      	ldr	r2, [r1, #28]
 8001b20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001b24:	4290      	cmp	r0, r2
 8001b26:	d904      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b28:	69ca      	ldr	r2, [r1, #28]
 8001b2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b2e:	4302      	orrs	r2, r0
 8001b30:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b32:	0699      	lsls	r1, r3, #26
 8001b34:	d50b      	bpl.n	8001b4e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b36:	496c      	ldr	r1, [pc, #432]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001b38:	69e0      	ldr	r0, [r4, #28]
 8001b3a:	6a0a      	ldr	r2, [r1, #32]
 8001b3c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001b40:	4290      	cmp	r0, r2
 8001b42:	d904      	bls.n	8001b4e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b44:	6a0a      	ldr	r2, [r1, #32]
 8001b46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b4a:	4302      	orrs	r2, r0
 8001b4c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4e:	079a      	lsls	r2, r3, #30
 8001b50:	f140 80ad 	bpl.w	8001cae <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b54:	4864      	ldr	r0, [pc, #400]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001b56:	68e1      	ldr	r1, [r4, #12]
 8001b58:	6982      	ldr	r2, [r0, #24]
 8001b5a:	f002 020f 	and.w	r2, r2, #15
 8001b5e:	4291      	cmp	r1, r2
 8001b60:	d904      	bls.n	8001b6c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b62:	6982      	ldr	r2, [r0, #24]
 8001b64:	f022 020f 	bic.w	r2, r2, #15
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6c:	07d8      	lsls	r0, r3, #31
 8001b6e:	d531      	bpl.n	8001bd4 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b70:	4a5d      	ldr	r2, [pc, #372]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001b72:	68a1      	ldr	r1, [r4, #8]
 8001b74:	6993      	ldr	r3, [r2, #24]
 8001b76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b80:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	2902      	cmp	r1, #2
 8001b84:	f000 80a3 	beq.w	8001cce <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b88:	2903      	cmp	r1, #3
 8001b8a:	f000 809a 	beq.w	8001cc2 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b8e:	2901      	cmp	r1, #1
 8001b90:	f000 80a3 	beq.w	8001cda <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b94:	0758      	lsls	r0, r3, #29
 8001b96:	d59e      	bpl.n	8001ad6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b98:	4a53      	ldr	r2, [pc, #332]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba0:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	f023 0307 	bic.w	r3, r3, #7
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8001baa:	f7fe fbf7 	bl	800039c <HAL_GetTick>
 8001bae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb0:	e005      	b.n	8001bbe <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7fe fbf3 	bl	800039c <HAL_GetTick>
 8001bb6:	1b80      	subs	r0, r0, r6
 8001bb8:	4540      	cmp	r0, r8
 8001bba:	f200 808c 	bhi.w	8001cd6 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	6862      	ldr	r2, [r4, #4]
 8001bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bc6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001bca:	d1f2      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	0799      	lsls	r1, r3, #30
 8001bd0:	d506      	bpl.n	8001be0 <HAL_RCC_ClockConfig+0x138>
 8001bd2:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bd4:	4844      	ldr	r0, [pc, #272]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001bd6:	6982      	ldr	r2, [r0, #24]
 8001bd8:	f002 020f 	and.w	r2, r2, #15
 8001bdc:	428a      	cmp	r2, r1
 8001bde:	d86a      	bhi.n	8001cb6 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4940      	ldr	r1, [pc, #256]	; (8001ce4 <HAL_RCC_ClockConfig+0x23c>)
 8001be2:	680a      	ldr	r2, [r1, #0]
 8001be4:	f002 020f 	and.w	r2, r2, #15
 8001be8:	42aa      	cmp	r2, r5
 8001bea:	d90a      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bec:	680a      	ldr	r2, [r1, #0]
 8001bee:	f022 020f 	bic.w	r2, r2, #15
 8001bf2:	432a      	orrs	r2, r5
 8001bf4:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	680a      	ldr	r2, [r1, #0]
 8001bf8:	f002 020f 	and.w	r2, r2, #15
 8001bfc:	42aa      	cmp	r2, r5
 8001bfe:	f47f af6a 	bne.w	8001ad6 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c02:	075a      	lsls	r2, r3, #29
 8001c04:	d50b      	bpl.n	8001c1e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c06:	4938      	ldr	r1, [pc, #224]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001c08:	6920      	ldr	r0, [r4, #16]
 8001c0a:	698a      	ldr	r2, [r1, #24]
 8001c0c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001c10:	4290      	cmp	r0, r2
 8001c12:	d204      	bcs.n	8001c1e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c14:	698a      	ldr	r2, [r1, #24]
 8001c16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c1a:	4302      	orrs	r2, r0
 8001c1c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1e:	071f      	lsls	r7, r3, #28
 8001c20:	d50b      	bpl.n	8001c3a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c22:	4931      	ldr	r1, [pc, #196]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001c24:	6960      	ldr	r0, [r4, #20]
 8001c26:	69ca      	ldr	r2, [r1, #28]
 8001c28:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001c2c:	4290      	cmp	r0, r2
 8001c2e:	d204      	bcs.n	8001c3a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c30:	69ca      	ldr	r2, [r1, #28]
 8001c32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c36:	4302      	orrs	r2, r0
 8001c38:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3a:	06de      	lsls	r6, r3, #27
 8001c3c:	d50b      	bpl.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c3e:	492a      	ldr	r1, [pc, #168]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001c40:	69a0      	ldr	r0, [r4, #24]
 8001c42:	69ca      	ldr	r2, [r1, #28]
 8001c44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c48:	4290      	cmp	r0, r2
 8001c4a:	d204      	bcs.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c4c:	69ca      	ldr	r2, [r1, #28]
 8001c4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c52:	4302      	orrs	r2, r0
 8001c54:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c56:	069d      	lsls	r5, r3, #26
 8001c58:	d50b      	bpl.n	8001c72 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001c5c:	69e1      	ldr	r1, [r4, #28]
 8001c5e:	6a13      	ldr	r3, [r2, #32]
 8001c60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c64:	4299      	cmp	r1, r3
 8001c66:	d204      	bcs.n	8001c72 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c68:	6a13      	ldr	r3, [r2, #32]
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c72:	f7ff fe79 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_RCC_ClockConfig+0x240>)
 8001c78:	4602      	mov	r2, r0
 8001c7a:	481c      	ldr	r0, [pc, #112]	; (8001cec <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c7e:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c80:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8001c84:	4d1a      	ldr	r5, [pc, #104]	; (8001cf0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	4c1a      	ldr	r4, [pc, #104]	; (8001cf4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c8c:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c8e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c90:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8001c94:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c96:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8001c9a:	4d17      	ldr	r5, [pc, #92]	; (8001cf8 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c9c:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8001ca2:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ca4:	6023      	str	r3, [r4, #0]
}
 8001ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001caa:	f7fe bb15 	b.w	80002d8 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	07da      	lsls	r2, r3, #31
 8001cb0:	f53f af5e 	bmi.w	8001b70 <HAL_RCC_ClockConfig+0xc8>
 8001cb4:	e794      	b.n	8001be0 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb6:	6982      	ldr	r2, [r0, #24]
 8001cb8:	f022 020f 	bic.w	r2, r2, #15
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	6181      	str	r1, [r0, #24]
 8001cc0:	e78e      	b.n	8001be0 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cc2:	019f      	lsls	r7, r3, #6
 8001cc4:	f53f af68 	bmi.w	8001b98 <HAL_RCC_ClockConfig+0xf0>
 8001cc8:	e705      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001cca:	2001      	movs	r0, #1
}
 8001ccc:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cce:	039b      	lsls	r3, r3, #14
 8001cd0:	f53f af62 	bmi.w	8001b98 <HAL_RCC_ClockConfig+0xf0>
 8001cd4:	e6ff      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	e6fe      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cda:	05de      	lsls	r6, r3, #23
 8001cdc:	f53f af5c 	bmi.w	8001b98 <HAL_RCC_ClockConfig+0xf0>
 8001ce0:	e6f9      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x2e>
 8001ce2:	bf00      	nop
 8001ce4:	52002000 	.word	0x52002000
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	08004c5c 	.word	0x08004c5c
 8001cf0:	24000004 	.word	0x24000004
 8001cf4:	24000018 	.word	0x24000018
 8001cf8:	24000014 	.word	0x24000014

08001cfc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfc:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfe:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d00:	6913      	ldr	r3, [r2, #16]
 8001d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d01a      	beq.n	8001d40 <HAL_RCC_GetHCLKFreq+0x44>
 8001d0a:	2b18      	cmp	r3, #24
 8001d0c:	d023      	beq.n	8001d56 <HAL_RCC_GetHCLKFreq+0x5a>
 8001d0e:	b1cb      	cbz	r3, 8001d44 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8001d10:	4814      	ldr	r0, [pc, #80]	; (8001d64 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_RCC_GetHCLKFreq+0x64>)
 8001d14:	4914      	ldr	r1, [pc, #80]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x6c>)
 8001d16:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d18:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001d1a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d1e:	4c13      	ldr	r4, [pc, #76]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x70>)
 8001d20:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d24:	4d12      	ldr	r5, [pc, #72]	; (8001d70 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001d26:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001d2a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d2e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001d32:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d36:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8001d3a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d3c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001d3e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x78>)
 8001d42:	e7e6      	b.n	8001d12 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	069b      	lsls	r3, r3, #26
 8001d48:	d508      	bpl.n	8001d5c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	480a      	ldr	r0, [pc, #40]	; (8001d78 <HAL_RCC_GetHCLKFreq+0x7c>)
 8001d4e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001d52:	40d0      	lsrs	r0, r2
 8001d54:	e7dd      	b.n	8001d12 <HAL_RCC_GetHCLKFreq+0x16>
 8001d56:	f7ff fa8d 	bl	8001274 <HAL_RCC_GetSysClockFreq.part.0>
 8001d5a:	e7da      	b.n	8001d12 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <HAL_RCC_GetHCLKFreq+0x7c>)
 8001d5e:	e7d8      	b.n	8001d12 <HAL_RCC_GetHCLKFreq+0x16>
 8001d60:	58024400 	.word	0x58024400
 8001d64:	003d0900 	.word	0x003d0900
 8001d68:	08004c5c 	.word	0x08004c5c
 8001d6c:	24000018 	.word	0x24000018
 8001d70:	24000014 	.word	0x24000014
 8001d74:	007a1200 	.word	0x007a1200
 8001d78:	03d09000 	.word	0x03d09000

08001d7c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001d7c:	4a3b      	ldr	r2, [pc, #236]	; (8001e6c <RCCEx_PLL2_Config+0xf0>)
{
 8001d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001d80:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d069      	beq.n	8001e5e <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	4606      	mov	r6, r0
 8001d8e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001d90:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8001d92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d96:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d98:	f7fe fb00 	bl	800039c <HAL_GetTick>
 8001d9c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001d9e:	e004      	b.n	8001daa <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001da0:	f7fe fafc 	bl	800039c <HAL_GetTick>
 8001da4:	1b43      	subs	r3, r0, r5
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d857      	bhi.n	8001e5a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	011a      	lsls	r2, r3, #4
 8001dae:	d4f7      	bmi.n	8001da0 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001db0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001db2:	6832      	ldr	r2, [r6, #0]
 8001db4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001db8:	492d      	ldr	r1, [pc, #180]	; (8001e70 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001dba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001dbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dc0:	6875      	ldr	r5, [r6, #4]
 8001dc2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001dc6:	3d01      	subs	r5, #1
 8001dc8:	1e50      	subs	r0, r2, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6932      	ldr	r2, [r6, #16]
 8001dce:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8001dd2:	025b      	lsls	r3, r3, #9
 8001dd4:	0400      	lsls	r0, r0, #16
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8001dde:	0612      	lsls	r2, r2, #24
 8001de0:	4303      	orrs	r3, r0
 8001de2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001de6:	432b      	orrs	r3, r5
 8001de8:	4313      	orrs	r3, r2
 8001dea:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001dec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dee:	6972      	ldr	r2, [r6, #20]
 8001df0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001df4:	4313      	orrs	r3, r2
 8001df6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001df8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dfa:	69b2      	ldr	r2, [r6, #24]
 8001dfc:	f023 0320 	bic.w	r3, r3, #32
 8001e00:	4313      	orrs	r3, r2
 8001e02:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001e04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e06:	f023 0310 	bic.w	r3, r3, #16
 8001e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001e0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e0e:	69f3      	ldr	r3, [r6, #28]
 8001e10:	4011      	ands	r1, r2
 8001e12:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8001e16:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e1a:	f043 0310 	orr.w	r3, r3, #16
 8001e1e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001e20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001e22:	b1f7      	cbz	r7, 8001e62 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8001e24:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001e26:	bf0c      	ite	eq
 8001e28:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001e2c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001e30:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <RCCEx_PLL2_Config+0xf0>)
 8001e34:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001e36:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8001e38:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e3c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001e3e:	f7fe faad 	bl	800039c <HAL_GetTick>
 8001e42:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001e44:	e004      	b.n	8001e50 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001e46:	f7fe faa9 	bl	800039c <HAL_GetTick>
 8001e4a:	1b00      	subs	r0, r0, r4
 8001e4c:	2802      	cmp	r0, #2
 8001e4e:	d804      	bhi.n	8001e5a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	d5f7      	bpl.n	8001e46 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8001e56:	2000      	movs	r0, #0
}
 8001e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001e5a:	2003      	movs	r0, #3
}
 8001e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
}
 8001e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001e62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e68:	e7e3      	b.n	8001e32 <RCCEx_PLL2_Config+0xb6>
 8001e6a:	bf00      	nop
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	ffff0007 	.word	0xffff0007

08001e74 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e74:	4a3b      	ldr	r2, [pc, #236]	; (8001f64 <RCCEx_PLL3_Config+0xf0>)
{
 8001e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001e78:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d069      	beq.n	8001f56 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	4606      	mov	r6, r0
 8001e86:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001e88:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8001e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e90:	f7fe fa84 	bl	800039c <HAL_GetTick>
 8001e94:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001e96:	e004      	b.n	8001ea2 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001e98:	f7fe fa80 	bl	800039c <HAL_GetTick>
 8001e9c:	1b43      	subs	r3, r0, r5
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d857      	bhi.n	8001f52 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	009a      	lsls	r2, r3, #2
 8001ea6:	d4f7      	bmi.n	8001e98 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001ea8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eaa:	6832      	ldr	r2, [r6, #0]
 8001eac:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001eb0:	492d      	ldr	r1, [pc, #180]	; (8001f68 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001eb2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001eb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eb8:	6875      	ldr	r5, [r6, #4]
 8001eba:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8001ebe:	3d01      	subs	r5, #1
 8001ec0:	1e50      	subs	r0, r2, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6932      	ldr	r2, [r6, #16]
 8001ec6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	0400      	lsls	r0, r0, #16
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8001ed6:	0612      	lsls	r2, r2, #24
 8001ed8:	4303      	orrs	r3, r0
 8001eda:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001ede:	432b      	orrs	r3, r5
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ee6:	6972      	ldr	r2, [r6, #20]
 8001ee8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001eec:	4313      	orrs	r3, r2
 8001eee:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001ef0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ef2:	69b2      	ldr	r2, [r6, #24]
 8001ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f02:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001f04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f06:	69f3      	ldr	r3, [r6, #28]
 8001f08:	4011      	ands	r1, r2
 8001f0a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8001f0e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001f10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001f1a:	b1f7      	cbz	r7, 8001f5a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8001f1c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001f1e:	bf0c      	ite	eq
 8001f20:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001f24:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001f28:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <RCCEx_PLL3_Config+0xf0>)
 8001f2c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001f2e:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8001f30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f34:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f36:	f7fe fa31 	bl	800039c <HAL_GetTick>
 8001f3a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001f3c:	e004      	b.n	8001f48 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001f3e:	f7fe fa2d 	bl	800039c <HAL_GetTick>
 8001f42:	1b00      	subs	r0, r0, r4
 8001f44:	2802      	cmp	r0, #2
 8001f46:	d804      	bhi.n	8001f52 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	d5f7      	bpl.n	8001f3e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8001f4e:	2000      	movs	r0, #0
}
 8001f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001f52:	2003      	movs	r0, #3
}
 8001f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001f56:	2001      	movs	r0, #1
}
 8001f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001f5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f60:	e7e3      	b.n	8001f2a <RCCEx_PLL3_Config+0xb6>
 8001f62:	bf00      	nop
 8001f64:	58024400 	.word	0x58024400
 8001f68:	ffff0007 	.word	0xffff0007

08001f6c <HAL_RCCEx_PeriphCLKConfig>:
{
 8001f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f70:	6803      	ldr	r3, [r0, #0]
{
 8001f72:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f74:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8001f78:	d01c      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001f7a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001f7c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001f80:	f000 84ba 	beq.w	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8001f84:	d823      	bhi.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	f000 83dc 	beq.w	8002744 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8001f8c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001f90:	d120      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001f92:	2102      	movs	r1, #2
 8001f94:	3004      	adds	r0, #4
 8001f96:	f7ff fef1 	bl	8001d7c <RCCEx_PLL2_Config>
 8001f9a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001f9c:	2e00      	cmp	r6, #0
 8001f9e:	f040 849f 	bne.w	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8001fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fa4:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001fa6:	48ab      	ldr	r0, [pc, #684]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fa8:	2600      	movs	r6, #0
 8001faa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001fac:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fb4:	05dd      	lsls	r5, r3, #23
 8001fb6:	d511      	bpl.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001fb8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001fba:	2a04      	cmp	r2, #4
 8001fbc:	f200 851c 	bhi.w	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8001fc0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001fc4:	0476046f 	.word	0x0476046f
 8001fc8:	02d40486 	.word	0x02d40486
 8001fcc:	02d4      	.short	0x02d4
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001fce:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001fd2:	d0e8      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fd4:	05dd      	lsls	r5, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001fd6:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fda:	d4ed      	bmi.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001fdc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001fde:	0598      	lsls	r0, r3, #22
 8001fe0:	d51b      	bpl.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001fe2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001fe4:	2a80      	cmp	r2, #128	; 0x80
 8001fe6:	f000 8453 	beq.w	8002890 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8001fea:	f200 80ec 	bhi.w	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	f000 83a2 	beq.w	8002738 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8001ff4:	2a40      	cmp	r2, #64	; 0x40
 8001ff6:	f040 80ed 	bne.w	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	1d20      	adds	r0, r4, #4
 8001ffe:	f7ff febd 	bl	8001d7c <RCCEx_PLL2_Config>
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002006:	2d00      	cmp	r5, #0
 8002008:	f040 8386 	bne.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800200c:	4991      	ldr	r1, [pc, #580]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800200e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002010:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002012:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8002016:	4302      	orrs	r2, r0
 8002018:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800201a:	0559      	lsls	r1, r3, #21
 800201c:	d51f      	bpl.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 800201e:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8002022:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002026:	f000 844a 	beq.w	80028be <HAL_RCCEx_PeriphCLKConfig+0x952>
 800202a:	f200 80d6 	bhi.w	80021da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800202e:	2a00      	cmp	r2, #0
 8002030:	f000 837c 	beq.w	800272c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002034:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002038:	f040 80d7 	bne.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800203c:	2100      	movs	r1, #0
 800203e:	1d20      	adds	r0, r4, #4
 8002040:	f7ff fe9c 	bl	8001d7c <RCCEx_PLL2_Config>
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002048:	2d00      	cmp	r5, #0
 800204a:	f040 8367 	bne.w	800271c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800204e:	4981      	ldr	r1, [pc, #516]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002050:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8002054:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002056:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800205a:	4302      	orrs	r2, r0
 800205c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800205e:	051a      	lsls	r2, r3, #20
 8002060:	d51f      	bpl.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002062:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8002066:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800206a:	f000 843c 	beq.w	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800206e:	f200 80bf 	bhi.w	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002072:	2a00      	cmp	r2, #0
 8002074:	f000 836c 	beq.w	8002750 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002078:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800207c:	f040 80c0 	bne.w	8002200 <HAL_RCCEx_PeriphCLKConfig+0x294>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002080:	2100      	movs	r1, #0
 8002082:	1d20      	adds	r0, r4, #4
 8002084:	f7ff fe7a 	bl	8001d7c <RCCEx_PLL2_Config>
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800208c:	2d00      	cmp	r5, #0
 800208e:	f040 833f 	bne.w	8002710 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002092:	4970      	ldr	r1, [pc, #448]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002094:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8002098:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800209a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800209e:	4302      	orrs	r2, r0
 80020a0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80020a2:	019f      	lsls	r7, r3, #6
 80020a4:	d518      	bpl.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 80020a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80020a8:	2a20      	cmp	r2, #32
 80020aa:	f000 8392 	beq.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x866>
 80020ae:	f200 80aa 	bhi.w	8002206 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80020b2:	b13a      	cbz	r2, 80020c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80020b4:	2a10      	cmp	r2, #16
 80020b6:	f040 80a9 	bne.w	800220c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020ba:	4966      	ldr	r1, [pc, #408]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020bc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80020be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020c2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80020c4:	2d00      	cmp	r5, #0
 80020c6:	f040 8366 	bne.w	8002796 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020ca:	4962      	ldr	r1, [pc, #392]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020cc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80020ce:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80020d0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80020d4:	4302      	orrs	r2, r0
 80020d6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80020d8:	04d8      	lsls	r0, r3, #19
 80020da:	d51d      	bpl.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 80020dc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020de:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80020e2:	f000 83cd 	beq.w	8002880 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80020e6:	f200 8094 	bhi.w	8002212 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	f000 8318 	beq.w	8002720 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80020f0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80020f4:	f040 8095 	bne.w	8002222 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020f8:	2100      	movs	r1, #0
 80020fa:	1d20      	adds	r0, r4, #4
 80020fc:	f7ff fe3e 	bl	8001d7c <RCCEx_PLL2_Config>
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002104:	2d00      	cmp	r5, #0
 8002106:	f040 8305 	bne.w	8002714 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800210a:	4952      	ldr	r1, [pc, #328]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800210c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800210e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002110:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002114:	4302      	orrs	r2, r0
 8002116:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002118:	0499      	lsls	r1, r3, #18
 800211a:	d51a      	bpl.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi45ClockSelection)
 800211c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800211e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002122:	f000 8398 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8002126:	d87f      	bhi.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002128:	b14a      	cbz	r2, 800213e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800212a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800212e:	f040 8083 	bne.w	8002238 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002132:	2101      	movs	r1, #1
 8002134:	1d20      	adds	r0, r4, #4
 8002136:	f7ff fe21 	bl	8001d7c <RCCEx_PLL2_Config>
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800213e:	2d00      	cmp	r5, #0
 8002140:	f040 832b 	bne.w	800279a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002144:	4943      	ldr	r1, [pc, #268]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002146:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002148:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800214a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800214e:	4302      	orrs	r2, r0
 8002150:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002152:	045a      	lsls	r2, r3, #17
 8002154:	d51b      	bpl.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002156:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800215a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800215e:	f000 834a 	beq.w	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8002162:	d86c      	bhi.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002164:	b142      	cbz	r2, 8002178 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8002166:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800216a:	d170      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800216c:	2101      	movs	r1, #1
 800216e:	1d20      	adds	r0, r4, #4
 8002170:	f7ff fe04 	bl	8001d7c <RCCEx_PLL2_Config>
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002178:	2d00      	cmp	r5, #0
 800217a:	f040 8302 	bne.w	8002782 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800217e:	4935      	ldr	r1, [pc, #212]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002180:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8002184:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002186:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800218a:	4302      	orrs	r2, r0
 800218c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800218e:	041f      	lsls	r7, r3, #16
 8002190:	d50d      	bpl.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->FdcanClockSelection)
 8002192:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002194:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002198:	f000 834b 	beq.w	8002832 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800219c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80021a0:	f000 81f0 	beq.w	8002584 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	f000 81f3 	beq.w	8002590 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80021aa:	2601      	movs	r6, #1
 80021ac:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80021ae:	01d8      	lsls	r0, r3, #7
 80021b0:	d55c      	bpl.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 80021b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80021b4:	2a03      	cmp	r2, #3
 80021b6:	f200 8425 	bhi.w	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa98>
 80021ba:	e8df f012 	tbh	[pc, r2, lsl #1]
 80021be:	0053      	.short	0x0053
 80021c0:	004d0313 	.word	0x004d0313
 80021c4:	0053      	.short	0x0053
    switch(PeriphClkInit->Sai23ClockSelection)
 80021c6:	2ac0      	cmp	r2, #192	; 0xc0
 80021c8:	f43f af1d 	beq.w	8002006 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80021cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80021d0:	f43f af19 	beq.w	8002006 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80021d4:	2601      	movs	r6, #1
 80021d6:	4635      	mov	r5, r6
 80021d8:	e71f      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 80021da:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80021de:	f43f af33 	beq.w	8002048 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80021e2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80021e6:	f43f af2f 	beq.w	8002048 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80021ea:	2601      	movs	r6, #1
 80021ec:	4635      	mov	r5, r6
 80021ee:	e736      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 80021f0:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80021f4:	f43f af4a 	beq.w	800208c <HAL_RCCEx_PeriphCLKConfig+0x120>
 80021f8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80021fc:	f43f af46 	beq.w	800208c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002200:	2601      	movs	r6, #1
 8002202:	4635      	mov	r5, r6
 8002204:	e74d      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8002206:	2a30      	cmp	r2, #48	; 0x30
 8002208:	f43f af5c 	beq.w	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800220c:	2601      	movs	r6, #1
 800220e:	4635      	mov	r5, r6
 8002210:	e762      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002212:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002216:	f43f af75 	beq.w	8002104 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800221a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800221e:	f43f af71 	beq.w	8002104 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002222:	2601      	movs	r6, #1
 8002224:	4635      	mov	r5, r6
 8002226:	e777      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002228:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800222c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002230:	d085      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002232:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002236:	d082      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8002238:	2601      	movs	r6, #1
 800223a:	4635      	mov	r5, r6
 800223c:	e789      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800223e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8002242:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8002246:	d097      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8002248:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800224c:	d094      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800224e:	2601      	movs	r6, #1
 8002250:	4635      	mov	r5, r6
 8002252:	e79c      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002254:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002258:	2102      	movs	r1, #2
 800225a:	1d20      	adds	r0, r4, #4
 800225c:	f7ff fd8e 	bl	8001d7c <RCCEx_PLL2_Config>
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002264:	2d00      	cmp	r5, #0
 8002266:	f000 828e 	beq.w	8002786 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800226a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800226c:	0259      	lsls	r1, r3, #9
 800226e:	f100 8208 	bmi.w	8002682 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002272:	07df      	lsls	r7, r3, #31
 8002274:	d539      	bpl.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002276:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002278:	2a28      	cmp	r2, #40	; 0x28
 800227a:	f200 8174 	bhi.w	8002566 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800227e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002282:	0030      	.short	0x0030
 8002284:	01720172 	.word	0x01720172
 8002288:	01720172 	.word	0x01720172
 800228c:	01720172 	.word	0x01720172
 8002290:	03580172 	.word	0x03580172
 8002294:	01720172 	.word	0x01720172
 8002298:	01720172 	.word	0x01720172
 800229c:	01720172 	.word	0x01720172
 80022a0:	00290172 	.word	0x00290172
 80022a4:	01720172 	.word	0x01720172
 80022a8:	01720172 	.word	0x01720172
 80022ac:	01720172 	.word	0x01720172
 80022b0:	00300172 	.word	0x00300172
 80022b4:	01720172 	.word	0x01720172
 80022b8:	01720172 	.word	0x01720172
 80022bc:	01720172 	.word	0x01720172
 80022c0:	00300172 	.word	0x00300172
 80022c4:	01720172 	.word	0x01720172
 80022c8:	01720172 	.word	0x01720172
 80022cc:	01720172 	.word	0x01720172
 80022d0:	00300172 	.word	0x00300172
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022d4:	2101      	movs	r1, #1
 80022d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022da:	f7ff fdcb 	bl	8001e74 <RCCEx_PLL3_Config>
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	f000 826b 	beq.w	80027be <HAL_RCCEx_PeriphCLKConfig+0x852>
 80022e8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80022ea:	0798      	lsls	r0, r3, #30
 80022ec:	d516      	bpl.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80022ee:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80022f0:	2a05      	cmp	r2, #5
 80022f2:	f200 8384 	bhi.w	80029fe <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80022f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80022fa:	000d      	.short	0x000d
 80022fc:	00060308 	.word	0x00060308
 8002300:	000d000d 	.word	0x000d000d
 8002304:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002306:	2101      	movs	r1, #1
 8002308:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800230c:	f7ff fdb2 	bl	8001e74 <RCCEx_PLL3_Config>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002314:	2d00      	cmp	r5, #0
 8002316:	f000 822c 	beq.w	8002772 <HAL_RCCEx_PeriphCLKConfig+0x806>
 800231a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800231c:	0759      	lsls	r1, r3, #29
 800231e:	d517      	bpl.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002320:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002324:	2a05      	cmp	r2, #5
 8002326:	f200 8370 	bhi.w	8002a0a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 800232a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800232e:	000d      	.short	0x000d
 8002330:	000602f8 	.word	0x000602f8
 8002334:	000d000d 	.word	0x000d000d
 8002338:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800233a:	2101      	movs	r1, #1
 800233c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002340:	f7ff fd98 	bl	8001e74 <RCCEx_PLL3_Config>
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002348:	2d00      	cmp	r5, #0
 800234a:	f000 8209 	beq.w	8002760 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 800234e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002350:	069a      	lsls	r2, r3, #26
 8002352:	d51d      	bpl.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002354:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002358:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800235c:	f000 8271 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8002360:	f200 8121 	bhi.w	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 8002364:	b14a      	cbz	r2, 800237a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002366:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800236a:	f040 8126 	bne.w	80025ba <HAL_RCCEx_PeriphCLKConfig+0x64e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800236e:	2100      	movs	r1, #0
 8002370:	1d20      	adds	r0, r4, #4
 8002372:	f7ff fd03 	bl	8001d7c <RCCEx_PLL2_Config>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800237a:	2d00      	cmp	r5, #0
 800237c:	f040 8213 	bne.w	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002380:	49b9      	ldr	r1, [pc, #740]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002382:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002386:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002388:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800238c:	4302      	orrs	r2, r0
 800238e:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002390:	065f      	lsls	r7, r3, #25
 8002392:	d51d      	bpl.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002394:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8002398:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800239c:	f000 823f 	beq.w	800281e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80023a0:	f200 8129 	bhi.w	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 80023a4:	b14a      	cbz	r2, 80023ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80023a6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80023aa:	f040 812e 	bne.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023ae:	2100      	movs	r1, #0
 80023b0:	1d20      	adds	r0, r4, #4
 80023b2:	f7ff fce3 	bl	8001d7c <RCCEx_PLL2_Config>
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023ba:	2d00      	cmp	r5, #0
 80023bc:	f040 81ef 	bne.w	800279e <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023c0:	49a9      	ldr	r1, [pc, #676]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80023c2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80023c6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80023c8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80023cc:	4302      	orrs	r2, r0
 80023ce:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80023d0:	0618      	lsls	r0, r3, #24
 80023d2:	d51d      	bpl.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80023d4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80023d8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80023dc:	f000 8215 	beq.w	800280a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80023e0:	f200 80fc 	bhi.w	80025dc <HAL_RCCEx_PeriphCLKConfig+0x670>
 80023e4:	b14a      	cbz	r2, 80023fa <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80023e6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80023ea:	f040 8101 	bne.w	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023ee:	2100      	movs	r1, #0
 80023f0:	1d20      	adds	r0, r4, #4
 80023f2:	f7ff fcc3 	bl	8001d7c <RCCEx_PLL2_Config>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	f040 81d1 	bne.w	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x836>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002400:	4999      	ldr	r1, [pc, #612]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002402:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8002406:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002408:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800240c:	4302      	orrs	r2, r0
 800240e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002410:	0719      	lsls	r1, r3, #28
 8002412:	d50b      	bpl.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002414:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002418:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800241c:	f000 8225 	beq.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002420:	4891      	ldr	r0, [pc, #580]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002422:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002424:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002428:	430a      	orrs	r2, r1
 800242a:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800242c:	06da      	lsls	r2, r3, #27
 800242e:	d50b      	bpl.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002430:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002434:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002438:	f000 82b2 	beq.w	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800243c:	488a      	ldr	r0, [pc, #552]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800243e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002440:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002444:	430a      	orrs	r2, r1
 8002446:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002448:	031f      	lsls	r7, r3, #12
 800244a:	d50e      	bpl.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    switch(PeriphClkInit->AdcClockSelection)
 800244c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002450:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002454:	f000 80f2 	beq.w	800263c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8002458:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800245c:	f000 80f5 	beq.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8002460:	2900      	cmp	r1, #0
 8002462:	f000 828b 	beq.w	800297c <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8002466:	2601      	movs	r6, #1
 8002468:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800246a:	0358      	lsls	r0, r3, #13
 800246c:	d50f      	bpl.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->UsbClockSelection)
 800246e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002472:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002476:	f000 80cb 	beq.w	8002610 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 800247a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800247e:	f000 80ce 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8002482:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002486:	f000 8282 	beq.w	800298e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800248a:	2601      	movs	r6, #1
 800248c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800248e:	03d9      	lsls	r1, r3, #15
 8002490:	d517      	bpl.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002492:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002494:	2a00      	cmp	r2, #0
 8002496:	f000 825f 	beq.w	8002958 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800249a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800249e:	f040 8132 	bne.w	8002706 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80024a2:	2102      	movs	r1, #2
 80024a4:	1d20      	adds	r0, r4, #4
 80024a6:	f7ff fc69 	bl	8001d7c <RCCEx_PLL2_Config>
 80024aa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	2d00      	cmp	r5, #0
 80024b0:	f040 818d 	bne.w	80027ce <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80024b4:	496c      	ldr	r1, [pc, #432]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80024b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80024b8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80024ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024be:	4302      	orrs	r2, r0
 80024c0:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024c2:	009a      	lsls	r2, r3, #2
 80024c4:	f100 80d2 	bmi.w	800266c <HAL_RCCEx_PeriphCLKConfig+0x700>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80024c8:	039f      	lsls	r7, r3, #14
 80024ca:	d43f      	bmi.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 80024cc:	1e30      	subs	r0, r6, #0
 80024ce:	bf18      	it	ne
 80024d0:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024d2:	02de      	lsls	r6, r3, #11
 80024d4:	d506      	bpl.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024d6:	4964      	ldr	r1, [pc, #400]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80024d8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80024da:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80024dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e0:	432a      	orrs	r2, r5
 80024e2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80024e4:	00dd      	lsls	r5, r3, #3
 80024e6:	d507      	bpl.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80024e8:	495f      	ldr	r1, [pc, #380]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80024ea:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80024ee:	690a      	ldr	r2, [r1, #16]
 80024f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024f4:	432a      	orrs	r2, r5
 80024f6:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024f8:	0299      	lsls	r1, r3, #10
 80024fa:	d506      	bpl.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024fc:	495a      	ldr	r1, [pc, #360]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80024fe:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8002500:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002502:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002506:	432a      	orrs	r2, r5
 8002508:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800250a:	005a      	lsls	r2, r3, #1
 800250c:	d509      	bpl.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800250e:	4a56      	ldr	r2, [pc, #344]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002510:	6911      	ldr	r1, [r2, #16]
 8002512:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002516:	6111      	str	r1, [r2, #16]
 8002518:	6911      	ldr	r1, [r2, #16]
 800251a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800251e:	4329      	orrs	r1, r5
 8002520:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002522:	2b00      	cmp	r3, #0
 8002524:	da06      	bge.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002526:	4950      	ldr	r1, [pc, #320]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002528:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800252a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800252c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002530:	432a      	orrs	r2, r5
 8002532:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	d507      	bpl.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002538:	4a4b      	ldr	r2, [pc, #300]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800253a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800253e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002540:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002544:	430b      	orrs	r3, r1
 8002546:	6553      	str	r3, [r2, #84]	; 0x54
}
 8002548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 800254c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800254e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002552:	f000 820a 	beq.w	800296a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8002556:	d933      	bls.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8002558:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800255c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002560:	d030      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8002562:	2001      	movs	r0, #1
 8002564:	e7b5      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002566:	2601      	movs	r6, #1
 8002568:	4635      	mov	r5, r6
 800256a:	e6be      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800256c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800256e:	2d00      	cmp	r5, #0
 8002570:	f040 80cc 	bne.w	800270c <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002574:	493c      	ldr	r1, [pc, #240]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002578:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800257a:	f022 0207 	bic.w	r2, r2, #7
 800257e:	4302      	orrs	r2, r0
 8002580:	650a      	str	r2, [r1, #80]	; 0x50
 8002582:	e52c      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002584:	2101      	movs	r1, #1
 8002586:	1d20      	adds	r0, r4, #4
 8002588:	f7ff fbf8 	bl	8001d7c <RCCEx_PLL2_Config>
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002590:	2d00      	cmp	r5, #0
 8002592:	f040 80e3 	bne.w	800275c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002596:	4934      	ldr	r1, [pc, #208]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002598:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800259a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800259c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a0:	4302      	orrs	r2, r0
 80025a2:	650a      	str	r2, [r1, #80]	; 0x50
 80025a4:	e603      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80025a6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80025aa:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80025ae:	f43f aee4 	beq.w	800237a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80025b2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80025b6:	f43f aee0 	beq.w	800237a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80025ba:	2601      	movs	r6, #1
 80025bc:	4635      	mov	r5, r6
 80025be:	e6e7      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->RngClockSelection)
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	d1ce      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if(ret == HAL_OK)
 80025c4:	2d00      	cmp	r5, #0
 80025c6:	d1cc      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025c8:	4d27      	ldr	r5, [pc, #156]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80025ca:	1e30      	subs	r0, r6, #0
 80025cc:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80025ce:	bf18      	it	ne
 80025d0:	2001      	movne	r0, #1
 80025d2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80025d6:	430a      	orrs	r2, r1
 80025d8:	656a      	str	r2, [r5, #84]	; 0x54
 80025da:	e77a      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80025dc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80025e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80025e4:	f43f af09 	beq.w	80023fa <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80025e8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80025ec:	f43f af05 	beq.w	80023fa <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80025f0:	2601      	movs	r6, #1
 80025f2:	4635      	mov	r5, r6
 80025f4:	e70c      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80025f6:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80025fa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80025fe:	f43f aedc 	beq.w	80023ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002602:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002606:	f43f aed8 	beq.w	80023ba <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800260a:	2601      	movs	r6, #1
 800260c:	4635      	mov	r5, r6
 800260e:	e6df      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002610:	2101      	movs	r1, #1
 8002612:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002616:	f7ff fc2d 	bl	8001e74 <RCCEx_PLL3_Config>
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800261e:	2d00      	cmp	r5, #0
 8002620:	f040 80c8 	bne.w	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002624:	4910      	ldr	r1, [pc, #64]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002626:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800262a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800262c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002630:	4302      	orrs	r2, r0
 8002632:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002634:	03d9      	lsls	r1, r3, #15
 8002636:	f57f af44 	bpl.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800263a:	e72a      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x526>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800263c:	2102      	movs	r1, #2
 800263e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002642:	f7ff fc17 	bl	8001e74 <RCCEx_PLL3_Config>
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800264a:	2d00      	cmp	r5, #0
 800264c:	f040 80ad 	bne.w	80027aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002650:	4905      	ldr	r1, [pc, #20]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8002652:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8002656:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002658:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800265c:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800265e:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002660:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002662:	f57f af14 	bpl.w	800248e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002666:	e702      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002668:	58024400 	.word	0x58024400
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800266c:	2102      	movs	r1, #2
 800266e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002672:	f7ff fbff 	bl	8001e74 <RCCEx_PLL3_Config>
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	2800      	cmp	r0, #0
 800267a:	f43f af25 	beq.w	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
      status=HAL_ERROR;
 800267e:	2601      	movs	r6, #1
 8002680:	e722      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002682:	4bb3      	ldr	r3, [pc, #716]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8002684:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002686:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800268e:	f7fd fe85 	bl	800039c <HAL_GetTick>
 8002692:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002694:	e005      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x736>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7fd fe81 	bl	800039c <HAL_GetTick>
 800269a:	1bc0      	subs	r0, r0, r7
 800269c:	2864      	cmp	r0, #100	; 0x64
 800269e:	f200 8152 	bhi.w	8002946 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026a2:	f8d8 3000 	ldr.w	r3, [r8]
 80026a6:	05da      	lsls	r2, r3, #23
 80026a8:	d5f5      	bpl.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    if(ret == HAL_OK)
 80026aa:	2d00      	cmp	r5, #0
 80026ac:	f040 81a1 	bne.w	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80026b0:	4aa8      	ldr	r2, [pc, #672]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80026b2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80026b6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80026b8:	4059      	eors	r1, r3
 80026ba:	f411 7f40 	tst.w	r1, #768	; 0x300
 80026be:	d00b      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x76c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026c0:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c2:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026c4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80026cc:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ce:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80026d0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80026d4:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80026d6:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80026d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026dc:	f000 816b 	beq.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80026e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80026e8:	f000 8179 	beq.w	80029de <HAL_RCCEx_PeriphCLKConfig+0xa72>
 80026ec:	4999      	ldr	r1, [pc, #612]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80026ee:	690a      	ldr	r2, [r1, #16]
 80026f0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80026f4:	610a      	str	r2, [r1, #16]
 80026f6:	4a97      	ldr	r2, [pc, #604]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80026fe:	430b      	orrs	r3, r1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	e5b5      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002706:	2601      	movs	r6, #1
 8002708:	4635      	mov	r5, r6
 800270a:	e6da      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800270c:	462e      	mov	r6, r5
 800270e:	e466      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002710:	462e      	mov	r6, r5
 8002712:	e4c6      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002714:	462e      	mov	r6, r5
 8002716:	e4ff      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8002718:	462e      	mov	r6, r5
 800271a:	e47e      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xae>
 800271c:	462e      	mov	r6, r5
 800271e:	e49e      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002720:	498c      	ldr	r1, [pc, #560]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002722:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002724:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002728:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800272a:	e4eb      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800272c:	4989      	ldr	r1, [pc, #548]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800272e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002730:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002734:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8002736:	e487      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002738:	4986      	ldr	r1, [pc, #536]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800273a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800273c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002740:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8002742:	e460      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002744:	4883      	ldr	r0, [pc, #524]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002746:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002748:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800274c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800274e:	e42a      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002750:	4980      	ldr	r1, [pc, #512]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002752:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002754:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002758:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800275a:	e497      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800275c:	462e      	mov	r6, r5
 800275e:	e526      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002760:	497c      	ldr	r1, [pc, #496]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002762:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002766:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002768:	f022 0207 	bic.w	r2, r2, #7
 800276c:	4302      	orrs	r2, r0
 800276e:	658a      	str	r2, [r1, #88]	; 0x58
 8002770:	e5ee      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002772:	4978      	ldr	r1, [pc, #480]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002774:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002776:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002778:	f022 0207 	bic.w	r2, r2, #7
 800277c:	4302      	orrs	r2, r0
 800277e:	654a      	str	r2, [r1, #84]	; 0x54
 8002780:	e5cc      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8002782:	462e      	mov	r6, r5
 8002784:	e503      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002786:	4973      	ldr	r1, [pc, #460]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002788:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800278a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800278c:	f022 0203 	bic.w	r2, r2, #3
 8002790:	4302      	orrs	r2, r0
 8002792:	64ca      	str	r2, [r1, #76]	; 0x4c
 8002794:	e56a      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002796:	462e      	mov	r6, r5
 8002798:	e49e      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800279a:	462e      	mov	r6, r5
 800279c:	e4d9      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800279e:	462e      	mov	r6, r5
 80027a0:	e616      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80027a2:	462e      	mov	r6, r5
 80027a4:	e634      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80027a6:	462e      	mov	r6, r5
 80027a8:	e5f2      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027aa:	0358      	lsls	r0, r3, #13
 80027ac:	462e      	mov	r6, r5
 80027ae:	f57f ae6e 	bpl.w	800248e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80027b2:	e65c      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x502>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80027b4:	03d9      	lsls	r1, r3, #15
 80027b6:	462e      	mov	r6, r5
 80027b8:	f57f ae83 	bpl.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 80027bc:	e669      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80027be:	4965      	ldr	r1, [pc, #404]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80027c0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80027c2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80027c4:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80027c8:	4302      	orrs	r2, r0
 80027ca:	654a      	str	r2, [r1, #84]	; 0x54
 80027cc:	e58d      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80027ce:	462e      	mov	r6, r5
 80027d0:	e677      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x556>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027d2:	2102      	movs	r1, #2
 80027d4:	1d20      	adds	r0, r4, #4
 80027d6:	f7ff fad1 	bl	8001d7c <RCCEx_PLL2_Config>
 80027da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	2d00      	cmp	r5, #0
 80027e0:	d1d9      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 80027e2:	e472      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e4:	495b      	ldr	r1, [pc, #364]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80027e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80027e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027ec:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	f47f ad3b 	bne.w	800226a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80027f4:	e7c7      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027f6:	2101      	movs	r1, #1
 80027f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027fc:	f7ff fb3a 	bl	8001e74 <RCCEx_PLL3_Config>
 8002800:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	2d00      	cmp	r5, #0
 8002806:	d1bc      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002808:	e4b9      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800280a:	2102      	movs	r1, #2
 800280c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002810:	f7ff fb30 	bl	8001e74 <RCCEx_PLL3_Config>
 8002814:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	2d00      	cmp	r5, #0
 800281a:	d1c2      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 800281c:	e5f0      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x494>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800281e:	2102      	movs	r1, #2
 8002820:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002824:	f7ff fb26 	bl	8001e74 <RCCEx_PLL3_Config>
 8002828:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	2d00      	cmp	r5, #0
 800282e:	d1b6      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x832>
 8002830:	e5c6      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002832:	4948      	ldr	r1, [pc, #288]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8002834:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002836:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800283a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800283c:	2d00      	cmp	r5, #0
 800283e:	d18d      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8002840:	e6a9      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x62a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002842:	2102      	movs	r1, #2
 8002844:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002848:	f7ff fb14 	bl	8001e74 <RCCEx_PLL3_Config>
 800284c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	2d00      	cmp	r5, #0
 8002852:	d1a8      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8002854:	e594      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x414>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002856:	2101      	movs	r1, #1
 8002858:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800285c:	f7ff fb0a 	bl	8001e74 <RCCEx_PLL3_Config>
 8002860:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	2d00      	cmp	r5, #0
 8002866:	d198      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8002868:	e46c      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800286a:	2102      	movs	r1, #2
 800286c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002870:	f7ff fb00 	bl	8001e74 <RCCEx_PLL3_Config>
 8002874:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002878:	b100      	cbz	r0, 800287c <HAL_RCCEx_PeriphCLKConfig+0x910>
          status = HAL_ERROR;
 800287a:	2601      	movs	r6, #1
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	e5cf      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002880:	2100      	movs	r1, #0
 8002882:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002886:	f7ff faf5 	bl	8001e74 <RCCEx_PLL3_Config>
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	4605      	mov	r5, r0
      break;
 800288e:	e439      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002890:	2100      	movs	r1, #0
 8002892:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002896:	f7ff faed 	bl	8001e74 <RCCEx_PLL3_Config>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	4605      	mov	r5, r0
      break;
 800289e:	f7ff bbb2 	b.w	8002006 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a2:	492c      	ldr	r1, [pc, #176]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 80028a4:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80028a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028ac:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80028ae:	e65e      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028b0:	2100      	movs	r1, #0
 80028b2:	1d20      	adds	r0, r4, #4
 80028b4:	f7ff fa62 	bl	8001d7c <RCCEx_PLL2_Config>
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	4605      	mov	r5, r0
      break;
 80028bc:	e657      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028be:	2100      	movs	r1, #0
 80028c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028c4:	f7ff fad6 	bl	8001e74 <RCCEx_PLL3_Config>
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	4605      	mov	r5, r0
      break;
 80028cc:	f7ff bbbc 	b.w	8002048 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028d0:	2100      	movs	r1, #0
 80028d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028d6:	f7ff facd 	bl	8001e74 <RCCEx_PLL3_Config>
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	4605      	mov	r5, r0
      break;
 80028de:	e646      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x602>
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	f7ff bb67 	b.w	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028e6:	2100      	movs	r1, #0
 80028e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028ec:	f7ff fac2 	bl	8001e74 <RCCEx_PLL3_Config>
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	4605      	mov	r5, r0
      break;
 80028f4:	f7ff bbca 	b.w	800208c <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028f8:	2102      	movs	r1, #2
 80028fa:	3024      	adds	r0, #36	; 0x24
 80028fc:	f7ff faba 	bl	8001e74 <RCCEx_PLL3_Config>
 8002900:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002902:	2e00      	cmp	r6, #0
 8002904:	f43f ab4d 	beq.w	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8002908:	e7ea      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800290a:	2101      	movs	r1, #1
 800290c:	1d20      	adds	r0, r4, #4
 800290e:	f7ff fa35 	bl	8001d7c <RCCEx_PLL2_Config>
 8002912:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	2d00      	cmp	r5, #0
 8002918:	f47f acff 	bne.w	800231a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800291c:	e729      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800291e:	2101      	movs	r1, #1
 8002920:	1d20      	adds	r0, r4, #4
 8002922:	f7ff fa2b 	bl	8001d7c <RCCEx_PLL2_Config>
 8002926:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	2d00      	cmp	r5, #0
 800292c:	f47f ad0f 	bne.w	800234e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002930:	e716      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002932:	2101      	movs	r1, #1
 8002934:	1d20      	adds	r0, r4, #4
 8002936:	f7ff fa21 	bl	8001d7c <RCCEx_PLL2_Config>
 800293a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	2d00      	cmp	r5, #0
 8002940:	f47f acd2 	bne.w	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8002944:	e73b      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x852>
            ret = HAL_TIMEOUT;
 8002946:	2603      	movs	r6, #3
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	4635      	mov	r5, r6
 800294c:	e491      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800294e:	bf00      	nop
 8002950:	58024800 	.word	0x58024800
 8002954:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002958:	492d      	ldr	r1, [pc, #180]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800295a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800295c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002960:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8002962:	2d00      	cmp	r5, #0
 8002964:	f47f af33 	bne.w	80027ce <HAL_RCCEx_PeriphCLKConfig+0x862>
 8002968:	e5a4      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x548>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296a:	4829      	ldr	r0, [pc, #164]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800296c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800296e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002972:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8002974:	2d00      	cmp	r5, #0
 8002976:	f47f adf4 	bne.w	8002562 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800297a:	e625      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800297c:	1d20      	adds	r0, r4, #4
 800297e:	f7ff f9fd 	bl	8001d7c <RCCEx_PLL2_Config>
 8002982:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	2d00      	cmp	r5, #0
 8002988:	f47f af0f 	bne.w	80027aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800298c:	e660      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298e:	4920      	ldr	r1, [pc, #128]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002990:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002992:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002996:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8002998:	2d00      	cmp	r5, #0
 800299a:	f47f af0b 	bne.w	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800299e:	e641      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80029a0:	2102      	movs	r1, #2
 80029a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029a6:	f7ff fa65 	bl	8001e74 <RCCEx_PLL3_Config>
 80029aa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80029ae:	b100      	cbz	r0, 80029b2 <HAL_RCCEx_PeriphCLKConfig+0xa46>
        status = HAL_ERROR;
 80029b0:	2601      	movs	r6, #1
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	e542      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        tickstart = HAL_GetTick();
 80029b6:	f7fd fcf1 	bl	800039c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ba:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002a10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80029c2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c4:	e004      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fd fce9 	bl	800039c <HAL_GetTick>
 80029ca:	1bc0      	subs	r0, r0, r7
 80029cc:	4548      	cmp	r0, r9
 80029ce:	d8ba      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x9da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80029d4:	079b      	lsls	r3, r3, #30
 80029d6:	d5f6      	bpl.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 80029d8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80029dc:	e680      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x774>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	480c      	ldr	r0, [pc, #48]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 80029e2:	6901      	ldr	r1, [r0, #16]
 80029e4:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80029e8:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80029ec:	430a      	orrs	r2, r1
 80029ee:	6102      	str	r2, [r0, #16]
 80029f0:	e681      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80029f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80029f4:	462e      	mov	r6, r5
 80029f6:	e43c      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Sai1ClockSelection)
 80029f8:	2601      	movs	r6, #1
 80029fa:	f7ff baef 	b.w	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80029fe:	2601      	movs	r6, #1
 8002a00:	4635      	mov	r5, r6
 8002a02:	e48b      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FmcClockSelection)
 8002a04:	2601      	movs	r6, #1
 8002a06:	4635      	mov	r5, r6
 8002a08:	e430      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002a0a:	2601      	movs	r6, #1
 8002a0c:	4635      	mov	r5, r6
 8002a0e:	e49f      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a10:	58024400 	.word	0x58024400
 8002a14:	00ffffcf 	.word	0x00ffffcf

08002a18 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a18:	4b4f      	ldr	r3, [pc, #316]	; (8002b58 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8002a1a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a1c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002a1e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002a20:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8002a22:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002a26:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002a2a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8002a2c:	d05c      	beq.n	8002ae8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002a2e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002a32:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a36:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002a3a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8002a3e:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002a40:	ee07 4a90 	vmov	s15, r4
 8002a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002a48:	d003      	beq.n	8002a52 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8002a4a:	2902      	cmp	r1, #2
 8002a4c:	d075      	beq.n	8002b3a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8002a4e:	2900      	cmp	r1, #0
 8002a50:	d04f      	beq.n	8002af2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002a52:	ee07 2a90 	vmov	s15, r2
 8002a56:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002b5c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002a64:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002b60 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6c:	ee06 3a90 	vmov	s13, r3
 8002a70:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002a74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002a78:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002a7c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002a80:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002a84:	4a34      	ldr	r2, [pc, #208]	; (8002b58 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8002a86:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a8a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002a8c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002a90:	ee07 3a10 	vmov	s14, r3
 8002a94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002a98:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002a9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa6:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002aaa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002aac:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002ab0:	ee07 3a10 	vmov	s14, r3
 8002ab4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ab8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002ac8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002aca:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ade:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002ae2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002ae6:	4770      	bx	lr
 8002ae8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002aea:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002aee:	6082      	str	r2, [r0, #8]
}
 8002af0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	0689      	lsls	r1, r1, #26
 8002af6:	d527      	bpl.n	8002b48 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002af8:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002afa:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002afe:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b00:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b04:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b0e:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b10:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002b60 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	ee06 2a10 	vmov	s12, r2
 8002b1c:	ee06 3a90 	vmov	s13, r3
 8002b20:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8002b24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002b28:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002b2c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002b30:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002b34:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002b38:	e7a4      	b.n	8002a84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b3a:	ee07 2a90 	vmov	s15, r2
 8002b3e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002b68 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8002b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b46:	e78a      	b.n	8002a5e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002b48:	ee07 2a90 	vmov	s15, r2
 8002b4c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002b6c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8002b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b54:	e783      	b.n	8002a5e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	4a742400 	.word	0x4a742400
 8002b60:	39000000 	.word	0x39000000
 8002b64:	03d09000 	.word	0x03d09000
 8002b68:	4af42400 	.word	0x4af42400
 8002b6c:	4c742400 	.word	0x4c742400

08002b70 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8002b72:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b74:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002b76:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002b78:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8002b7a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002b7e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002b82:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8002b84:	d05c      	beq.n	8002c40 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002b86:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002b8a:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b8e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002b92:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8002b96:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002b98:	ee07 4a90 	vmov	s15, r4
 8002b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002ba0:	d003      	beq.n	8002baa <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8002ba2:	2902      	cmp	r1, #2
 8002ba4:	d075      	beq.n	8002c92 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8002ba6:	2900      	cmp	r1, #0
 8002ba8:	d04f      	beq.n	8002c4a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002baa:	ee07 2a90 	vmov	s15, r2
 8002bae:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002bbc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	ee06 3a90 	vmov	s13, r3
 8002bc8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002bcc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002bd0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002bd4:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002bd8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002bdc:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8002bde:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002be2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002be4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002be8:	ee07 3a10 	vmov	s14, r3
 8002bec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002bf0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8002bf2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bfe:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8002c02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c04:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002c08:	ee07 3a10 	vmov	s14, r3
 8002c0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c10:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8002c20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c22:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c36:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002c3a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002c3e:	4770      	bx	lr
 8002c40:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002c42:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002c46:	6082      	str	r2, [r0, #8]
}
 8002c48:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	0689      	lsls	r1, r1, #26
 8002c4e:	d527      	bpl.n	8002ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c50:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c52:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c56:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c58:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c5c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c66:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c68:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c70:	ee06 2a10 	vmov	s12, r2
 8002c74:	ee06 3a90 	vmov	s13, r3
 8002c78:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8002c7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002c80:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002c84:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002c88:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002c8c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002c90:	e7a4      	b.n	8002bdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002c92:	ee07 2a90 	vmov	s15, r2
 8002c96:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8002c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9e:	e78a      	b.n	8002bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002ca0:	ee07 2a90 	vmov	s15, r2
 8002ca4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8002ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cac:	e783      	b.n	8002bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8002cae:	bf00      	nop
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	4a742400 	.word	0x4a742400
 8002cb8:	39000000 	.word	0x39000000
 8002cbc:	03d09000 	.word	0x03d09000
 8002cc0:	4af42400 	.word	0x4af42400
 8002cc4:	4c742400 	.word	0x4c742400

08002cc8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8002cca:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ccc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8002cce:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002cd0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8002cd2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8002cd6:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002cda:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8002cdc:	d05c      	beq.n	8002d98 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002cde:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8002ce2:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ce6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002cea:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8002cee:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002cf0:	ee07 4a90 	vmov	s15, r4
 8002cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8002cf8:	d07e      	beq.n	8002df8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8002cfa:	2902      	cmp	r1, #2
 8002cfc:	d075      	beq.n	8002dea <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8002cfe:	2900      	cmp	r1, #0
 8002d00:	d04f      	beq.n	8002da2 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d02:	ee07 2a90 	vmov	s15, r2
 8002d06:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002e0c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8002d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002d14:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002e10 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	ee06 3a90 	vmov	s13, r3
 8002d20:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002d24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002d28:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002d2c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002d30:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8002d34:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8002d36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d3c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002d40:	ee07 3a10 	vmov	s14, r3
 8002d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8002d48:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8002d4a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d56:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8002d5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d5c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002d60:	ee07 3a10 	vmov	s14, r3
 8002d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d68:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d74:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8002d78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d7a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d86:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d8e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002d92:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002d96:	4770      	bx	lr
 8002d98:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002d9a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8002d9e:	6082      	str	r2, [r0, #8]
}
 8002da0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	0689      	lsls	r1, r1, #26
 8002da6:	d5ac      	bpl.n	8002d02 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002da8:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002daa:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dae:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002db0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002db4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002dbe:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dc0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002e10 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	ee06 2a10 	vmov	s12, r2
 8002dcc:	ee06 3a90 	vmov	s13, r3
 8002dd0:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8002dd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002dd8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002ddc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002de0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002de4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002de8:	e7a4      	b.n	8002d34 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dea:	ee07 2a90 	vmov	s15, r2
 8002dee:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002e18 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8002df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df6:	e78a      	b.n	8002d0e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002df8:	ee07 2a90 	vmov	s15, r2
 8002dfc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002e1c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8002e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e04:	e783      	b.n	8002d0e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8002e06:	bf00      	nop
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	4c742400 	.word	0x4c742400
 8002e10:	39000000 	.word	0x39000000
 8002e14:	03d09000 	.word	0x03d09000
 8002e18:	4af42400 	.word	0x4af42400
 8002e1c:	4a742400 	.word	0x4a742400

08002e20 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002e20:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8002e24:	b500      	push	{lr}
 8002e26:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002e28:	d077      	beq.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002e2a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002e2e:	d02e      	beq.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002e30:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002e34:	f000 80cf 	beq.w	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8002e38:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002e3c:	f000 8080 	beq.w	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8002e40:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002e44:	d05a      	beq.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8002e46:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002e4a:	f000 8105 	beq.w	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8002e4e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002e52:	f000 8110 	beq.w	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8002e56:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002e5a:	f000 80e2 	beq.w	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8002e5e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e62:	d13a      	bne.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8002e64:	4ba9      	ldr	r3, [pc, #676]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8002e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e70:	f000 808e 	beq.w	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8002e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e78:	f000 812e 	beq.w	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002e7c:	bb6b      	cbnz	r3, 8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e7e:	4aa3      	ldr	r2, [pc, #652]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8002e80:	4ba3      	ldr	r3, [pc, #652]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e82:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8002e84:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002e88:	bf18      	it	ne
 8002e8a:	4618      	movne	r0, r3
 8002e8c:	e042      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002e8e:	4a9f      	ldr	r2, [pc, #636]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002e90:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002e92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	f000 8098 	beq.w	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002e9c:	d921      	bls.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8002e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002ea0:	d037      	beq.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea6:	d118      	bne.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002ea8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002eaa:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002eb0:	0749      	lsls	r1, r1, #29
 8002eb2:	d502      	bpl.n	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80ae 	beq.w	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8002eba:	4a94      	ldr	r2, [pc, #592]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	05d0      	lsls	r0, r2, #23
 8002ec0:	d503      	bpl.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8002ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ec6:	f000 80fb 	beq.w	80030c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8002eca:	4a90      	ldr	r2, [pc, #576]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	0391      	lsls	r1, r2, #14
 8002ed0:	d503      	bpl.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed6:	f000 80bd 	beq.w	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8002eda:	2000      	movs	r0, #0
}
 8002edc:	b005      	add	sp, #20
 8002ede:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04b      	beq.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d1f7      	bne.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002eea:	6810      	ldr	r0, [r2, #0]
 8002eec:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ef2:	a801      	add	r0, sp, #4
 8002ef4:	f7ff fd90 	bl	8002a18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002ef8:	9801      	ldr	r0, [sp, #4]
 8002efa:	e00b      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8002efc:	4a83      	ldr	r2, [pc, #524]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002efe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002f00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8002f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f08:	d060      	beq.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002f0a:	d936      	bls.n	8002f7a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8002f0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f10:	d178      	bne.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f12:	4880      	ldr	r0, [pc, #512]	; (8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8002f14:	b005      	add	sp, #20
 8002f16:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002f1a:	4b7c      	ldr	r3, [pc, #496]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d8d9      	bhi.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f91 	.word	0x08002f91
 8002f30:	08002fb5 	.word	0x08002fb5
 8002f34:	08002fa1 	.word	0x08002fa1
 8002f38:	08002f13 	.word	0x08002f13
 8002f3c:	08002f9d 	.word	0x08002f9d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8002f40:	4a72      	ldr	r2, [pc, #456]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002f42:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002f44:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8002f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f4c:	d03e      	beq.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002f4e:	d937      	bls.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002f50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f54:	d0dd      	beq.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5a:	d1be      	bne.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002f5e:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8002f64:	0752      	lsls	r2, r2, #29
 8002f66:	d5a8      	bpl.n	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1a6      	bne.n	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f6c:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002f6e:	486a      	ldr	r0, [pc, #424]	; (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002f76:	40d8      	lsrs	r0, r3
 8002f78:	e7cc      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d146      	bne.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002f7e:	6810      	ldr	r0, [r2, #0]
 8002f80:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002f84:	d0c6      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002f86:	a801      	add	r0, sp, #4
 8002f88:	f7ff fe9e 	bl	8002cc8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8002f8c:	9802      	ldr	r0, [sp, #8]
 8002f8e:	e7c1      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002f90:	4b5e      	ldr	r3, [pc, #376]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002f98:	d0bc      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002f9a:	e7f4      	b.n	8002f86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f9c:	4a5b      	ldr	r2, [pc, #364]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002f9e:	e783      	b.n	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8002fa8:	d0b4      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002faa:	a801      	add	r0, sp, #4
 8002fac:	f7ff fde0 	bl	8002b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002fb0:	9801      	ldr	r0, [sp, #4]
 8002fb2:	e7af      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002fb4:	4b55      	ldr	r3, [pc, #340]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002fbc:	d0aa      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002fbe:	e798      	b.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0dc      	beq.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc8:	d08f      	beq.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8002fca:	e786      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002fcc:	6810      	ldr	r0, [r2, #0]
 8002fce:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8002fd2:	d09f      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002fd4:	e7e9      	b.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8002fd6:	4a4d      	ldr	r2, [pc, #308]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8002fd8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002fda:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8002fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe2:	d0f3      	beq.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002fe4:	d806      	bhi.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0c9      	beq.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fee:	f43f af7c 	beq.w	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8002ff2:	e772      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002ff4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ff8:	d08b      	beq.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002ffa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ffe:	f43f af53 	beq.w	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8003002:	e76a      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8003004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003008:	d0a8      	beq.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800300a:	e766      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003010:	f43f af6b 	beq.w	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8003014:	e761      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	483f      	ldr	r0, [pc, #252]	; (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800301a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800301e:	40d8      	lsrs	r0, r3
 8003020:	e778      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003022:	4a3a      	ldr	r2, [pc, #232]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003024:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003026:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800302a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800302e:	d066      	beq.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8003030:	d82f      	bhi.n	8003092 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8003032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003036:	d04f      	beq.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303c:	d131      	bne.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800303e:	4b33      	ldr	r3, [pc, #204]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8003046:	f43f af65 	beq.w	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800304a:	a801      	add	r0, sp, #4
 800304c:	f7ff fd90 	bl	8002b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003050:	9802      	ldr	r0, [sp, #8]
 8003052:	e75f      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8003054:	482e      	ldr	r0, [pc, #184]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003056:	e75d      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003058:	4a2c      	ldr	r2, [pc, #176]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800305a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800305c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003064:	d02e      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8003066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800306a:	f43f af77 	beq.w	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800306e:	2b00      	cmp	r3, #0
 8003070:	f47f af33 	bne.w	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8003074:	e739      	b.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800307a:	03d2      	lsls	r2, r2, #15
 800307c:	d589      	bpl.n	8002f92 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8003084:	f43f af46 	beq.w	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003088:	a801      	add	r0, sp, #4
 800308a:	f7ff fcc5 	bl	8002a18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800308e:	9803      	ldr	r0, [sp, #12]
 8003090:	e740      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d02a      	beq.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309c:	f43f aeef 	beq.w	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80030a0:	e71b      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f47f af19 	bne.w	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80030a8:	f7fe fe28 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80030b6:	5cd3      	ldrb	r3, [r2, r3]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	40d8      	lsrs	r0, r3
          break;
 80030be:	e729      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 80030c0:	4817      	ldr	r0, [pc, #92]	; (8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80030c2:	e727      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80030c4:	6810      	ldr	r0, [r2, #0]
 80030c6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80030ca:	f43f af23 	beq.w	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80030ce:	a801      	add	r0, sp, #4
 80030d0:	f7ff fd4e 	bl	8002b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80030d4:	9803      	ldr	r0, [sp, #12]
 80030d6:	e71d      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80030e0:	f43f af18 	beq.w	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80030e4:	a801      	add	r0, sp, #4
 80030e6:	f7ff fc97 	bl	8002a18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80030ea:	9802      	ldr	r0, [sp, #8]
 80030ec:	e712      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80030ee:	4a07      	ldr	r2, [pc, #28]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80030f2:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 80030f4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80030f8:	bf18      	it	ne
 80030fa:	4618      	movne	r0, r3
 80030fc:	e70a      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030fe:	6810      	ldr	r0, [r2, #0]
 8003100:	f010 0004 	ands.w	r0, r0, #4
 8003104:	f43f af06 	beq.w	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8003108:	e730      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800310a:	bf00      	nop
 800310c:	58024400 	.word	0x58024400
 8003110:	007a1200 	.word	0x007a1200
 8003114:	00bb8000 	.word	0x00bb8000
 8003118:	03d09000 	.word	0x03d09000
 800311c:	08004c5c 	.word	0x08004c5c
 8003120:	003d0900 	.word	0x003d0900

08003124 <HAL_SPI_Init>:
  uint32_t crc_length = 0UL;
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003124:	2800      	cmp	r0, #0
 8003126:	f000 80ad 	beq.w	8003284 <HAL_SPI_Init+0x160>
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800312a:	6801      	ldr	r1, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312c:	2200      	movs	r2, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800312e:	4b58      	ldr	r3, [pc, #352]	; (8003290 <HAL_SPI_Init+0x16c>)
 8003130:	4299      	cmp	r1, r3
{
 8003132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003136:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003138:	6282      	str	r2, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800313a:	d017      	beq.n	800316c <HAL_SPI_Init+0x48>
 800313c:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 8003140:	4299      	cmp	r1, r3
 8003142:	d013      	beq.n	800316c <HAL_SPI_Init+0x48>
 8003144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003148:	68c7      	ldr	r7, [r0, #12]
 800314a:	4299      	cmp	r1, r3
 800314c:	f000 8092 	beq.w	8003274 <HAL_SPI_Init+0x150>
 8003150:	2f0f      	cmp	r7, #15
 8003152:	d808      	bhi.n	8003166 <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003154:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003156:	f107 0308 	add.w	r3, r7, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800315a:	0972      	lsrs	r2, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 800315c:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800315e:	fb02 3303 	mla	r3, r2, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003162:	2b08      	cmp	r3, #8
 8003164:	d916      	bls.n	8003194 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 8003166:	2001      	movs	r0, #1
}
 8003168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800316c:	68e7      	ldr	r7, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800316e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8003170:	f107 0308 	add.w	r3, r7, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003174:	4846      	ldr	r0, [pc, #280]	; (8003290 <HAL_SPI_Init+0x16c>)
 8003176:	4a47      	ldr	r2, [pc, #284]	; (8003294 <HAL_SPI_Init+0x170>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003178:	0975      	lsrs	r5, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 800317a:	08db      	lsrs	r3, r3, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800317c:	4291      	cmp	r1, r2
 800317e:	bf18      	it	ne
 8003180:	4281      	cmpne	r1, r0
  return data_size * fifo_threashold;
 8003182:	fb05 3303 	mla	r3, r5, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003186:	d003      	beq.n	8003190 <HAL_SPI_Init+0x6c>
 8003188:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800318c:	4291      	cmp	r1, r2
 800318e:	d101      	bne.n	8003194 <HAL_SPI_Init+0x70>
 8003190:	2b10      	cmp	r3, #16
 8003192:	d8e8      	bhi.n	8003166 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003194:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8003198:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05f      	beq.n	8003260 <HAL_SPI_Init+0x13c>
 80031a0:	2500      	movs	r5, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 80031a2:	2202      	movs	r2, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80031a4:	69a3      	ldr	r3, [r4, #24]
 80031a6:	6860      	ldr	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80031a8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80031ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 80031b0:	680a      	ldr	r2, [r1, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80031b2:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	600a      	str	r2, [r1, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80031bc:	d043      	beq.n	8003246 <HAL_SPI_Init+0x122>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031be:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031c0:	4335      	orrs	r5, r6
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80031c4:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031c6:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031c8:	f8d4 8020 	ldr.w	r8, [r4, #32]
 80031cc:	4332      	orrs	r2, r6
 80031ce:	6926      	ldr	r6, [r4, #16]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031d0:	431d      	orrs	r5, r3
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031d2:	6963      	ldr	r3, [r4, #20]
 80031d4:	4332      	orrs	r2, r6
 80031d6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031d8:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031da:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80031dc:	4313      	orrs	r3, r2
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80031de:	608d      	str	r5, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80031e0:	ea43 0208 	orr.w	r2, r3, r8
 80031e4:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80031e6:	ea42 0307 	orr.w	r3, r2, r7
 80031ea:	68a2      	ldr	r2, [r4, #8]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	4333      	orrs	r3, r6
 80031f0:	432b      	orrs	r3, r5
 80031f2:	4303      	orrs	r3, r0
 80031f4:	ea43 030c 	orr.w	r3, r3, ip
 80031f8:	60cb      	str	r3, [r1, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80031fa:	b9b8      	cbnz	r0, 800322c <HAL_SPI_Init+0x108>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80031fc:	688b      	ldr	r3, [r1, #8]
 80031fe:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003206:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003208:	688b      	ldr	r3, [r1, #8]
 800320a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800320e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003212:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003214:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	650b      	str	r3, [r1, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800321c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800321e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003220:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003224:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8003228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800322c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	650b      	str	r3, [r1, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003234:	0243      	lsls	r3, r0, #9
 8003236:	d5f1      	bpl.n	800321c <HAL_SPI_Init+0xf8>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003238:	68cb      	ldr	r3, [r1, #12]
 800323a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800323c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003240:	4313      	orrs	r3, r2
 8003242:	60cb      	str	r3, [r1, #12]
 8003244:	e7ea      	b.n	800321c <HAL_SPI_Init+0xf8>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003246:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800324a:	d01d      	beq.n	8003288 <HAL_SPI_Init+0x164>
 800324c:	2800      	cmp	r0, #0
 800324e:	d1b6      	bne.n	80031be <HAL_SPI_Init+0x9a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003250:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8003254:	d1b3      	bne.n	80031be <HAL_SPI_Init+0x9a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003256:	680a      	ldr	r2, [r1, #0]
 8003258:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800325c:	600a      	str	r2, [r1, #0]
 800325e:	e7ae      	b.n	80031be <HAL_SPI_Init+0x9a>
    HAL_SPI_MspInit(hspi);
 8003260:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003262:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8003266:	f001 faf5 	bl	8004854 <HAL_SPI_MspInit>
 800326a:	6821      	ldr	r1, [r4, #0]
 800326c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800326e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8003270:	68e7      	ldr	r7, [r4, #12]
 8003272:	e796      	b.n	80031a2 <HAL_SPI_Init+0x7e>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003274:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8003276:	f107 0308 	add.w	r3, r7, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800327a:	0972      	lsrs	r2, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 800327c:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 800327e:	fb02 3303 	mla	r3, r2, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003282:	e785      	b.n	8003190 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8003284:	2001      	movs	r0, #1
}
 8003286:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003288:	f1bc 0f00 	cmp.w	ip, #0
 800328c:	d0e3      	beq.n	8003256 <HAL_SPI_Init+0x132>
 800328e:	e796      	b.n	80031be <HAL_SPI_Init+0x9a>
 8003290:	40013000 	.word	0x40013000
 8003294:	40003800 	.word	0x40003800

08003298 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003298:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800329a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329e:	f022 0201 	bic.w	r2, r2, #1
{
 80032a2:	b4f0      	push	{r4, r5, r6, r7}
  tmpccmrx |= OC_Config->OCMode;
 80032a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a6:	4f19      	ldr	r7, [pc, #100]	; (800330c <TIM_OC1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032a8:	6202      	str	r2, [r0, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032aa:	4e19      	ldr	r6, [pc, #100]	; (8003310 <TIM_OC1_SetConfig+0x78>)
  tmpccer = TIMx->CCER;
 80032ac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80032ae:	6844      	ldr	r4, [r0, #4]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032b0:	42b0      	cmp	r0, r6
  tmpccmrx = TIMx->CCMR1;
 80032b2:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80032b4:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b8:	ea07 0702 	and.w	r7, r7, r2
  tmpccer |= OC_Config->OCPolarity;
 80032bc:	ea43 030c 	orr.w	r3, r3, ip
  tmpccmrx |= OC_Config->OCMode;
 80032c0:	ea45 0507 	orr.w	r5, r5, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c4:	d00e      	beq.n	80032e4 <TIM_OC1_SetConfig+0x4c>
 80032c6:	4a13      	ldr	r2, [pc, #76]	; (8003314 <TIM_OC1_SetConfig+0x7c>)
 80032c8:	4290      	cmp	r0, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_OC1_SetConfig+0x4c>
 80032cc:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 80032d0:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80032d4:	4290      	cmp	r0, r2
 80032d6:	bf18      	it	ne
 80032d8:	42b0      	cmpne	r0, r6
 80032da:	d003      	beq.n	80032e4 <TIM_OC1_SetConfig+0x4c>
 80032dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032e0:	4290      	cmp	r0, r2
 80032e2:	d10b      	bne.n	80032fc <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e4:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80032e6:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032ea:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ec:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 80032f0:	4313      	orrs	r3, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f2:	694a      	ldr	r2, [r1, #20]
 80032f4:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80032f6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80032fa:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032fc:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80032fe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003300:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003302:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003304:	6203      	str	r3, [r0, #32]
}
 8003306:	bcf0      	pop	{r4, r5, r6, r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	fffeff8c 	.word	0xfffeff8c
 8003310:	40010000 	.word	0x40010000
 8003314:	40010400 	.word	0x40010400

08003318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003318:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800331a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800331c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003320:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;
 8003324:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003326:	4e19      	ldr	r6, [pc, #100]	; (800338c <TIM_OC3_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003328:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800332a:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800332c:	42b0      	cmp	r0, r6
  tmpcr2 =  TIMx->CR2;
 800332e:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003330:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003332:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003336:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800333a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800333e:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003342:	d00d      	beq.n	8003360 <TIM_OC3_SetConfig+0x48>
 8003344:	4c12      	ldr	r4, [pc, #72]	; (8003390 <TIM_OC3_SetConfig+0x78>)
 8003346:	42a0      	cmp	r0, r4
 8003348:	d00a      	beq.n	8003360 <TIM_OC3_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334a:	4e12      	ldr	r6, [pc, #72]	; (8003394 <TIM_OC3_SetConfig+0x7c>)
 800334c:	4c12      	ldr	r4, [pc, #72]	; (8003398 <TIM_OC3_SetConfig+0x80>)
 800334e:	42a0      	cmp	r0, r4
 8003350:	bf18      	it	ne
 8003352:	42b0      	cmpne	r0, r6
 8003354:	d00b      	beq.n	800336e <TIM_OC3_SetConfig+0x56>
 8003356:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800335a:	42a0      	cmp	r0, r4
 800335c:	d10e      	bne.n	800337c <TIM_OC3_SetConfig+0x64>
 800335e:	e006      	b.n	800336e <TIM_OC3_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC3NP;
 8003360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003364:	68cc      	ldr	r4, [r1, #12]
 8003366:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800336a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800336e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003370:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003374:	698e      	ldr	r6, [r1, #24]
 8003376:	4334      	orrs	r4, r6
 8003378:	ea45 1504 	orr.w	r5, r5, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800337c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800337e:	6045      	str	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003380:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003382:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003384:	6203      	str	r3, [r0, #32]
}
 8003386:	bcf0      	pop	{r4, r5, r6, r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40010000 	.word	0x40010000
 8003390:	40010400 	.word	0x40010400
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400

0800339c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800339c:	2800      	cmp	r0, #0
 800339e:	f000 809c 	beq.w	80034da <HAL_TIM_Base_Init+0x13e>
{
 80033a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80033a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033a8:	4604      	mov	r4, r0
 80033aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d075      	beq.n	800349e <HAL_TIM_Base_Init+0x102>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b6:	494a      	ldr	r1, [pc, #296]	; (80034e0 <HAL_TIM_Base_Init+0x144>)
 80033b8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 80033c4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c6:	fab1 f181 	clz	r1, r1
 80033ca:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80033ce:	d026      	beq.n	800341e <HAL_TIM_Base_Init+0x82>
 80033d0:	bb29      	cbnz	r1, 800341e <HAL_TIM_Base_Init+0x82>
 80033d2:	4844      	ldr	r0, [pc, #272]	; (80034e4 <HAL_TIM_Base_Init+0x148>)
 80033d4:	4282      	cmp	r2, r0
 80033d6:	d022      	beq.n	800341e <HAL_TIM_Base_Init+0x82>
 80033d8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80033dc:	4282      	cmp	r2, r0
 80033de:	d01e      	beq.n	800341e <HAL_TIM_Base_Init+0x82>
 80033e0:	4f41      	ldr	r7, [pc, #260]	; (80034e8 <HAL_TIM_Base_Init+0x14c>)
 80033e2:	4d42      	ldr	r5, [pc, #264]	; (80034ec <HAL_TIM_Base_Init+0x150>)
 80033e4:	1bd7      	subs	r7, r2, r7
 80033e6:	42aa      	cmp	r2, r5
 80033e8:	fab7 f787 	clz	r7, r7
 80033ec:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80033f0:	d05a      	beq.n	80034a8 <HAL_TIM_Base_Init+0x10c>
 80033f2:	2f00      	cmp	r7, #0
 80033f4:	d158      	bne.n	80034a8 <HAL_TIM_Base_Init+0x10c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033f6:	483e      	ldr	r0, [pc, #248]	; (80034f0 <HAL_TIM_Base_Init+0x154>)
 80033f8:	493e      	ldr	r1, [pc, #248]	; (80034f4 <HAL_TIM_Base_Init+0x158>)
 80033fa:	428a      	cmp	r2, r1
 80033fc:	bf18      	it	ne
 80033fe:	4282      	cmpne	r2, r0
 8003400:	d05d      	beq.n	80034be <HAL_TIM_Base_Init+0x122>
 8003402:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003406:	428a      	cmp	r2, r1
 8003408:	d059      	beq.n	80034be <HAL_TIM_Base_Init+0x122>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340a:	69a1      	ldr	r1, [r4, #24]
 800340c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003410:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003412:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003414:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003416:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003418:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800341a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341c:	e023      	b.n	8003466 <HAL_TIM_Base_Init+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800341e:	4f32      	ldr	r7, [pc, #200]	; (80034e8 <HAL_TIM_Base_Init+0x14c>)
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003424:	68a5      	ldr	r5, [r4, #8]
 8003426:	1bd7      	subs	r7, r2, r7
 8003428:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800342a:	fab7 f787 	clz	r7, r7
 800342e:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003430:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003436:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003438:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800343a:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800343c:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800343e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003442:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003444:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003446:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003448:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800344a:	b951      	cbnz	r1, 8003462 <HAL_TIM_Base_Init+0xc6>
 800344c:	b94f      	cbnz	r7, 8003462 <HAL_TIM_Base_Init+0xc6>
 800344e:	4928      	ldr	r1, [pc, #160]	; (80034f0 <HAL_TIM_Base_Init+0x154>)
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_TIM_Base_Init+0x158>)
 8003452:	429a      	cmp	r2, r3
 8003454:	bf18      	it	ne
 8003456:	428a      	cmpne	r2, r1
 8003458:	d003      	beq.n	8003462 <HAL_TIM_Base_Init+0xc6>
 800345a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800345e:	429a      	cmp	r2, r3
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
 8003462:	6963      	ldr	r3, [r4, #20]
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003466:	2301      	movs	r3, #1
  return HAL_OK;
 8003468:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800346a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003470:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003474:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003478:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800347c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800348c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003490:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003494:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003498:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800349c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800349e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80034a2:	f001 fb57 	bl	8004b54 <HAL_TIM_Base_MspInit>
 80034a6:	e784      	b.n	80033b2 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a8:	4810      	ldr	r0, [pc, #64]	; (80034ec <HAL_TIM_Base_Init+0x150>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80034ae:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b0:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80034b2:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b6:	d0bb      	beq.n	8003430 <HAL_TIM_Base_Init+0x94>
 80034b8:	2f00      	cmp	r7, #0
 80034ba:	d1b9      	bne.n	8003430 <HAL_TIM_Base_Init+0x94>
 80034bc:	e79b      	b.n	80033f6 <HAL_TIM_Base_Init+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034be:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c4:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c8:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80034ca:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80034d2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034d6:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d8:	e7b9      	b.n	800344e <HAL_TIM_Base_Init+0xb2>
    return HAL_ERROR;
 80034da:	2001      	movs	r0, #1
}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40010400 	.word	0x40010400
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40014400 	.word	0x40014400

080034f8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80034f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d13c      	bne.n	800357a <HAL_TIM_Base_Start_IT+0x82>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003500:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003502:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_TIM_Base_Start_IT+0x98>)
 8003504:	4923      	ldr	r1, [pc, #140]	; (8003594 <HAL_TIM_Base_Start_IT+0x9c>)
 8003506:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800350a:	bf18      	it	ne
 800350c:	429a      	cmpne	r2, r3
{
 800350e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	4c20      	ldr	r4, [pc, #128]	; (8003598 <HAL_TIM_Base_Start_IT+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351a:	42a2      	cmp	r2, r4
 800351c:	bf08      	it	eq
 800351e:	f043 0301 	orreq.w	r3, r3, #1
 8003522:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  htim->State = HAL_TIM_STATE_BUSY;
 8003526:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352a:	428a      	cmp	r2, r1
 800352c:	bf08      	it	eq
 800352e:	f043 0301 	orreq.w	r3, r3, #1
 8003532:	481a      	ldr	r0, [pc, #104]	; (800359c <HAL_TIM_Base_Start_IT+0xa4>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003534:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	42a2      	cmp	r2, r4
 8003538:	bf08      	it	eq
 800353a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800353e:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003542:	4282      	cmp	r2, r0
 8003544:	bf08      	it	eq
 8003546:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800354a:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354c:	b933      	cbnz	r3, 800355c <HAL_TIM_Base_Start_IT+0x64>
 800354e:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8003552:	1a10      	subs	r0, r2, r0
 8003554:	fab0 f080 	clz	r0, r0
 8003558:	0940      	lsrs	r0, r0, #5
 800355a:	b198      	cbz	r0, 8003584 <HAL_TIM_Base_Start_IT+0x8c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355c:	6891      	ldr	r1, [r2, #8]
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_TIM_Base_Start_IT+0xa8>)
 8003560:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	2b06      	cmp	r3, #6
 8003564:	d00b      	beq.n	800357e <HAL_TIM_Base_Start_IT+0x86>
 8003566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356a:	d008      	beq.n	800357e <HAL_TIM_Base_Start_IT+0x86>
      __HAL_TIM_ENABLE(htim);
 800356c:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800356e:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6013      	str	r3, [r2, #0]
}
 8003576:	bc30      	pop	{r4, r5}
 8003578:	4770      	bx	lr
    return HAL_ERROR;
 800357a:	2001      	movs	r0, #1
}
 800357c:	4770      	bx	lr
  return HAL_OK;
 800357e:	2000      	movs	r0, #0
}
 8003580:	bc30      	pop	{r4, r5}
 8003582:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8003584:	6813      	ldr	r3, [r2, #0]
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	e7f3      	b.n	8003576 <HAL_TIM_Base_Start_IT+0x7e>
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40000800 	.word	0x40000800
 8003598:	40000400 	.word	0x40000400
 800359c:	40010400 	.word	0x40010400
 80035a0:	00010007 	.word	0x00010007

080035a4 <HAL_TIM_PWM_MspInit>:
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop

080035a8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80035a8:	2800      	cmp	r0, #0
 80035aa:	f000 809c 	beq.w	80036e6 <HAL_TIM_PWM_Init+0x13e>
{
 80035ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80035b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035b4:	4604      	mov	r4, r0
 80035b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d075      	beq.n	80036aa <HAL_TIM_PWM_Init+0x102>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035be:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c2:	494a      	ldr	r1, [pc, #296]	; (80036ec <HAL_TIM_PWM_Init+0x144>)
 80035c4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035cc:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 80035d0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d2:	fab1 f181 	clz	r1, r1
 80035d6:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80035da:	d026      	beq.n	800362a <HAL_TIM_PWM_Init+0x82>
 80035dc:	bb29      	cbnz	r1, 800362a <HAL_TIM_PWM_Init+0x82>
 80035de:	4844      	ldr	r0, [pc, #272]	; (80036f0 <HAL_TIM_PWM_Init+0x148>)
 80035e0:	4282      	cmp	r2, r0
 80035e2:	d022      	beq.n	800362a <HAL_TIM_PWM_Init+0x82>
 80035e4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80035e8:	4282      	cmp	r2, r0
 80035ea:	d01e      	beq.n	800362a <HAL_TIM_PWM_Init+0x82>
 80035ec:	4f41      	ldr	r7, [pc, #260]	; (80036f4 <HAL_TIM_PWM_Init+0x14c>)
 80035ee:	4d42      	ldr	r5, [pc, #264]	; (80036f8 <HAL_TIM_PWM_Init+0x150>)
 80035f0:	1bd7      	subs	r7, r2, r7
 80035f2:	42aa      	cmp	r2, r5
 80035f4:	fab7 f787 	clz	r7, r7
 80035f8:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80035fc:	d05a      	beq.n	80036b4 <HAL_TIM_PWM_Init+0x10c>
 80035fe:	2f00      	cmp	r7, #0
 8003600:	d158      	bne.n	80036b4 <HAL_TIM_PWM_Init+0x10c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	483e      	ldr	r0, [pc, #248]	; (80036fc <HAL_TIM_PWM_Init+0x154>)
 8003604:	493e      	ldr	r1, [pc, #248]	; (8003700 <HAL_TIM_PWM_Init+0x158>)
 8003606:	428a      	cmp	r2, r1
 8003608:	bf18      	it	ne
 800360a:	4282      	cmpne	r2, r0
 800360c:	d05d      	beq.n	80036ca <HAL_TIM_PWM_Init+0x122>
 800360e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003612:	428a      	cmp	r2, r1
 8003614:	d059      	beq.n	80036ca <HAL_TIM_PWM_Init+0x122>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003616:	69a1      	ldr	r1, [r4, #24]
 8003618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003620:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003622:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003624:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003626:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003628:	e023      	b.n	8003672 <HAL_TIM_PWM_Init+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362a:	4f32      	ldr	r7, [pc, #200]	; (80036f4 <HAL_TIM_PWM_Init+0x14c>)
 800362c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003630:	68a5      	ldr	r5, [r4, #8]
 8003632:	1bd7      	subs	r7, r2, r7
 8003634:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003636:	fab7 f787 	clz	r7, r7
 800363a:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003642:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003644:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003646:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8003648:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800364a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003650:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003652:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003654:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003656:	b951      	cbnz	r1, 800366e <HAL_TIM_PWM_Init+0xc6>
 8003658:	b94f      	cbnz	r7, 800366e <HAL_TIM_PWM_Init+0xc6>
 800365a:	4928      	ldr	r1, [pc, #160]	; (80036fc <HAL_TIM_PWM_Init+0x154>)
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_TIM_PWM_Init+0x158>)
 800365e:	429a      	cmp	r2, r3
 8003660:	bf18      	it	ne
 8003662:	428a      	cmpne	r2, r1
 8003664:	d003      	beq.n	800366e <HAL_TIM_PWM_Init+0xc6>
 8003666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800366a:	429a      	cmp	r2, r3
 800366c:	d101      	bne.n	8003672 <HAL_TIM_PWM_Init+0xca>
    TIMx->RCR = Structure->RepetitionCounter;
 800366e:	6963      	ldr	r3, [r4, #20]
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003672:	2301      	movs	r3, #1
  return HAL_OK;
 8003674:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003676:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003680:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003684:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003688:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800368c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800369c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80036a0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80036a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 80036aa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036ae:	f7ff ff79 	bl	80035a4 <HAL_TIM_PWM_MspInit>
 80036b2:	e784      	b.n	80035be <HAL_TIM_PWM_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b4:	4810      	ldr	r0, [pc, #64]	; (80036f8 <HAL_TIM_PWM_Init+0x150>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036ba:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036bc:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80036be:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c2:	d0bb      	beq.n	800363c <HAL_TIM_PWM_Init+0x94>
 80036c4:	2f00      	cmp	r7, #0
 80036c6:	d1b9      	bne.n	800363c <HAL_TIM_PWM_Init+0x94>
 80036c8:	e79b      	b.n	8003602 <HAL_TIM_PWM_Init+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ca:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d4:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80036d6:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036dc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80036de:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036e2:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e4:	e7b9      	b.n	800365a <HAL_TIM_PWM_Init+0xb2>
    return HAL_ERROR;
 80036e6:	2001      	movs	r0, #1
}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40010400 	.word	0x40010400
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40014000 	.word	0x40014000
 8003700:	40014400 	.word	0x40014400

08003704 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003704:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d07d      	beq.n	8003808 <HAL_TIM_ConfigClockSource+0x104>
 800370c:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800370e:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003710:	6800      	ldr	r0, [r0, #0]
{
 8003712:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003714:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003716:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800371a:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371e:	4c54      	ldr	r4, [pc, #336]	; (8003870 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 8003720:	6885      	ldr	r5, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003722:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003724:	402c      	ands	r4, r5
  switch (sClockSourceConfig->ClockSource)
 8003726:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003728:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800372a:	d06f      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x108>
 800372c:	d91d      	bls.n	800376a <HAL_TIM_ConfigClockSource+0x66>
 800372e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003732:	d059      	beq.n	80037e8 <HAL_TIM_ConfigClockSource+0xe4>
 8003734:	d942      	bls.n	80037bc <HAL_TIM_ConfigClockSource+0xb8>
 8003736:	494f      	ldr	r1, [pc, #316]	; (8003874 <HAL_TIM_ConfigClockSource+0x170>)
 8003738:	428b      	cmp	r3, r1
 800373a:	d006      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x46>
 800373c:	d938      	bls.n	80037b0 <HAL_TIM_ConfigClockSource+0xac>
 800373e:	494e      	ldr	r1, [pc, #312]	; (8003878 <HAL_TIM_ConfigClockSource+0x174>)
 8003740:	428b      	cmp	r3, r1
 8003742:	d002      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x46>
 8003744:	3110      	adds	r1, #16
 8003746:	428b      	cmp	r3, r1
 8003748:	d106      	bne.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800374a:	6884      	ldr	r4, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800374c:	494b      	ldr	r1, [pc, #300]	; (800387c <HAL_TIM_ConfigClockSource+0x178>)
 800374e:	4021      	ands	r1, r4
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003750:	430b      	orrs	r3, r1
 8003752:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003756:	6083      	str	r3, [r0, #8]
  __HAL_UNLOCK(htim);
 8003758:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800375a:	2101      	movs	r1, #1
  return HAL_OK;
 800375c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800375e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003762:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003766:	bcf0      	pop	{r4, r5, r6, r7}
 8003768:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d067      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x13a>
 800376e:	d919      	bls.n	80037a4 <HAL_TIM_ConfigClockSource+0xa0>
 8003770:	2b50      	cmp	r3, #80	; 0x50
 8003772:	d1f1      	bne.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
  tmpccer = TIMx->CCER;
 8003774:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003776:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003778:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800377a:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003782:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003784:	431c      	orrs	r4, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003788:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378a:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800378c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003790:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003794:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8003796:	6204      	str	r4, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003798:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800379a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800379c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80037a0:	6083      	str	r3, [r0, #8]
}
 80037a2:	e7d9      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d0d0      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x46>
 80037a8:	d91a      	bls.n	80037e0 <HAL_TIM_ConfigClockSource+0xdc>
 80037aa:	2b30      	cmp	r3, #48	; 0x30
 80037ac:	d1d4      	bne.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
 80037ae:	e7cc      	b.n	800374a <HAL_TIM_ConfigClockSource+0x46>
 80037b0:	f023 0110 	bic.w	r1, r3, #16
 80037b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80037b8:	d1ce      	bne.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
 80037ba:	e7c6      	b.n	800374a <HAL_TIM_ConfigClockSource+0x46>
 80037bc:	2b70      	cmp	r3, #112	; 0x70
 80037be:	d1cb      	bne.n	8003758 <HAL_TIM_ConfigClockSource+0x54>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c0:	68cc      	ldr	r4, [r1, #12]
 80037c2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80037c6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c8:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ca:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ce:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80037d2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d4:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80037d6:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80037dc:	6083      	str	r3, [r0, #8]
      break;
 80037de:	e7bb      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80037e0:	f033 0110 	bics.w	r1, r3, #16
 80037e4:	d1b8      	bne.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
 80037e6:	e7b0      	b.n	800374a <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80037ec:	68cc      	ldr	r4, [r1, #12]
 80037ee:	432b      	orrs	r3, r5
  tmpsmcr = TIMx->SMCR;
 80037f0:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037fa:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80037fc:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037fe:	6883      	ldr	r3, [r0, #8]
 8003800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003804:	6083      	str	r3, [r0, #8]
      break;
 8003806:	e7a7      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
  __HAL_LOCK(htim);
 8003808:	2002      	movs	r0, #2
}
 800380a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800380c:	6a05      	ldr	r5, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800380e:	684e      	ldr	r6, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003810:	f025 0510 	bic.w	r5, r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003814:	68cf      	ldr	r7, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003818:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800381c:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800381e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003822:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003826:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800382a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800382e:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8003830:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003832:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003834:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003836:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800383a:	6083      	str	r3, [r0, #8]
}
 800383c:	e78c      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
  tmpccer = TIMx->CCER;
 800383e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003840:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003842:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003844:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003848:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800384c:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800384e:	431c      	orrs	r4, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003854:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003856:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800385a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800385e:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8003860:	6204      	str	r4, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003862:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003864:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003866:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800386a:	6083      	str	r3, [r0, #8]
}
 800386c:	e774      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x54>
 800386e:	bf00      	nop
 8003870:	ffce0088 	.word	0xffce0088
 8003874:	00100020 	.word	0x00100020
 8003878:	00100030 	.word	0x00100030
 800387c:	ffcfff8f 	.word	0xffcfff8f

08003880 <HAL_TIM_OC_DelayElapsedCallback>:
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <HAL_TIM_IC_CaptureCallback>:
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop

08003888 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop

0800388c <HAL_TIM_TriggerCallback>:
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003890:	6803      	ldr	r3, [r0, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	0791      	lsls	r1, r2, #30
{
 8003896:	b510      	push	{r4, lr}
 8003898:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800389a:	d502      	bpl.n	80038a2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	0792      	lsls	r2, r2, #30
 80038a0:	d468      	bmi.n	8003974 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	0752      	lsls	r2, r2, #29
 80038a6:	d502      	bpl.n	80038ae <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	0750      	lsls	r0, r2, #29
 80038ac:	d44f      	bmi.n	800394e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	0711      	lsls	r1, r2, #28
 80038b2:	d502      	bpl.n	80038ba <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	0712      	lsls	r2, r2, #28
 80038b8:	d437      	bmi.n	800392a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	06d0      	lsls	r0, r2, #27
 80038be:	d502      	bpl.n	80038c6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	06d1      	lsls	r1, r2, #27
 80038c4:	d41e      	bmi.n	8003904 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	07d2      	lsls	r2, r2, #31
 80038ca:	d502      	bpl.n	80038d2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	07d0      	lsls	r0, r2, #31
 80038d0:	d469      	bmi.n	80039a6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	0611      	lsls	r1, r2, #24
 80038d6:	d502      	bpl.n	80038de <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	0612      	lsls	r2, r2, #24
 80038dc:	d46b      	bmi.n	80039b6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	05d0      	lsls	r0, r2, #23
 80038e2:	d502      	bpl.n	80038ea <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	0611      	lsls	r1, r2, #24
 80038e8:	d46d      	bmi.n	80039c6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	0652      	lsls	r2, r2, #25
 80038ee:	d502      	bpl.n	80038f6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	0650      	lsls	r0, r2, #25
 80038f4:	d46f      	bmi.n	80039d6 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	0691      	lsls	r1, r2, #26
 80038fa:	d502      	bpl.n	8003902 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	0692      	lsls	r2, r2, #26
 8003900:	d449      	bmi.n	8003996 <HAL_TIM_IRQHandler+0x106>
}
 8003902:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003904:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003908:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800390c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003916:	d16f      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003918:	f7ff ffb2 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff ffb3 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	2200      	movs	r2, #0
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	7722      	strb	r2, [r4, #28]
 8003928:	e7cd      	b.n	80038c6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800392a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003930:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003932:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003934:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	079b      	lsls	r3, r3, #30
 800393a:	d15a      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393c:	f7ff ffa0 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	4620      	mov	r0, r4
 8003942:	f7ff ffa1 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	2200      	movs	r2, #0
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	7722      	strb	r2, [r4, #28]
 800394c:	e7b5      	b.n	80038ba <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800394e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003952:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003954:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003956:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003958:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003960:	d144      	bne.n	80039ec <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	f7ff ff8d 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003966:	4620      	mov	r0, r4
 8003968:	f7ff ff8e 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396c:	2200      	movs	r2, #0
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	7722      	strb	r2, [r4, #28]
 8003972:	e79c      	b.n	80038ae <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003974:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003978:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800397a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800397c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	0799      	lsls	r1, r3, #30
 8003982:	d130      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003984:	f7ff ff7c 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	4620      	mov	r0, r4
 800398a:	f7ff ff7d 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	2200      	movs	r2, #0
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	7722      	strb	r2, [r4, #28]
 8003994:	e785      	b.n	80038a2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003996:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800399a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800399c:	611a      	str	r2, [r3, #16]
}
 800399e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80039a2:	f000 b9eb 	b.w	8003d7c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80039aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ae:	f000 fcd3 	bl	8004358 <HAL_TIM_PeriodElapsedCallback>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	e78d      	b.n	80038d2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80039ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80039be:	f000 f9df 	bl	8003d80 <HAL_TIMEx_BreakCallback>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	e78b      	b.n	80038de <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80039ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80039ce:	f000 f9d9 	bl	8003d84 <HAL_TIMEx_Break2Callback>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	e789      	b.n	80038ea <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80039da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80039de:	f7ff ff55 	bl	800388c <HAL_TIM_TriggerCallback>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	e787      	b.n	80038f6 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	f7ff ff4d 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 80039ea:	e7d0      	b.n	800398e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80039ec:	f7ff ff4a 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 80039f0:	e7bc      	b.n	800396c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	f7ff ff47 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 80039f6:	e7a6      	b.n	8003946 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80039f8:	f7ff ff44 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e791      	b.n	8003922 <HAL_TIM_IRQHandler+0x92>
 80039fe:	bf00      	nop

08003a00 <TIM_OC2_SetConfig>:
{
 8003a00:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a02:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a04:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a08:	f024 0410 	bic.w	r4, r4, #16
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a0c:	680a      	ldr	r2, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a0e:	4f19      	ldr	r7, [pc, #100]	; (8003a74 <TIM_OC2_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a10:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a12:	4e19      	ldr	r6, [pc, #100]	; (8003a78 <TIM_OC2_SetConfig+0x78>)
  tmpccer = TIMx->CCER;
 8003a14:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003a16:	6845      	ldr	r5, [r0, #4]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a18:	42b0      	cmp	r0, r6
  tmpccmrx = TIMx->CCMR1;
 8003a1a:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003a1c:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a20:	ea07 0704 	and.w	r7, r7, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a24:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a28:	ea47 2202 	orr.w	r2, r7, r2, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a2c:	d00d      	beq.n	8003a4a <TIM_OC2_SetConfig+0x4a>
 8003a2e:	4c13      	ldr	r4, [pc, #76]	; (8003a7c <TIM_OC2_SetConfig+0x7c>)
 8003a30:	42a0      	cmp	r0, r4
 8003a32:	d00a      	beq.n	8003a4a <TIM_OC2_SetConfig+0x4a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a34:	4e12      	ldr	r6, [pc, #72]	; (8003a80 <TIM_OC2_SetConfig+0x80>)
 8003a36:	4c13      	ldr	r4, [pc, #76]	; (8003a84 <TIM_OC2_SetConfig+0x84>)
 8003a38:	42a0      	cmp	r0, r4
 8003a3a:	bf18      	it	ne
 8003a3c:	42b0      	cmpne	r0, r6
 8003a3e:	d00b      	beq.n	8003a58 <TIM_OC2_SetConfig+0x58>
 8003a40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a44:	42a0      	cmp	r0, r4
 8003a46:	d10e      	bne.n	8003a66 <TIM_OC2_SetConfig+0x66>
 8003a48:	e006      	b.n	8003a58 <TIM_OC2_SetConfig+0x58>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a4e:	68cc      	ldr	r4, [r1, #12]
 8003a50:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a58:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a5a:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a5e:	698e      	ldr	r6, [r1, #24]
 8003a60:	4334      	orrs	r4, r6
 8003a62:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8003a66:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003a68:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a6a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a6c:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003a6e:	6203      	str	r3, [r0, #32]
}
 8003a70:	bcf0      	pop	{r4, r5, r6, r7}
 8003a72:	4770      	bx	lr
 8003a74:	feff8cff 	.word	0xfeff8cff
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40010400 	.word	0x40010400
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400

08003a88 <HAL_TIM_PWM_ConfigChannel>:
{
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003a8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	f000 811a 	beq.w	8003cc8 <HAL_TIM_PWM_ConfigChannel+0x240>
 8003a94:	2301      	movs	r3, #1
 8003a96:	4604      	mov	r4, r0
 8003a98:	460d      	mov	r5, r1
 8003a9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003a9e:	2a14      	cmp	r2, #20
 8003aa0:	d852      	bhi.n	8003b48 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8003aa2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003aa6:	0095      	.short	0x0095
 8003aa8:	00510051 	.word	0x00510051
 8003aac:	00a90051 	.word	0x00a90051
 8003ab0:	00510051 	.word	0x00510051
 8003ab4:	00be0051 	.word	0x00be0051
 8003ab8:	00510051 	.word	0x00510051
 8003abc:	00150051 	.word	0x00150051
 8003ac0:	00510051 	.word	0x00510051
 8003ac4:	00d20051 	.word	0x00d20051
 8003ac8:	00510051 	.word	0x00510051
 8003acc:	00550051 	.word	0x00550051
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ad2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ad6:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ada:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	4e7b      	ldr	r6, [pc, #492]	; (8003ccc <HAL_TIM_PWM_ConfigChannel+0x244>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae0:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae2:	42b3      	cmp	r3, r6
  tmpccer = TIMx->CCER;
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003ae6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003ae8:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aee:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003af2:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afa:	d00e      	beq.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x92>
 8003afc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003b00:	42b3      	cmp	r3, r6
 8003b02:	d00a      	beq.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x92>
 8003b04:	4f72      	ldr	r7, [pc, #456]	; (8003cd0 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8003b06:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8003b0a:	42b3      	cmp	r3, r6
 8003b0c:	bf18      	it	ne
 8003b0e:	42bb      	cmpne	r3, r7
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x92>
 8003b12:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003b16:	42b3      	cmp	r3, r6
 8003b18:	d104      	bne.n	8003b24 <HAL_TIM_PWM_ConfigChannel+0x9c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b1a:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b1e:	696e      	ldr	r6, [r5, #20]
 8003b20:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8003b24:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003b26:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b28:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003b2a:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003b2c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b2e:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b30:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b32:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003b36:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b38:	69d9      	ldr	r1, [r3, #28]
 8003b3a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b3e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003b46:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b50:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b52:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b56:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b58:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b5a:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	4e5b      	ldr	r6, [pc, #364]	; (8003ccc <HAL_TIM_PWM_ConfigChannel+0x244>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b60:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	42b3      	cmp	r3, r6
  tmpccer = TIMx->CCER;
 8003b64:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b66:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003b68:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b6a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b6e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b72:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b76:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7a:	d00e      	beq.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x112>
 8003b7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003b80:	42b3      	cmp	r3, r6
 8003b82:	d00a      	beq.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x112>
 8003b84:	4f52      	ldr	r7, [pc, #328]	; (8003cd0 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8003b86:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8003b8a:	42b3      	cmp	r3, r6
 8003b8c:	bf18      	it	ne
 8003b8e:	42bb      	cmpne	r3, r7
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x112>
 8003b92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003b96:	42b3      	cmp	r3, r6
 8003b98:	d104      	bne.n	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b9a:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b9e:	696e      	ldr	r6, [r5, #20]
 8003ba0:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8003ba4:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003ba6:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003ba8:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003baa:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8003bac:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bae:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bb0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bb2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003bb6:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bba:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003bbe:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8003bc6:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003bca:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003bce:	e7be      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd0:	6800      	ldr	r0, [r0, #0]
 8003bd2:	f7ff fb61 	bl	8003298 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bd6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bd8:	6908      	ldr	r0, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bda:	6999      	ldr	r1, [r3, #24]
 8003bdc:	f041 0108 	orr.w	r1, r1, #8
 8003be0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003be2:	6999      	ldr	r1, [r3, #24]
 8003be4:	f021 0104 	bic.w	r1, r1, #4
 8003be8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8003bee:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bf0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003bf2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003bf6:	e7aa      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bf8:	6800      	ldr	r0, [r0, #0]
 8003bfa:	f7ff ff01 	bl	8003a00 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bfe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c00:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c02:	6999      	ldr	r1, [r3, #24]
 8003c04:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003c08:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c0a:	6999      	ldr	r1, [r3, #24]
 8003c0c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003c10:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8003c18:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c1a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003c1c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003c20:	e795      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c22:	6800      	ldr	r0, [r0, #0]
 8003c24:	f7ff fb78 	bl	8003318 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c28:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c2a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c2c:	69d9      	ldr	r1, [r3, #28]
 8003c2e:	f041 0108 	orr.w	r1, r1, #8
 8003c32:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c34:	69d9      	ldr	r1, [r3, #28]
 8003c36:	f021 0104 	bic.w	r1, r1, #4
 8003c3a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8003c40:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c42:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003c44:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003c48:	e781      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c4a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c4c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c50:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003c52:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c54:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c58:	4e1c      	ldr	r6, [pc, #112]	; (8003ccc <HAL_TIM_PWM_ConfigChannel+0x244>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c5a:	6218      	str	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5c:	42b3      	cmp	r3, r6
  tmpccer = TIMx->CCER;
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003c60:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8003c62:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8003c64:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c68:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c6c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8003c70:	ea41 0107 	orr.w	r1, r1, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c74:	d00e      	beq.n	8003c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8003c76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003c7a:	42b3      	cmp	r3, r6
 8003c7c:	d00a      	beq.n	8003c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8003c7e:	4f14      	ldr	r7, [pc, #80]	; (8003cd0 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8003c80:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8003c84:	42b3      	cmp	r3, r6
 8003c86:	bf18      	it	ne
 8003c88:	42bb      	cmpne	r3, r7
 8003c8a:	d003      	beq.n	8003c94 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8003c8c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003c90:	42b3      	cmp	r3, r6
 8003c92:	d104      	bne.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x216>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c94:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c98:	696e      	ldr	r6, [r5, #20]
 8003c9a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8003c9e:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8003ca0:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003ca2:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8003ca4:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8003ca6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ca8:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003caa:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003cac:	f041 0108 	orr.w	r1, r1, #8
 8003cb0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cb2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cb4:	f021 0104 	bic.w	r1, r1, #4
 8003cb8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cbc:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8003cbe:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003cc2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003cc6:	e742      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 8003cc8:	2002      	movs	r0, #2
}
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40014000 	.word	0x40014000

08003cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d042      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	4602      	mov	r2, r0
 8003cde:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce0:	6813      	ldr	r3, [r2, #0]
{
 8003ce2:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ce4:	4d20      	ldr	r5, [pc, #128]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cea:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8003cec:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003cee:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cf0:	d020      	beq.n	8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003cf2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003cf6:	42ab      	cmp	r3, r5
 8003cf8:	d01c      	beq.n	8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	4d1c      	ldr	r5, [pc, #112]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cfc:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d00:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d02:	42ab      	cmp	r3, r5
 8003d04:	bf18      	it	ne
 8003d06:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003d0a:	4f19      	ldr	r7, [pc, #100]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d0c:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d10:	4e18      	ldr	r6, [pc, #96]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003d12:	bf0c      	ite	eq
 8003d14:	2501      	moveq	r5, #1
 8003d16:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8003d18:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1a:	42bb      	cmp	r3, r7
 8003d1c:	bf08      	it	eq
 8003d1e:	f045 0501 	orreq.w	r5, r5, #1
 8003d22:	42b3      	cmp	r3, r6
 8003d24:	bf08      	it	eq
 8003d26:	f045 0501 	orreq.w	r5, r5, #1
 8003d2a:	b965      	cbnz	r5, 8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d2c:	4812      	ldr	r0, [pc, #72]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003d2e:	4283      	cmp	r3, r0
 8003d30:	d009      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d32:	e00d      	b.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d34:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d38:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d3c:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d3e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d42:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8003d44:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d46:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d48:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d4e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003d50:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d52:	2101      	movs	r1, #1

  return HAL_OK;
 8003d54:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003d56:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d5a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003d5e:	bcf0      	pop	{r4, r5, r6, r7}
 8003d60:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003d62:	2002      	movs	r0, #2
}
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40001800 	.word	0x40001800

08003d7c <HAL_TIMEx_CommutCallback>:
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop

08003d80 <HAL_TIMEx_BreakCallback>:
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop

08003d84 <HAL_TIMEx_Break2Callback>:
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop

08003d88 <MX_ADC1_Init>:
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003d88:	4827      	ldr	r0, [pc, #156]	; (8003e28 <MX_ADC1_Init+0xa0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc1.Instance = ADC1;
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <MX_ADC1_Init+0xa4>)
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 1;
 8003d90:	2201      	movs	r2, #1
{
 8003d92:	b5f0      	push	{r4, r5, r6, r7, lr}
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003d94:	f44f 2580 	mov.w	r5, #262144	; 0x40000
{
 8003d98:	b08d      	sub	sp, #52	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d9a:	2404      	movs	r4, #4
  hadc1.Instance = ADC1;
 8003d9c:	6003      	str	r3, [r0, #0]
  ADC_MultiModeTypeDef multimode = {0};
 8003d9e:	2300      	movs	r3, #0
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003da0:	8281      	strh	r1, [r0, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003da2:	6045      	str	r5, [r0, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003da4:	6104      	str	r4, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
 8003da6:	6182      	str	r2, [r0, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8003da8:	6083      	str	r3, [r0, #8]
  ADC_MultiModeTypeDef multimode = {0};
 8003daa:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003dac:	9304      	str	r3, [sp, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003dae:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003db0:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003db2:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003db4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003db8:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003dbc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8003dc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003dc4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003dc8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003dcc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003dd0:	f7fc fe56 	bl	8000a80 <HAL_ADC_Init>
 8003dd4:	b9e8      	cbnz	r0, 8003e12 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003dd6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003dd8:	a901      	add	r1, sp, #4
 8003dda:	4813      	ldr	r0, [pc, #76]	; (8003e28 <MX_ADC1_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003ddc:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003dde:	f7fc ff5b 	bl	8000c98 <HAL_ADCEx_MultiModeConfigChannel>
 8003de2:	b9e8      	cbnz	r0, 8003e20 <MX_ADC1_Init+0x98>
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
 8003de4:	2000      	movs	r0, #0
  sConfig.Channel = ADC_CHANNEL_2;
 8003de6:	4e12      	ldr	r6, [pc, #72]	; (8003e30 <MX_ADC1_Init+0xa8>)
 8003de8:	2706      	movs	r7, #6
 8003dea:	2400      	movs	r4, #0
 8003dec:	f240 75ff 	movw	r5, #2047	; 0x7ff
 8003df0:	2204      	movs	r2, #4
 8003df2:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
 8003df4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003df8:	a904      	add	r1, sp, #16
 8003dfa:	480b      	ldr	r0, [pc, #44]	; (8003e28 <MX_ADC1_Init+0xa0>)
  sConfig.Channel = ADC_CHANNEL_2;
 8003dfc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e00:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e04:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e08:	f7fc faf0 	bl	80003ec <HAL_ADC_ConfigChannel>
 8003e0c:	b920      	cbnz	r0, 8003e18 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e0e:	b00d      	add	sp, #52	; 0x34
 8003e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003e12:	f000 fcbb 	bl	800478c <Error_Handler>
 8003e16:	e7de      	b.n	8003dd6 <MX_ADC1_Init+0x4e>
    Error_Handler();
 8003e18:	f000 fcb8 	bl	800478c <Error_Handler>
}
 8003e1c:	b00d      	add	sp, #52	; 0x34
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003e20:	f000 fcb4 	bl	800478c <Error_Handler>
 8003e24:	e7de      	b.n	8003de4 <MX_ADC1_Init+0x5c>
 8003e26:	bf00      	nop
 8003e28:	24000170 	.word	0x24000170
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	08600004 	.word	0x08600004

08003e34 <MX_ADC3_Init>:

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e34:	2300      	movs	r3, #0
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8003e36:	481f      	ldr	r0, [pc, #124]	; (8003eb4 <MX_ADC3_Init+0x80>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e38:	2104      	movs	r1, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8003e3a:	2201      	movs	r2, #1
{
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003e3e:	f44f 2480 	mov.w	r4, #262144	; 0x40000
{
 8003e42:	b089      	sub	sp, #36	; 0x24
  hadc3.Instance = ADC3;
 8003e44:	4d1c      	ldr	r5, [pc, #112]	; (8003eb8 <MX_ADC3_Init+0x84>)
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003e46:	8283      	strh	r3, [r0, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e48:	6101      	str	r1, [r0, #16]
  hadc3.Init.NbrOfConversion = 1;
 8003e4a:	6182      	str	r2, [r0, #24]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8003e4c:	6083      	str	r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003e4e:	9300      	str	r3, [sp, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e50:	60c3      	str	r3, [r0, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003e52:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003e54:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8003e56:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003e5a:	e9c0 5400 	strd	r5, r4, [r0]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e5e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003e62:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8003e66:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003e6a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003e6e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003e72:	f7fc fe05 	bl	8000a80 <HAL_ADC_Init>
 8003e76:	b9b0      	cbnz	r0, 8003ea6 <MX_ADC3_Init+0x72>
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
 8003e78:	2000      	movs	r0, #0
  sConfig.Channel = ADC_CHANNEL_1;
 8003e7a:	4e10      	ldr	r6, [pc, #64]	; (8003ebc <MX_ADC3_Init+0x88>)
 8003e7c:	2706      	movs	r7, #6
 8003e7e:	2400      	movs	r4, #0
 8003e80:	f240 75ff 	movw	r5, #2047	; 0x7ff
 8003e84:	2204      	movs	r2, #4
 8003e86:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
 8003e88:	f88d 0019 	strb.w	r0, [sp, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e8c:	4669      	mov	r1, sp
 8003e8e:	4809      	ldr	r0, [pc, #36]	; (8003eb4 <MX_ADC3_Init+0x80>)
  sConfig.Channel = ADC_CHANNEL_1;
 8003e90:	e9cd 6700 	strd	r6, r7, [sp]
 8003e94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003e98:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e9c:	f7fc faa6 	bl	80003ec <HAL_ADC_ConfigChannel>
 8003ea0:	b920      	cbnz	r0, 8003eac <MX_ADC3_Init+0x78>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003ea2:	b009      	add	sp, #36	; 0x24
 8003ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003ea6:	f000 fc71 	bl	800478c <Error_Handler>
 8003eaa:	e7e5      	b.n	8003e78 <MX_ADC3_Init+0x44>
    Error_Handler();
 8003eac:	f000 fc6e 	bl	800478c <Error_Handler>
}
 8003eb0:	b009      	add	sp, #36	; 0x24
 8003eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb4:	240001d4 	.word	0x240001d4
 8003eb8:	58026000 	.word	0x58026000
 8003ebc:	04300002 	.word	0x04300002

08003ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8003ec0:	492b      	ldr	r1, [pc, #172]	; (8003f70 <HAL_ADC_MspInit+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec2:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8003ec4:	6802      	ldr	r2, [r0, #0]
{
 8003ec6:	b570      	push	{r4, r5, r6, lr}
  if(adcHandle->Instance==ADC1)
 8003ec8:	428a      	cmp	r2, r1
{
 8003eca:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ed0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003ed4:	9308      	str	r3, [sp, #32]
  if(adcHandle->Instance==ADC1)
 8003ed6:	d004      	beq.n	8003ee2 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <HAL_ADC_MspInit+0xb4>)
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d026      	beq.n	8003f2c <HAL_ADC_MspInit+0x6c>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8003ede:	b00a      	add	sp, #40	; 0x28
 8003ee0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ee2:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <HAL_ADC_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ee4:	a904      	add	r1, sp, #16
 8003ee6:	4825      	ldr	r0, [pc, #148]	; (8003f7c <HAL_ADC_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ee8:	f44f 6400 	mov.w	r4, #2048	; 0x800
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003eec:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ef0:	2503      	movs	r5, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ef2:	f046 0620 	orr.w	r6, r6, #32
 8003ef6:	f8c2 60d8 	str.w	r6, [r2, #216]	; 0xd8
 8003efa:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 8003efe:	f006 0620 	and.w	r6, r6, #32
 8003f02:	9600      	str	r6, [sp, #0]
 8003f04:	9e00      	ldr	r6, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f06:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
 8003f0a:	f046 0620 	orr.w	r6, r6, #32
 8003f0e:	f8c2 60e0 	str.w	r6, [r2, #224]	; 0xe0
 8003f12:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f18:	f002 0220 	and.w	r2, r2, #32
 8003f1c:	9201      	str	r2, [sp, #4]
 8003f1e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f20:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f24:	f7fd f854 	bl	8000fd0 <HAL_GPIO_Init>
}
 8003f28:	b00a      	add	sp, #40	; 0x28
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003f2c:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003f30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003f34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003f38:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003f3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f46:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003f4a:	9202      	str	r2, [sp, #8]
 8003f4c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f52:	f042 0204 	orr.w	r2, r2, #4
 8003f56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	9303      	str	r3, [sp, #12]
 8003f64:	9b03      	ldr	r3, [sp, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003f66:	f7fc fa37 	bl	80003d8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8003f6a:	b00a      	add	sp, #40	; 0x28
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	bf00      	nop
 8003f70:	40022000 	.word	0x40022000
 8003f74:	58026000 	.word	0x58026000
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	58021400 	.word	0x58021400

08003f80 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f82:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003f84:	2224      	movs	r2, #36	; 0x24
 8003f86:	2100      	movs	r1, #0
 8003f88:	4668      	mov	r0, sp
 8003f8a:	f000 fe53 	bl	8004c34 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003f8e:	4813      	ldr	r0, [pc, #76]	; (8003fdc <MX_DAC1_Init+0x5c>)
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <MX_DAC1_Init+0x60>)
 8003f92:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003f94:	f7fc ff5c 	bl	8000e50 <HAL_DAC_Init>
 8003f98:	b9b0      	cbnz	r0, 8003fc8 <MX_DAC1_Init+0x48>
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003f9a:	2200      	movs	r2, #0
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	270a      	movs	r7, #10
 8003fa0:	2400      	movs	r4, #0
 8003fa2:	2501      	movs	r5, #1
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003fa4:	4669      	mov	r1, sp
 8003fa6:	480d      	ldr	r0, [pc, #52]	; (8003fdc <MX_DAC1_Init+0x5c>)
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003fa8:	9204      	str	r2, [sp, #16]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003faa:	e9cd 6700 	strd	r6, r7, [sp]
 8003fae:	e9cd 4502 	strd	r4, r5, [sp, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003fb2:	f7fc ff63 	bl	8000e7c <HAL_DAC_ConfigChannel>
 8003fb6:	b970      	cbnz	r0, 8003fd6 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003fb8:	4669      	mov	r1, sp
 8003fba:	2210      	movs	r2, #16
 8003fbc:	4807      	ldr	r0, [pc, #28]	; (8003fdc <MX_DAC1_Init+0x5c>)
 8003fbe:	f7fc ff5d 	bl	8000e7c <HAL_DAC_ConfigChannel>
 8003fc2:	b920      	cbnz	r0, 8003fce <MX_DAC1_Init+0x4e>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003fc4:	b00b      	add	sp, #44	; 0x2c
 8003fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003fc8:	f000 fbe0 	bl	800478c <Error_Handler>
 8003fcc:	e7e5      	b.n	8003f9a <MX_DAC1_Init+0x1a>
    Error_Handler();
 8003fce:	f000 fbdd 	bl	800478c <Error_Handler>
}
 8003fd2:	b00b      	add	sp, #44	; 0x2c
 8003fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003fd6:	f000 fbd9 	bl	800478c <Error_Handler>
 8003fda:	e7ed      	b.n	8003fb8 <MX_DAC1_Init+0x38>
 8003fdc:	24000318 	.word	0x24000318
 8003fe0:	40007400 	.word	0x40007400

08003fe4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_DAC_MspInit+0x64>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe6:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 8003fe8:	6801      	ldr	r1, [r0, #0]
{
 8003fea:	b570      	push	{r4, r5, r6, lr}
  if(dacHandle->Instance==DAC1)
 8003fec:	4291      	cmp	r1, r2
{
 8003fee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ff4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ff8:	9306      	str	r3, [sp, #24]
  if(dacHandle->Instance==DAC1)
 8003ffa:	d001      	beq.n	8004000 <HAL_DAC_MspInit+0x1c>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003ffc:	b008      	add	sp, #32
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8004000:	4a12      	ldr	r2, [pc, #72]	; (800404c <HAL_DAC_MspInit+0x68>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004002:	a902      	add	r1, sp, #8
 8004004:	4812      	ldr	r0, [pc, #72]	; (8004050 <HAL_DAC_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004006:	2430      	movs	r4, #48	; 0x30
    __HAL_RCC_DAC12_CLK_ENABLE();
 8004008:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800400c:	2503      	movs	r5, #3
    __HAL_RCC_DAC12_CLK_ENABLE();
 800400e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8004012:	f8c2 60e8 	str.w	r6, [r2, #232]	; 0xe8
 8004016:	f8d2 60e8 	ldr.w	r6, [r2, #232]	; 0xe8
 800401a:	f006 5600 	and.w	r6, r6, #536870912	; 0x20000000
 800401e:	9600      	str	r6, [sp, #0]
 8004020:	9e00      	ldr	r6, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004022:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
 8004026:	f046 0601 	orr.w	r6, r6, #1
 800402a:	f8c2 60e0 	str.w	r6, [r2, #224]	; 0xe0
 800402e:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004032:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004034:	f002 0201 	and.w	r2, r2, #1
 8004038:	9201      	str	r2, [sp, #4]
 800403a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800403c:	e9cd 4502 	strd	r4, r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004040:	f7fc ffc6 	bl	8000fd0 <HAL_GPIO_Init>
}
 8004044:	b008      	add	sp, #32
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	40007400 	.word	0x40007400
 800404c:	58024400 	.word	0x58024400
 8004050:	58020000 	.word	0x58020000

08004054 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004058:	4b84      	ldr	r3, [pc, #528]	; (800426c <MX_GPIO_Init+0x218>)
{
 800405a:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800405e:	2102      	movs	r1, #2
 8004060:	4d83      	ldr	r5, [pc, #524]	; (8004270 <MX_GPIO_Init+0x21c>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004062:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004066:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004068:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800406c:	4628      	mov	r0, r5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004070:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8004074:	4f7f      	ldr	r7, [pc, #508]	; (8004274 <MX_GPIO_Init+0x220>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004076:	f04f 0800 	mov.w	r8, #0
 800407a:	f04f 0900 	mov.w	r9, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004082:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8004086:	f046 0610 	orr.w	r6, r6, #16
 800408a:	f8c3 60e0 	str.w	r6, [r3, #224]	; 0xe0
 800408e:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8004092:	f006 0c10 	and.w	ip, r6, #16
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8004096:	4e78      	ldr	r6, [pc, #480]	; (8004278 <MX_GPIO_Init+0x224>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004098:	f8cd c000 	str.w	ip, [sp]
 800409c:	f8dd c000 	ldr.w	ip, [sp]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a0:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80040a4:	f04c 0c04 	orr.w	ip, ip, #4
 80040a8:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80040ac:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80040b0:	f00c 0c04 	and.w	ip, ip, #4
 80040b4:	f8cd c004 	str.w	ip, [sp, #4]
 80040b8:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040bc:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80040c0:	f04c 0c20 	orr.w	ip, ip, #32
 80040c4:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80040c8:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80040cc:	f00c 0c20 	and.w	ip, ip, #32
 80040d0:	f8cd c008 	str.w	ip, [sp, #8]
 80040d4:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040d8:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80040dc:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80040e0:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 80040e4:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80040e8:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 80040ec:	f8cd c00c 	str.w	ip, [sp, #12]
 80040f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040f4:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 80040f8:	f04c 0c01 	orr.w	ip, ip, #1
 80040fc:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8004100:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8004104:	f00c 0c01 	and.w	ip, ip, #1
 8004108:	f8cd c010 	str.w	ip, [sp, #16]
 800410c:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004110:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8004114:	ea4c 0c01 	orr.w	ip, ip, r1
 8004118:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 800411c:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8004120:	ea0c 0c01 	and.w	ip, ip, r1
 8004124:	f8cd c014 	str.w	ip, [sp, #20]
 8004128:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800412c:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 8004130:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8004134:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8004138:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800413c:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8004140:	f8cd c018 	str.w	ip, [sp, #24]
 8004144:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004148:	f8d3 c0e0 	ldr.w	ip, [r3, #224]	; 0xe0
 800414c:	f04c 0c08 	orr.w	ip, ip, #8
 8004150:	f8c3 c0e0 	str.w	ip, [r3, #224]	; 0xe0
 8004154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	9307      	str	r3, [sp, #28]
 800415e:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004160:	f7fd f854 	bl	800120c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8004164:	4622      	mov	r2, r4
 8004166:	4638      	mov	r0, r7
 8004168:	2101      	movs	r1, #1
 800416a:	f7fd f84f 	bl	800120c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 800416e:	4630      	mov	r0, r6
 8004170:	2201      	movs	r2, #1
 8004172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004176:	f7fd f849 	bl	800120c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800417a:	4628      	mov	r0, r5
 800417c:	2201      	movs	r2, #1
 800417e:	2110      	movs	r1, #16
 8004180:	f7fd f844 	bl	800120c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004184:	f64a 32ff 	movw	r2, #44031	; 0xabff
 8004188:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800418a:	a908      	add	r1, sp, #32
 800418c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004190:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004194:	f7fc ff1c 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8004198:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800419c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419e:	a908      	add	r1, sp, #32
 80041a0:	4836      	ldr	r0, [pc, #216]	; (800427c <MX_GPIO_Init+0x228>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80041a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a8:	f7fc ff12 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80041ac:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 80041b0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041b2:	a908      	add	r1, sp, #32
 80041b4:	4832      	ldr	r0, [pc, #200]	; (8004280 <MX_GPIO_Init+0x22c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80041b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041bc:	f7fc ff08 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80041c0:	f649 72ce 	movw	r2, #40910	; 0x9fce
 80041c4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c6:	a908      	add	r1, sp, #32
 80041c8:	482e      	ldr	r0, [pc, #184]	; (8004284 <MX_GPIO_Init+0x230>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80041cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d0:	f7fc fefe 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80041d4:	f64f 72c5 	movw	r2, #65477	; 0xffc5
 80041d8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041da:	a908      	add	r1, sp, #32
 80041dc:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80041e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e4:	f7fc fef4 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041e8:	2202      	movs	r2, #2
 80041ea:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ec:	a908      	add	r1, sp, #32
 80041ee:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80041f4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f8:	f7fc feea 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041fc:	2201      	movs	r2, #1
 80041fe:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004200:	a908      	add	r1, sp, #32
 8004202:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004204:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004208:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800420c:	f7fc fee0 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 PG7 PG8
                           PG9 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8004210:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004214:	2303      	movs	r3, #3
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004216:	4638      	mov	r0, r7
 8004218:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800421c:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800421e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004222:	f7fc fed5 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800422a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800422c:	4630      	mov	r0, r6
 800422e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004230:	2610      	movs	r6, #16
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004232:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004236:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800423a:	f7fc fec9 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800423e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004242:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004244:	a908      	add	r1, sp, #32
 8004246:	4810      	ldr	r0, [pc, #64]	; (8004288 <MX_GPIO_Init+0x234>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800424a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800424e:	f7fc febf 	bl	8000fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004252:	2200      	movs	r2, #0
 8004254:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004256:	a908      	add	r1, sp, #32
 8004258:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800425a:	e9cd 6708 	strd	r6, r7, [sp, #32]
 800425e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004262:	f7fc feb5 	bl	8000fd0 <HAL_GPIO_Init>

}
 8004266:	b00f      	add	sp, #60	; 0x3c
 8004268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426c:	58024400 	.word	0x58024400
 8004270:	58020400 	.word	0x58020400
 8004274:	58021800 	.word	0x58021800
 8004278:	58021000 	.word	0x58021000
 800427c:	58020800 	.word	0x58020800
 8004280:	58021400 	.word	0x58021400
 8004284:	58020000 	.word	0x58020000
 8004288:	58020c00 	.word	0x58020c00
 800428c:	00000000 	.word	0x00000000

08004290 <PID_vInit>:
				PIDInput =ADCvalue;
			}
	 return(PIDInput);
}
void PID_vInit(tPID* pPID)
{                                          ///< Zeiger auf Reglerstruktur
 8004290:	b4f0      	push	{r4, r5, r6, r7}
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
	pPID-> _Kp				= 		1;
	pPID-> _Ki				= 		0;
	pPID-> _Kd				= 		0.0;
	pPID-> _max				= 		3;
 8004292:	2400      	movs	r4, #0
 8004294:	4d20      	ldr	r5, [pc, #128]	; (8004318 <PID_vInit+0x88>)
	pPID-> _min				= 		-3;
 8004296:	2200      	movs	r2, #0
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <PID_vInit+0x8c>)
	pPID-> _Kaw				= 		0.0;
	pPID-> _EnKc			= 		1;
 800429a:	2101      	movs	r1, #1
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 800429c:	a71c      	add	r7, pc, #112	; (adr r7, 8004310 <PID_vInit+0x80>)
 800429e:	e9d7 6700 	ldrd	r6, r7, [r7]
	pPID-> _max				= 		3;
 80042a2:	e9c0 4508 	strd	r4, r5, [r0, #32]
	pPID-> _fc				= 		10;
 80042a6:	2400      	movs	r4, #0
 80042a8:	4d1d      	ldr	r5, [pc, #116]	; (8004320 <PID_vInit+0x90>)
	pPID-> _EnKc			= 		1;
 80042aa:	6381      	str	r1, [r0, #56]	; 0x38
	pPID->error_1lag        =        0;
	pPID->error_2lag        =        0;
	pPID->error_AnWi        =        0;
	pPID->preout            =        0;
	pPID->_kt               =        -1;
	pPID->En                =        1.0;
 80042ac:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 80042b0:	e9c0 6700 	strd	r6, r7, [r0]
	pPID-> _min				= 		-3;
 80042b4:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	pPID-> _Kp				= 		1;
 80042b8:	2600      	movs	r6, #0
	pPID-> _Ki				= 		0;
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
	pPID-> _Kp				= 		1;
 80042be:	4f19      	ldr	r7, [pc, #100]	; (8004324 <PID_vInit+0x94>)
	pPID-> _fc				= 		10;
 80042c0:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
	pPID->_kt               =        -1;
 80042c4:	2400      	movs	r4, #0
 80042c6:	4d18      	ldr	r5, [pc, #96]	; (8004328 <PID_vInit+0x98>)
	pPID-> _Kp				= 		1;
 80042c8:	e9c0 6702 	strd	r6, r7, [r0, #8]
	pPID->a0                =        0.0;
	pPID->a1 				= 		0.0;
	pPID->a2      			= 		0.0;
	pPID->aw				=		0.0;
	pPID->omega 			=		0;
	pPID->a0 				= 		pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts+pPID->_Ki*V2MV*pPID->_Ts;
 80042cc:	e9c0 6724 	strd	r6, r7, [r0, #144]	; 0x90
	pPID->_kt               =        -1;
 80042d0:	e9c0 451e 	strd	r4, r5, [r0, #120]	; 0x78
	pPID->a1 				= 		-(pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts*2.0);
 80042d4:	e9c0 4526 	strd	r4, r5, [r0, #152]	; 0x98
	pPID-> _Ki				= 		0;
 80042d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
	pPID->a2 				=		pPID->_Kd/V2MUV/pPID->_Ts;
	pPID->aw   				=		pPID->_Kaw*pPID->_Ts;
};
 80042dc:	bcf0      	pop	{r4, r5, r6, r7}
	pPID-> _Kd				= 		0.0;
 80042de:	e9c0 2306 	strd	r2, r3, [r0, #24]
	pPID-> _Kaw				= 		0.0;
 80042e2:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    pPID-> _PIDHold			= 		0.0;
 80042e6:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	pPID->error             =        0;
 80042ea:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	pPID->error_1lag        =        0;
 80042ee:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	pPID->error_2lag        =        0;
 80042f2:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
	pPID->error_AnWi        =        0;
 80042f6:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	pPID->preout            =        0;
 80042fa:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
	pPID->ref               =       0.0;
 80042fe:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
	pPID->a2      			= 		0.0;
 8004302:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
	pPID->aw				=		0.0;
 8004306:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
	pPID->omega 			=		0;
 800430a:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
};
 800430e:	4770      	bx	lr
 8004310:	88e368f1 	.word	0x88e368f1
 8004314:	3ed4f8b5 	.word	0x3ed4f8b5
 8004318:	40080000 	.word	0x40080000
 800431c:	c0080000 	.word	0xc0080000
 8004320:	40240000 	.word	0x40240000
 8004324:	3ff00000 	.word	0x3ff00000
 8004328:	bff00000 	.word	0xbff00000

0800432c <SPI1_start>:
//   tty3 =Kd/pPID->_Ts;
	pPID->outvalue= outputsat;
}
void SPI1_start()
{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800432c:	2201      	movs	r2, #1
 800432e:	2110      	movs	r1, #16
 8004330:	4806      	ldr	r0, [pc, #24]	; (800434c <SPI1_start+0x20>)
{
 8004332:	b508      	push	{r3, lr}
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004334:	f7fc ff6a 	bl	800120c <HAL_GPIO_WritePin>
	  SPI1->CR1 |= SPI_CR1_SPE_Msk;    // enable SPI
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <SPI1_start+0x24>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
	  SPI1->CR1 |= SPI_CR1_CSTART_Msk; // master transfer start
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004348:	601a      	str	r2, [r3, #0]

}
 800434a:	bd08      	pop	{r3, pc}
 800434c:	58020400 	.word	0x58020400
 8004350:	40013000 	.word	0x40013000
 8004354:	00000000 	.word	0x00000000

08004358 <HAL_TIM_PeriodElapsedCallback>:

//	  DACOut=(uint32_t)(2.0/(3.3/65536));

}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_0);
 800435a:	2101      	movs	r1, #1
 800435c:	4880      	ldr	r0, [pc, #512]	; (8004560 <HAL_TIM_PeriodElapsedCallback+0x208>)

		//HAL_GPIO_WritePin(GPIOG,GPIO_PIN_0,GPIO_PIN_SET);
		SPI_Anf =DWT->CYCCNT;
		SPI1_transmit(DACoutput1);
 800435e:	4e81      	ldr	r6, [pc, #516]	; (8004564 <HAL_TIM_PeriodElapsedCallback+0x20c>)
{
 8004360:	ed2d 8b02 	vpush	{d8}
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_0);
 8004364:	f7fc ff56 	bl	8001214 <HAL_GPIO_TogglePin>
		SPI_Anf =DWT->CYCCNT;
 8004368:	4b7f      	ldr	r3, [pc, #508]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800436a:	4980      	ldr	r1, [pc, #512]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x214>)
    GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 800436c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
		SPI_Anf =DWT->CYCCNT;
 8004370:	685c      	ldr	r4, [r3, #4]
    GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 8004372:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x218>)
    *ptxdr_16bits = data;
 8004374:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x21c>)
		SPI_Anf =DWT->CYCCNT;
 8004376:	600c      	str	r4, [r1, #0]
    *ptxdr_16bits = data;
 8004378:	681b      	ldr	r3, [r3, #0]
		SPI1_transmit(DACoutput1);
 800437a:	8831      	ldrh	r1, [r6, #0]
    GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 800437c:	6190      	str	r0, [r2, #24]
    while( !(SPI1->SR & SPI_SR_TXC_Msk));  // check if FiFo transmission complete
 800437e:	4a7e      	ldr	r2, [pc, #504]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x220>)
    *ptxdr_16bits = data;
 8004380:	8019      	strh	r1, [r3, #0]
    while( !(SPI1->SR & SPI_SR_TXC_Msk));  // check if FiFo transmission complete
 8004382:	6953      	ldr	r3, [r2, #20]
 8004384:	04d9      	lsls	r1, r3, #19
 8004386:	d5fc      	bpl.n	8004382 <HAL_TIM_PeriodElapsedCallback+0x2a>
    GPIOB->BSRR = GPIO_PIN_4; // Set
 8004388:	4b79      	ldr	r3, [pc, #484]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800438a:	2210      	movs	r2, #16
		PT_Anf =PT_End;
 800438c:	4d7b      	ldr	r5, [pc, #492]	; (800457c <HAL_TIM_PeriodElapsedCallback+0x224>)
    GPIOB->BSRR = GPIO_PIN_4; // Set
 800438e:	619a      	str	r2, [r3, #24]
		PT_Anf =PT_End;
 8004390:	4a7b      	ldr	r2, [pc, #492]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8004392:	6828      	ldr	r0, [r5, #0]
		SPI_End =DWT->CYCCNT;
 8004394:	4b74      	ldr	r3, [pc, #464]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x210>)
		PT_Anf =PT_End;
 8004396:	6010      	str	r0, [r2, #0]
		SPI_End =DWT->CYCCNT;
 8004398:	497a      	ldr	r1, [pc, #488]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800439a:	685a      	ldr	r2, [r3, #4]
	 ADC1->ISR |=ADC_ISR_EOC_Msk;
 800439c:	4b7a      	ldr	r3, [pc, #488]	; (8004588 <HAL_TIM_PeriodElapsedCallback+0x230>)
		SPI_End =DWT->CYCCNT;
 800439e:	600a      	str	r2, [r1, #0]
	 ADC1->ISR |=ADC_ISR_EOC_Msk;
 80043a0:	681f      	ldr	r7, [r3, #0]
	 while ((ADC1->ISR  & ADC_ISR_EOC_Msk) == 0UL);
 80043a2:	4619      	mov	r1, r3
	 ADC1->ISR |=ADC_ISR_EOC_Msk;
 80043a4:	f047 0704 	orr.w	r7, r7, #4
 80043a8:	601f      	str	r7, [r3, #0]
	 ADC1->CR |=ADC_CR_ADSTART_Msk;
 80043aa:	689f      	ldr	r7, [r3, #8]
 80043ac:	f047 0704 	orr.w	r7, r7, #4
 80043b0:	609f      	str	r7, [r3, #8]
	 while ((ADC1->ISR  & ADC_ISR_EOC_Msk) == 0UL);
 80043b2:	680b      	ldr	r3, [r1, #0]
 80043b4:	075b      	lsls	r3, r3, #29
 80043b6:	d5fc      	bpl.n	80043b2 <HAL_TIM_PeriodElapsedCallback+0x5a>
	 adc_value =ADC1->DR;
 80043b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		adc_value=ADC_read(&hadc1);
 80043ba:	4f74      	ldr	r7, [pc, #464]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x234>)
		ADC_End =DWT->CYCCNT;
		volt_value = DIG2WOLT*(float)(adc_value);
 80043bc:	ee07 3a90 	vmov	s15, r3
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 80043c0:	4973      	ldr	r1, [pc, #460]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x238>)
		adc_value=ADC_read(&hadc1);
 80043c2:	603b      	str	r3, [r7, #0]
		volt_value = DIG2WOLT*(float)(adc_value);
 80043c4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 80043c8:	4f72      	ldr	r7, [pc, #456]	; (8004594 <HAL_TIM_PeriodElapsedCallback+0x23c>)
	 if (PIDInputOption == 0)
 80043ca:	7809      	ldrb	r1, [r1, #0]
		ADC_End =DWT->CYCCNT;
 80043cc:	4b66      	ldr	r3, [pc, #408]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x210>)
		volt_value = DIG2WOLT*(float)(adc_value);
 80043ce:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	 if (PIDInputOption == 0)
 80043d2:	2900      	cmp	r1, #0
		ADC_End =DWT->CYCCNT;
 80043d4:	6859      	ldr	r1, [r3, #4]
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 80043d6:	4b70      	ldr	r3, [pc, #448]	; (8004598 <HAL_TIM_PeriodElapsedCallback+0x240>)
		volt_value = DIG2WOLT*(float)(adc_value);
 80043d8:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80045b0 <HAL_TIM_PeriodElapsedCallback+0x258>
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 80043dc:	681b      	ldr	r3, [r3, #0]
		volt_value = DIG2WOLT*(float)(adc_value);
 80043de:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8004540 <HAL_TIM_PeriodElapsedCallback+0x1e8>
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 80043e2:	ed97 7b00 	vldr	d7, [r7]
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 80043e6:	ed93 2b1e 	vldr	d2, [r3, #120]	; 0x78
		volt_value = DIG2WOLT*(float)(adc_value);
 80043ea:	ee26 6b05 	vmul.f64	d6, d6, d5
		ADC_End =DWT->CYCCNT;
 80043ee:	4f6b      	ldr	r7, [pc, #428]	; (800459c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80043f0:	6039      	str	r1, [r7, #0]
	if (pPID->En>=1)
 80043f2:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 80043f6:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
	 if (PIDInputOption == 0)
 80043fa:	fe07 7b06 	vseleq.f64	d7, d7, d6
	pd          				= 	PIDInputSWitch(PIDInputOption, ADCvalue, LockIn);
 80043fe:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	if (pPID->En>=1)
 8004402:	2f00      	cmp	r7, #0
	pd          				= 	PIDInputSWitch(PIDInputOption, ADCvalue, LockIn);
 8004404:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		volt_value = DIG2WOLT*(float)(adc_value);
 8004408:	ed8c 6b00 	vstr	d6, [ip]
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 800440c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004410:	ee27 2b02 	vmul.f64	d2, d7, d2
 8004414:	ed83 2b18 	vstr	d2, [r3, #96]	; 0x60
	if (pPID->En>=1)
 8004418:	f340 8085 	ble.w	8004526 <HAL_TIM_PeriodElapsedCallback+0x1ce>
		output = (pPID->preout+pPID->a0*pPID->error + pPID->a1*pPID->error_1lag + pPID->a2*pPID->error_2lag+pPID->aw*pPID->error_AnWi)/(1+pPID->omega*pPID->_Ts);
 800441c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004420:	ed93 6b28 	vldr	d6, [r3, #160]	; 0xa0
 8004424:	ed93 8b1c 	vldr	d8, [r3, #112]	; 0x70
 8004428:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800442c:	ed93 1b1a 	vldr	d1, [r3, #104]	; 0x68
 8004430:	ee26 8b08 	vmul.f64	d8, d6, d8
 8004434:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8004438:	ed93 4b2a 	vldr	d4, [r3, #168]	; 0xa8
 800443c:	eea7 8b01 	vfma.f64	d8, d7, d1
 8004440:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8004444:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8004448:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800444c:	ee38 3b03 	vadd.f64	d3, d8, d3
 8004450:	eea4 3b05 	vfma.f64	d3, d4, d5
 8004454:	ed93 5b00 	vldr	d5, [r3]
 8004458:	eea6 0b05 	vfma.f64	d0, d6, d5
 800445c:	eea2 3b07 	vfma.f64	d3, d2, d7
 8004460:	ee83 4b00 	vdiv.f64	d4, d3, d0
	if( output > pPID->_max )
 8004464:	ed93 3b08 	vldr	d3, [r3, #32]
	pPID->preout = output;
 8004468:	ed83 4b20 	vstr	d4, [r3, #128]	; 0x80
	if( output > pPID->_max )
 800446c:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8004470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004474:	dc03      	bgt.n	800447e <HAL_TIM_PeriodElapsedCallback+0x126>
	else if( output < pPID->_min )
 8004476:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800447a:	fe84 3b03 	vmaxnm.f64	d3, d4, d3
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 800447e:	f8df c134 	ldr.w	ip, [pc, #308]	; 80045b4 <HAL_TIM_PeriodElapsedCallback+0x25c>
	pPID->error_AnWi              =   outputsat-output;
 8004482:	ee33 4b44 	vsub.f64	d4, d3, d4
		PID_End=DWT->CYCCNT;
		PID_duration =(PID_End-ADC_End)*0.0025;
		ADC_duration = (ADC_End-SPI_End)*0.0025;
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 8004486:	1b14      	subs	r4, r2, r4
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 8004488:	1a8a      	subs	r2, r1, r2
		PID_End=DWT->CYCCNT;
 800448a:	f8df e12c 	ldr.w	lr, [pc, #300]	; 80045b8 <HAL_TIM_PeriodElapsedCallback+0x260>
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 800448e:	ee07 4a90 	vmov	s15, r4
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 8004492:	ee07 2a10 	vmov	s14, r2
		PID_End=DWT->CYCCNT;
 8004496:	4a34      	ldr	r2, [pc, #208]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x210>)
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 8004498:	eeb8 6b67 	vcvt.f64.u32	d6, s15
		PID_duration =(PID_End-ADC_End)*0.0025;
 800449c:	4f40      	ldr	r7, [pc, #256]	; (80045a0 <HAL_TIM_PeriodElapsedCallback+0x248>)
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 800449e:	eeb8 7b47 	vcvt.f64.u32	d7, s14
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 80044a2:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8004548 <HAL_TIM_PeriodElapsedCallback+0x1f0>
	pPID->outvalue= outputsat;
 80044a6:	ed83 3b2e 	vstr	d3, [r3, #184]	; 0xb8
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 80044aa:	ed9c 3b2e 	vldr	d3, [ip, #184]	; 0xb8
	pPID->error_AnWi              =   outputsat-output;
 80044ae:	ed83 4b16 	vstr	d4, [r3, #88]	; 0x58
		PID_duration =(PID_End-ADC_End)*0.0025;
 80044b2:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8004550 <HAL_TIM_PeriodElapsedCallback+0x1f8>
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 80044b6:	ee23 4b00 	vmul.f64	d4, d3, d0
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 80044ba:	f8df c100 	ldr.w	ip, [pc, #256]	; 80045bc <HAL_TIM_PeriodElapsedCallback+0x264>
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 80044be:	ee26 3b05 	vmul.f64	d3, d6, d5
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 80044c2:	eebc 4bc4 	vcvt.u32.f64	s8, d4
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 80044c6:	ee27 7b05 	vmul.f64	d7, d7, d5
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG16BIT);
 80044ca:	ee14 4a10 	vmov	r4, s8
 80044ce:	8034      	strh	r4, [r6, #0]
		PID_End=DWT->CYCCNT;
 80044d0:	6854      	ldr	r4, [r2, #4]
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 80044d2:	4e34      	ldr	r6, [pc, #208]	; (80045a4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
		PID_duration =(PID_End-ADC_End)*0.0025;
 80044d4:	1a61      	subs	r1, r4, r1
		PID_End=DWT->CYCCNT;
 80044d6:	f8ce 4000 	str.w	r4, [lr]
		duration_sum =PID_duration+ADC_duration+SPI_duration;
		PT_End = DWT->CYCCNT;
 80044da:	6852      	ldr	r2, [r2, #4]
		PID_duration =(PID_End-ADC_End)*0.0025;
 80044dc:	ee06 1a10 	vmov	s12, r1
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 80044e0:	4c31      	ldr	r4, [pc, #196]	; (80045a8 <HAL_TIM_PeriodElapsedCallback+0x250>)
		duration = (PT_End-PT_Anf)*0.0025;
 80044e2:	1a10      	subs	r0, r2, r0
 80044e4:	4931      	ldr	r1, [pc, #196]	; (80045ac <HAL_TIM_PeriodElapsedCallback+0x254>)
		PID_duration =(PID_End-ADC_End)*0.0025;
 80044e6:	eeb8 6b46 	vcvt.f64.u32	d6, s12
		PT_End = DWT->CYCCNT;
 80044ea:	602a      	str	r2, [r5, #0]
		ADC_duration = (ADC_End-SPI_End)*0.0025;
 80044ec:	ed8c 7b00 	vstr	d7, [ip]
		PID_duration =(PID_End-ADC_End)*0.0025;
 80044f0:	ee26 6b05 	vmul.f64	d6, d6, d5
		//HAL_GPIO_WritePin(GPIOG,GPIO_PIN_0,GPIO_PIN_RESET);
      //  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
}
 80044f4:	ecbd 8b02 	vpop	{d8}
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 80044f8:	ee36 7b07 	vadd.f64	d7, d6, d7
		SPI_duration = (SPI_End-SPI_Anf)*0.0025;
 80044fc:	ed86 3b00 	vstr	d3, [r6]
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 8004500:	ee37 7b03 	vadd.f64	d7, d7, d3
		PID_duration =(PID_End-ADC_End)*0.0025;
 8004504:	ed87 6b00 	vstr	d6, [r7]
		duration_sum =PID_duration+ADC_duration+SPI_duration;
 8004508:	ed84 7b00 	vstr	d7, [r4]
		duration = (PT_End-PT_Anf)*0.0025;
 800450c:	ee07 0a10 	vmov	s14, r0
 8004510:	eeb8 7b47 	vcvt.f64.u32	d7, s14
	pPID->error_2lag = pPID->error_1lag;
 8004514:	ed83 1b1c 	vstr	d1, [r3, #112]	; 0x70
		duration = (PT_End-PT_Anf)*0.0025;
 8004518:	ee27 7b05 	vmul.f64	d7, d7, d5
	pPID->error_1lag = pPID->error;
 800451c:	ed83 2b1a 	vstr	d2, [r3, #104]	; 0x68
		duration = (PT_End-PT_Anf)*0.0025;
 8004520:	ed81 7b00 	vstr	d7, [r1]
}
 8004524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pPID->error             =        0;
 8004526:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8004558 <HAL_TIM_PeriodElapsedCallback+0x200>
 800452a:	eeb0 2b47 	vmov.f64	d2, d7
 800452e:	eeb0 1b47 	vmov.f64	d1, d7
		output = 0;
 8004532:	eeb0 4b47 	vmov.f64	d4, d7
		pPID->error             =        0;
 8004536:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
		pPID->preout            =        0;
 800453a:	e793      	b.n	8004464 <HAL_TIM_PeriodElapsedCallback+0x10c>
 800453c:	f3af 8000 	nop.w
 8004540:	66666666 	.word	0x66666666
 8004544:	3f0a6666 	.word	0x3f0a6666
 8004548:	00000000 	.word	0x00000000
 800454c:	40d36500 	.word	0x40d36500
 8004550:	47ae147b 	.word	0x47ae147b
 8004554:	3f647ae1 	.word	0x3f647ae1
	...
 8004560:	58021800 	.word	0x58021800
 8004564:	2400035c 	.word	0x2400035c
 8004568:	e0001000 	.word	0xe0001000
 800456c:	24000068 	.word	0x24000068
 8004570:	58020400 	.word	0x58020400
 8004574:	24000010 	.word	0x24000010
 8004578:	40013000 	.word	0x40013000
 800457c:	24000064 	.word	0x24000064
 8004580:	24000060 	.word	0x24000060
 8004584:	2400006c 	.word	0x2400006c
 8004588:	40022000 	.word	0x40022000
 800458c:	24000078 	.word	0x24000078
 8004590:	24000008 	.word	0x24000008
 8004594:	24000048 	.word	0x24000048
 8004598:	2400000c 	.word	0x2400000c
 800459c:	2400003c 	.word	0x2400003c
 80045a0:	24000058 	.word	0x24000058
 80045a4:	24000070 	.word	0x24000070
 80045a8:	24000370 	.word	0x24000370
 80045ac:	24000080 	.word	0x24000080
 80045b0:	24000088 	.word	0x24000088
 80045b4:	24000238 	.word	0x24000238
 80045b8:	24000050 	.word	0x24000050
 80045bc:	24000040 	.word	0x24000040

080045c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c2:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045c4:	224c      	movs	r2, #76	; 0x4c
 80045c6:	2100      	movs	r1, #0
 80045c8:	a80a      	add	r0, sp, #40	; 0x28
 80045ca:	f000 fb33 	bl	8004c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045ce:	2220      	movs	r2, #32
 80045d0:	2100      	movs	r1, #0
 80045d2:	a802      	add	r0, sp, #8
 80045d4:	f000 fb2e 	bl	8004c34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80045d8:	2002      	movs	r0, #2
 80045da:	f7fc fe25 	bl	8001228 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045de:	4a2a      	ldr	r2, [pc, #168]	; (8004688 <SystemClock_Config+0xc8>)
 80045e0:	2300      	movs	r3, #0
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <SystemClock_Config+0xcc>)
 80045e8:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80045ec:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045ee:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045f2:	f002 0201 	and.w	r2, r2, #1
 80045f6:	9201      	str	r2, [sp, #4]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80045fe:	619a      	str	r2, [r3, #24]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800460a:	6983      	ldr	r3, [r0, #24]
 800460c:	049b      	lsls	r3, r3, #18
 800460e:	d5fc      	bpl.n	800460a <SystemClock_Config+0x4a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <SystemClock_Config+0xd0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004612:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004614:	f04f 0c01 	mov.w	ip, #1
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004618:	2564      	movs	r5, #100	; 0x64
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800461a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800461c:	210c      	movs	r1, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800461e:	2601      	movs	r6, #1
 8004620:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004624:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004628:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800462a:	4323      	orrs	r3, r4
 800462c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800462e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004630:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004632:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004634:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004638:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800463c:	e9cd c515 	strd	ip, r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004640:	e9cd 131a 	strd	r1, r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004644:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004648:	f7fc fe98 	bl	800137c <HAL_RCC_OscConfig>
 800464c:	b108      	cbz	r0, 8004652 <SystemClock_Config+0x92>
  __ASM volatile ("cpsid i" : : : "memory");
 800464e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004650:	e7fe      	b.n	8004650 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004652:	2200      	movs	r2, #0
 8004654:	2308      	movs	r3, #8
 8004656:	263f      	movs	r6, #63	; 0x3f
 8004658:	2703      	movs	r7, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800465a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800465c:	2540      	movs	r5, #64	; 0x40
 800465e:	2440      	movs	r4, #64	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004660:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800466a:	2340      	movs	r3, #64	; 0x40
 800466c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004670:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004674:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004678:	f7fd fa16 	bl	8001aa8 <HAL_RCC_ClockConfig>
 800467c:	b108      	cbz	r0, 8004682 <SystemClock_Config+0xc2>
 800467e:	b672      	cpsid	i
  while (1)
 8004680:	e7fe      	b.n	8004680 <SystemClock_Config+0xc0>
}
 8004682:	b01f      	add	sp, #124	; 0x7c
 8004684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004686:	bf00      	nop
 8004688:	58000400 	.word	0x58000400
 800468c:	58024800 	.word	0x58024800
 8004690:	58024400 	.word	0x58024400

08004694 <PeriphCommonClock_Config>:
{
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004698:	22b4      	movs	r2, #180	; 0xb4
 800469a:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800469c:	2602      	movs	r6, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800469e:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80046a0:	f44f 6540 	mov.w	r5, #3072	; 0xc00
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046a4:	f000 fac6 	bl	8004c34 <memset>
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80046a8:	2301      	movs	r3, #1
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1
 80046aa:	490f      	ldr	r1, [pc, #60]	; (80046e8 <PeriphCommonClock_Config+0x54>)
  PeriphClkInitStruct.PLL3.PLL3N = 25;
 80046ac:	2219      	movs	r2, #25
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 80046ae:	2003      	movs	r0, #3
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80046b0:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1
 80046b4:	9101      	str	r1, [sp, #4]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 80046b6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80046ba:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 1;
 80046bc:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80046be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInitStruct.PLL3.PLL3N = 25;
 80046c2:	920b      	str	r2, [sp, #44]	; 0x2c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80046c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 80046c8:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046ca:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80046cc:	960d      	str	r6, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80046ce:	950f      	str	r5, [sp, #60]	; 0x3c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80046d0:	9229      	str	r2, [sp, #164]	; 0xa4
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80046d2:	932f      	str	r3, [sp, #188]	; 0xbc
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 80046d4:	e9cd 4118 	strd	r4, r1, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046d8:	f7fd fc48 	bl	8001f6c <HAL_RCCEx_PeriphCLKConfig>
 80046dc:	b108      	cbz	r0, 80046e2 <PeriphCommonClock_Config+0x4e>
 80046de:	b672      	cpsid	i
  while (1)
 80046e0:	e7fe      	b.n	80046e0 <PeriphCommonClock_Config+0x4c>
}
 80046e2:	b030      	add	sp, #192	; 0xc0
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
 80046e6:	bf00      	nop
 80046e8:	40083000 	.word	0x40083000
 80046ec:	00000000 	.word	0x00000000

080046f0 <main>:
{
 80046f0:	b508      	push	{r3, lr}
  HAL_Init();
 80046f2:	f7fb fe17 	bl	8000324 <HAL_Init>
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 80046f6:	4c1e      	ldr	r4, [pc, #120]	; (8004770 <main+0x80>)
  SystemClock_Config();
 80046f8:	f7ff ff62 	bl	80045c0 <SystemClock_Config>
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 80046fc:	2600      	movs	r6, #0
  PeriphCommonClock_Config();
 80046fe:	f7ff ffc9 	bl	8004694 <PeriphCommonClock_Config>
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 8004702:	4d1c      	ldr	r5, [pc, #112]	; (8004774 <main+0x84>)
  MX_GPIO_Init();
 8004704:	f7ff fca6 	bl	8004054 <MX_GPIO_Init>
  MX_DAC1_Init();
 8004708:	f7ff fc3a 	bl	8003f80 <MX_DAC1_Init>
  MX_ADC1_Init();
 800470c:	f7ff fb3c 	bl	8003d88 <MX_ADC1_Init>
  MX_ADC3_Init();
 8004710:	f7ff fb90 	bl	8003e34 <MX_ADC3_Init>
  MX_TIM2_Init();
 8004714:	f000 f9a0 	bl	8004a58 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004718:	f000 f83a 	bl	8004790 <MX_SPI1_Init>
  MX_SPI4_Init();
 800471c:	f000 f868 	bl	80047f0 <MX_SPI4_Init>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004720:	4815      	ldr	r0, [pc, #84]	; (8004778 <main+0x88>)
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 8004722:	f240 33e7 	movw	r3, #999	; 0x3e7
  DWT->CTRL |= 1;
 8004726:	4915      	ldr	r1, [pc, #84]	; (800477c <main+0x8c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004728:	68c2      	ldr	r2, [r0, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 800472a:	60e3      	str	r3, [r4, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800472c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004730:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= 1;
 8004732:	680a      	ldr	r2, [r1, #0]
  PID_vInit(pPID1);
 8004734:	4812      	ldr	r0, [pc, #72]	; (8004780 <main+0x90>)
  DWT->CTRL |= 1;
 8004736:	f042 0201 	orr.w	r2, r2, #1
  PID_vInit(pPID1);
 800473a:	6800      	ldr	r0, [r0, #0]
  DWT->CTRL |= 1;
 800473c:	600a      	str	r2, [r1, #0]
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 800473e:	6822      	ldr	r2, [r4, #0]
  paramFreq = CTRLFREQUENCY;
 8004740:	4910      	ldr	r1, [pc, #64]	; (8004784 <main+0x94>)
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 8004742:	6296      	str	r6, [r2, #40]	; 0x28
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 8004744:	602b      	str	r3, [r5, #0]
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 8004746:	62d3      	str	r3, [r2, #44]	; 0x2c
  paramFreq = CTRLFREQUENCY;
 8004748:	a307      	add	r3, pc, #28	; (adr r3, 8004768 <main+0x78>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	e9c1 2300 	strd	r2, r3, [r1]
  PID_vInit(pPID1);
 8004752:	f7ff fd9d 	bl	8004290 <PID_vInit>
  ADC_Enable(&hadc1);
 8004756:	480c      	ldr	r0, [pc, #48]	; (8004788 <main+0x98>)
 8004758:	f7fc f878 	bl	800084c <ADC_Enable>
  SPI1_start();
 800475c:	f7ff fde6 	bl	800432c <SPI1_start>
  HAL_TIM_Base_Start_IT(&htim2);
 8004760:	4620      	mov	r0, r4
 8004762:	f7fe fec9 	bl	80034f8 <HAL_TIM_Base_Start_IT>
  while (1)
 8004766:	e7fe      	b.n	8004766 <main+0x76>
 8004768:	00000000 	.word	0x00000000
 800476c:	41086a00 	.word	0x41086a00
 8004770:	240004a0 	.word	0x240004a0
 8004774:	24000388 	.word	0x24000388
 8004778:	e000edf0 	.word	0xe000edf0
 800477c:	e0001000 	.word	0xe0001000
 8004780:	2400000c 	.word	0x2400000c
 8004784:	24000378 	.word	0x24000378
 8004788:	24000170 	.word	0x24000170

0800478c <Error_Handler>:
 800478c:	b672      	cpsid	i
  while (1)
 800478e:	e7fe      	b.n	800478e <Error_Handler+0x2>

08004790 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004790:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004792:	4815      	ldr	r0, [pc, #84]	; (80047e8 <MX_SPI1_Init+0x58>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004794:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  hspi1.Instance = SPI1;
 8004798:	4a14      	ldr	r2, [pc, #80]	; (80047ec <MX_SPI1_Init+0x5c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800479a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800479e:	240f      	movs	r4, #15
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80047a0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi1.Instance = SPI1;
 80047a4:	6002      	str	r2, [r0, #0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80047a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80047aa:	6043      	str	r3, [r0, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ac:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80047ae:	e9c0 5402 	strd	r5, r4, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80047b2:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047ba:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
 80047be:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80047c2:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80047c6:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80047ca:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80047ce:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80047d2:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047d6:	f7fe fca5 	bl	8003124 <HAL_SPI_Init>
 80047da:	b900      	cbnz	r0, 80047de <MX_SPI1_Init+0x4e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
 80047de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80047e2:	f7ff bfd3 	b.w	800478c <Error_Handler>
 80047e6:	bf00      	nop
 80047e8:	24000418 	.word	0x24000418
 80047ec:	40013000 	.word	0x40013000

080047f0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80047f0:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80047f2:	4816      	ldr	r0, [pc, #88]	; (800484c <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80047f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hspi4.Instance = SPI4;
 80047f8:	4915      	ldr	r1, [pc, #84]	; (8004850 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80047fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80047fe:	2503      	movs	r5, #3
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004800:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
  hspi4.Instance = SPI4;
 8004804:	6001      	str	r1, [r0, #0]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004806:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800480a:	6042      	str	r2, [r0, #4]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800480c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8004810:	6083      	str	r3, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004812:	2300      	movs	r3, #0
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004814:	6181      	str	r1, [r0, #24]
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004816:	6342      	str	r2, [r0, #52]	; 0x34
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004818:	6143      	str	r3, [r0, #20]
  hspi4.Init.CRCPolynomial = 0x0;
 800481a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800481c:	6583      	str	r3, [r0, #88]	; 0x58
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800481e:	e9c0 5403 	strd	r5, r4, [r0, #12]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004822:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004826:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800482a:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800482e:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004832:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004836:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800483a:	f7fe fc73 	bl	8003124 <HAL_SPI_Init>
 800483e:	b900      	cbnz	r0, 8004842 <MX_SPI4_Init+0x52>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8004846:	f7ff bfa1 	b.w	800478c <Error_Handler>
 800484a:	bf00      	nop
 800484c:	24000390 	.word	0x24000390
 8004850:	40013400 	.word	0x40013400

08004854 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8004854:	4931      	ldr	r1, [pc, #196]	; (800491c <HAL_SPI_MspInit+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004856:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8004858:	6802      	ldr	r2, [r0, #0]
{
 800485a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(spiHandle->Instance==SPI1)
 800485c:	428a      	cmp	r2, r1
{
 800485e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004864:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004868:	9308      	str	r3, [sp, #32]
  if(spiHandle->Instance==SPI1)
 800486a:	d004      	beq.n	8004876 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI4)
 800486c:	4b2c      	ldr	r3, [pc, #176]	; (8004920 <HAL_SPI_MspInit+0xcc>)
 800486e:	429a      	cmp	r2, r3
 8004870:	d02a      	beq.n	80048c8 <HAL_SPI_MspInit+0x74>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8004872:	b00b      	add	sp, #44	; 0x2c
 8004874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004876:	4b2b      	ldr	r3, [pc, #172]	; (8004924 <HAL_SPI_MspInit+0xd0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004878:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800487a:	2428      	movs	r4, #40	; 0x28
 800487c:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800487e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004882:	a904      	add	r1, sp, #16
 8004884:	4828      	ldr	r0, [pc, #160]	; (8004928 <HAL_SPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004886:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004888:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800488c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004890:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004894:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004898:	9200      	str	r2, [sp, #0]
 800489a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800489c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80048a0:	f042 0202 	orr.w	r2, r2, #2
 80048a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80048a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048ac:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80048ae:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80048b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80048bc:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c0:	f7fc fb86 	bl	8000fd0 <HAL_GPIO_Init>
}
 80048c4:	b00b      	add	sp, #44	; 0x2c
 80048c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 80048c8:	4b16      	ldr	r3, [pc, #88]	; (8004924 <HAL_SPI_MspInit+0xd0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80048ca:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80048cc:	f44f 44a0 	mov.w	r4, #20480	; 0x5000
 80048d0:	2502      	movs	r5, #2
    __HAL_RCC_SPI4_CLK_ENABLE();
 80048d2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048d6:	a904      	add	r1, sp, #16
 80048d8:	4814      	ldr	r0, [pc, #80]	; (800492c <HAL_SPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80048da:	2703      	movs	r7, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 80048dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80048e4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80048e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048ec:	9202      	str	r2, [sp, #8]
 80048ee:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80048f4:	f042 0210 	orr.w	r2, r2, #16
 80048f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80048fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004900:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004902:	2600      	movs	r6, #0
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	9303      	str	r3, [sp, #12]
 800490a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800490c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004910:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004914:	f7fc fb5c 	bl	8000fd0 <HAL_GPIO_Init>
}
 8004918:	b00b      	add	sp, #44	; 0x2c
 800491a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800491c:	40013000 	.word	0x40013000
 8004920:	40013400 	.word	0x40013400
 8004924:	58024400 	.word	0x58024400
 8004928:	58020400 	.word	0x58020400
 800492c:	58021000 	.word	0x58021000

08004930 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_MspInit+0x20>)
{
 8004932:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004934:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004938:	f042 0202 	orr.w	r2, r2, #2
 800493c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800494c:	b002      	add	sp, #8
 800494e:	4770      	bx	lr
 8004950:	58024400 	.word	0x58024400

08004954 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004954:	e7fe      	b.n	8004954 <NMI_Handler>
 8004956:	bf00      	nop

08004958 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004958:	e7fe      	b.n	8004958 <HardFault_Handler>
 800495a:	bf00      	nop

0800495c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800495c:	e7fe      	b.n	800495c <MemManage_Handler>
 800495e:	bf00      	nop

08004960 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004960:	e7fe      	b.n	8004960 <BusFault_Handler>
 8004962:	bf00      	nop

08004964 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004964:	e7fe      	b.n	8004964 <UsageFault_Handler>
 8004966:	bf00      	nop

08004968 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop

0800496c <DebugMon_Handler>:
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop

08004970 <PendSV_Handler>:
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop

08004974 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004974:	f7fb bd06 	b.w	8000384 <HAL_IncTick>

08004978 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <TIM2_IRQHandler+0x8>)
 800497a:	f7fe bf89 	b.w	8003890 <HAL_TIM_IRQHandler>
 800497e:	bf00      	nop
 8004980:	240004a0 	.word	0x240004a0

08004984 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004984:	4929      	ldr	r1, [pc, #164]	; (8004a2c <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004986:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004988:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800498c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8004990:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	2b06      	cmp	r3, #6
 800499e:	d805      	bhi.n	80049ac <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	f023 030f 	bic.w	r3, r3, #15
 80049a6:	f043 0307 	orr.w	r3, r3, #7
 80049aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80049ac:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049ae:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80049b0:	4a21      	ldr	r2, [pc, #132]	; (8004a38 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 80049b2:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80049b4:	481e      	ldr	r0, [pc, #120]	; (8004a30 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80049b6:	f041 0101 	orr.w	r1, r1, #1
 80049ba:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80049bc:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	400a      	ands	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80049c4:	6803      	ldr	r3, [r0, #0]
 80049c6:	071b      	lsls	r3, r3, #28
 80049c8:	d505      	bpl.n	80049d6 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80049ca:	6803      	ldr	r3, [r0, #0]
 80049cc:	f023 030f 	bic.w	r3, r3, #15
 80049d0:	f043 0307 	orr.w	r3, r3, #7
 80049d4:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <SystemInit+0xb0>)
 80049d8:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80049da:	4918      	ldr	r1, [pc, #96]	; (8004a3c <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 80049dc:	4c18      	ldr	r4, [pc, #96]	; (8004a40 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 80049de:	4819      	ldr	r0, [pc, #100]	; (8004a44 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 80049e0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80049e2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80049e4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80049e6:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80049e8:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80049ea:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80049ee:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80049f2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80049f6:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80049f8:	4c13      	ldr	r4, [pc, #76]	; (8004a48 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 80049fa:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80049fe:	4913      	ldr	r1, [pc, #76]	; (8004a4c <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8004a00:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	4019      	ands	r1, r3
 8004a08:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004a0c:	d202      	bcs.n	8004a14 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <SystemInit+0xcc>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a14:	490f      	ldr	r1, [pc, #60]	; (8004a54 <SystemInit+0xd0>)
 8004a16:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a1a:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <SystemInit+0xa8>)
 8004a1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a20:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004a22:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a26:	609a      	str	r2, [r3, #8]
}
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	e000ed00 	.word	0xe000ed00
 8004a30:	52002000 	.word	0x52002000
 8004a34:	58024400 	.word	0x58024400
 8004a38:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a3c:	01010280 	.word	0x01010280
 8004a40:	02020200 	.word	0x02020200
 8004a44:	01ff0000 	.word	0x01ff0000
 8004a48:	5c001000 	.word	0x5c001000
 8004a4c:	ffff0000 	.word	0xffff0000
 8004a50:	51008108 	.word	0x51008108
 8004a54:	52004000 	.word	0x52004000

08004a58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a5a:	4c3b      	ldr	r4, [pc, #236]	; (8004b48 <MX_TIM2_Init+0xf0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a5c:	2300      	movs	r3, #0
{
 8004a5e:	b097      	sub	sp, #92	; 0x5c
  htim2.Instance = TIM2;
 8004a60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a68:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8004a6a:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = 4294967295;
 8004a6c:	60e2      	str	r2, [r4, #12]
  htim2.Init.Prescaler = 0;
 8004a6e:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a70:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a72:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a74:	930e      	str	r3, [sp, #56]	; 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a76:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a78:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a7a:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a7c:	9307      	str	r3, [sp, #28]
 8004a7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a82:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a86:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8004a8a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8004a8e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a92:	f7fe fc83 	bl	800339c <HAL_TIM_Base_Init>
 8004a96:	bb60      	cbnz	r0, 8004af2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a9c:	a904      	add	r1, sp, #16
 8004a9e:	482a      	ldr	r0, [pc, #168]	; (8004b48 <MX_TIM2_Init+0xf0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aa0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004aa2:	f7fe fe2f 	bl	8003704 <HAL_TIM_ConfigClockSource>
 8004aa6:	bb80      	cbnz	r0, 8004b0a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004aa8:	4827      	ldr	r0, [pc, #156]	; (8004b48 <MX_TIM2_Init+0xf0>)
 8004aaa:	f7fe fd7d 	bl	80035a8 <HAL_TIM_PWM_Init>
 8004aae:	bb48      	cbnz	r0, 8004b04 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ab0:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ab2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ab4:	a901      	add	r1, sp, #4
 8004ab6:	4824      	ldr	r0, [pc, #144]	; (8004b48 <MX_TIM2_Init+0xf0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ab8:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aba:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004abc:	f7ff f90a 	bl	8003cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ac0:	b9e8      	cbnz	r0, 8004afe <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 2;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ac2:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ac4:	2660      	movs	r6, #96	; 0x60
 8004ac6:	2702      	movs	r7, #2
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ac8:	a90e      	add	r1, sp, #56	; 0x38
 8004aca:	481f      	ldr	r0, [pc, #124]	; (8004b48 <MX_TIM2_Init+0xf0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004acc:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ace:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ad0:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ad4:	f7fe ffd8 	bl	8003a88 <HAL_TIM_PWM_ConfigChannel>
 8004ad8:	b970      	cbnz	r0, 8004af8 <MX_TIM2_Init+0xa0>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM2)
 8004ada:	6822      	ldr	r2, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004adc:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM2)
 8004ade:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae2:	930c      	str	r3, [sp, #48]	; 0x30
 8004ae4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8004ae8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  if(timHandle->Instance==TIM2)
 8004aec:	d010      	beq.n	8004b10 <MX_TIM2_Init+0xb8>
}
 8004aee:	b017      	add	sp, #92	; 0x5c
 8004af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004af2:	f7ff fe4b 	bl	800478c <Error_Handler>
 8004af6:	e7cf      	b.n	8004a98 <MX_TIM2_Init+0x40>
    Error_Handler();
 8004af8:	f7ff fe48 	bl	800478c <Error_Handler>
 8004afc:	e7ed      	b.n	8004ada <MX_TIM2_Init+0x82>
    Error_Handler();
 8004afe:	f7ff fe45 	bl	800478c <Error_Handler>
 8004b02:	e7de      	b.n	8004ac2 <MX_TIM2_Init+0x6a>
    Error_Handler();
 8004b04:	f7ff fe42 	bl	800478c <Error_Handler>
 8004b08:	e7d2      	b.n	8004ab0 <MX_TIM2_Init+0x58>
    Error_Handler();
 8004b0a:	f7ff fe3f 	bl	800478c <Error_Handler>
 8004b0e:	e7cb      	b.n	8004aa8 <MX_TIM2_Init+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <MX_TIM2_Init+0xf4>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b12:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b14:	2401      	movs	r4, #1
 8004b16:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b1c:	a908      	add	r1, sp, #32
 8004b1e:	480c      	ldr	r0, [pc, #48]	; (8004b50 <MX_TIM2_Init+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b20:	2700      	movs	r7, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b22:	4332      	orrs	r2, r6
 8004b24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b2c:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2e:	4033      	ands	r3, r6
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b30:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b36:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004b3a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3e:	f7fc fa47 	bl	8000fd0 <HAL_GPIO_Init>
}
 8004b42:	b017      	add	sp, #92	; 0x5c
 8004b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b46:	bf00      	nop
 8004b48:	240004a0 	.word	0x240004a0
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	58020000 	.word	0x58020000

08004b54 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM2)
 8004b54:	6803      	ldr	r3, [r0, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d000      	beq.n	8004b5e <HAL_TIM_Base_MspInit+0xa>
 8004b5c:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_TIM_Base_MspInit+0x40>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004b60:	2200      	movs	r2, #0
 8004b62:	201c      	movs	r0, #28
 8004b64:	4611      	mov	r1, r2
{
 8004b66:	b510      	push	{r4, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b68:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8004b6c:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b6e:	f044 0401 	orr.w	r4, r4, #1
 8004b72:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8004b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004b82:	f7fc f905 	bl	8000d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b86:	201c      	movs	r0, #28
}
 8004b88:	b002      	add	sp, #8
 8004b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b8e:	f7fc b939 	b.w	8000e04 <HAL_NVIC_EnableIRQ>
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400

08004b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b9c:	f7ff fef2 	bl	8004984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ba0:	480c      	ldr	r0, [pc, #48]	; (8004bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ba2:	490d      	ldr	r1, [pc, #52]	; (8004bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ba8:	e002      	b.n	8004bb0 <LoopCopyDataInit>

08004baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bae:	3304      	adds	r3, #4

08004bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bb4:	d3f9      	bcc.n	8004baa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004bb8:	4c0a      	ldr	r4, [pc, #40]	; (8004be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bbc:	e001      	b.n	8004bc2 <LoopFillZerobss>

08004bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bc0:	3204      	adds	r2, #4

08004bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bc4:	d3fb      	bcc.n	8004bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bc6:	f000 f811 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bca:	f7ff fd91 	bl	80046f0 <main>
  bx  lr
 8004bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004bd8:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8004bdc:	08004c74 	.word	0x08004c74
  ldr r2, =_sbss
 8004be0:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 8004be4:	240004ec 	.word	0x240004ec

08004be8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004be8:	e7fe      	b.n	8004be8 <ADC3_IRQHandler>
	...

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4d0d      	ldr	r5, [pc, #52]	; (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4d0b      	ldr	r5, [pc, #44]	; (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	; (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 f820 	bl	8004c44 <_init>
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2600      	movs	r6, #0
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004c6c 	.word	0x08004c6c
 8004c28:	08004c6c 	.word	0x08004c6c
 8004c2c:	08004c6c 	.word	0x08004c6c
 8004c30:	08004c70 	.word	0x08004c70

08004c34 <memset>:
 8004c34:	4402      	add	r2, r0
 8004c36:	4603      	mov	r3, r0
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <memset+0xa>
 8004c3c:	4770      	bx	lr
 8004c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c42:	e7f9      	b.n	8004c38 <memset+0x4>

08004c44 <_init>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr

08004c50 <_fini>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

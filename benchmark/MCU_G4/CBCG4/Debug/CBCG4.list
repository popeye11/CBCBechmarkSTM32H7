
CBCG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a4  080035a4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080035a4  080035a4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035a4  080035a4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080035ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000018  080035c0  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080035c0  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b027  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e33  00000000  00000000  0003b06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012712  00000000  00000000  0003de9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  000505b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002548  00000000  00000000  00051240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d73  00000000  00000000  00053788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cbc  00000000  00000000  0007a4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010827b  00000000  00000000  000931b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019b432  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ce0  00000000  00000000  0019b488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003574 	.word	0x08003574

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08003574 	.word	0x08003574

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	0000      	movs	r0, r0
	...

08000b68 <HAL_TIM_PeriodElapsedCallback>:
                         HAL_ADC_STATE_READY);
  return adcvalue;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance==TIM2)
 8000b68:	6803      	ldr	r3, [r0, #0]
 8000b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b6e:	d000      	beq.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000b70:	4770      	bx	lr
{
 8000b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000b76:	486a      	ldr	r0, [pc, #424]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
//		HAL_ADC_PollForConversion1(&hadc1);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		adcvalue=HAL_ADC_GetValue1(&hadc1);

	    voltvalue = (float)adcvalue/VOLT2DIG12BIT;
	    PID_Calc(pPID1,PIDInputOption, voltvalue,LockInOutput);
 8000b78:	4f6a      	ldr	r7, [pc, #424]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000b7a:	4e6b      	ldr	r6, [pc, #428]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
{
 8000b7c:	b082      	sub	sp, #8
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	f001 fbce 	bl	8002320 <HAL_GPIO_TogglePin>
 __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b84:	4a69      	ldr	r2, [pc, #420]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
		adcvalue=HAL_ADC_GetValue1(&hadc1);
 8000b86:	496a      	ldr	r1, [pc, #424]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b88:	6813      	ldr	r3, [r2, #0]
 8000b8a:	201c      	movs	r0, #28
 8000b8c:	6018      	str	r0, [r3, #0]
 adcvalue= hadc->Instance->DR;
 8000b8e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 ADC_STATE_CLR_SET(hadc->State,
 8000b90:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
		adcvalue=HAL_ADC_GetValue1(&hadc1);
 8000b92:	b280      	uxth	r0, r0
	    voltvalue = (float)adcvalue/VOLT2DIG12BIT;
 8000b94:	ee07 0a90 	vmov	s15, r0
 ADC_STATE_CLR_SET(hadc->State,
 8000b98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
	    voltvalue = (float)adcvalue/VOLT2DIG12BIT;
 8000b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 ADC_STATE_CLR_SET(hadc->State,
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
		adcvalue=HAL_ADC_GetValue1(&hadc1);
 8000ba8:	8008      	strh	r0, [r1, #0]
 ADC_STATE_CLR_SET(hadc->State,
 8000baa:	65d3      	str	r3, [r2, #92]	; 0x5c
	    voltvalue = (float)adcvalue/VOLT2DIG12BIT;
 8000bac:	ee17 0a90 	vmov	r0, s15
 8000bb0:	f7ff fc96 	bl	80004e0 <__aeabi_f2d>
 8000bb4:	a358      	add	r3, pc, #352	; (adr r3, 8000d18 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fce9 	bl	8000590 <__aeabi_dmul>
	    PID_Calc(pPID1,PIDInputOption, voltvalue,LockInOutput);
 8000bbe:	4b5d      	ldr	r3, [pc, #372]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
	    voltvalue = (float)adcvalue/VOLT2DIG12BIT;
 8000bc0:	4a5d      	ldr	r2, [pc, #372]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)

/* USER CODE BEGIN 4 */
float PIDInputSWitch(uint8_t PIDInputOption, float ADCvalue,float LockIn)
{
	 float PIDInput;
	 if (PIDInputOption == 0)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
	    PID_Calc(pPID1,PIDInputOption, voltvalue,LockInOutput);
 8000bc4:	f8d7 a000 	ldr.w	sl, [r7]
 8000bc8:	6836      	ldr	r6, [r6, #0]
	    voltvalue = (float)adcvalue/VOLT2DIG12BIT;
 8000bca:	4604      	mov	r4, r0
 8000bcc:	460d      	mov	r5, r1
 8000bce:	e9c2 4500 	strd	r4, r5, [r2]
	 if (PIDInputOption == 0)
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8088 	bne.w	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x180>
	    PID_Calc(pPID1,PIDInputOption, voltvalue,LockInOutput);
 8000bd8:	4630      	mov	r0, r6
 8000bda:	f7ff fc81 	bl	80004e0 <__aeabi_f2d>
 8000bde:	4602      	mov	r2, r0
 8000be0:	460b      	mov	r3, r1
{
	double 			output;
	double 			outputsat;
	double          pd;
	pd          				= 	PIDInputSWitch(PIDInputOption, ADCvalue, LockIn);
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 8000be2:	e9da 012c 	ldrd	r0, r1, [sl, #176]	; 0xb0
 8000be6:	f7ff fb1b 	bl	8000220 <__aeabi_dsub>
 8000bea:	e9da 231e 	ldrd	r2, r3, [sl, #120]	; 0x78
 8000bee:	f7ff fccf 	bl	8000590 <__aeabi_dmul>
	if (pPID->En>=1)
 8000bf2:	f8da 3088 	ldr.w	r3, [sl, #136]	; 0x88
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	460d      	mov	r5, r1
	if (pPID->En>=1)
 8000bfa:	2b00      	cmp	r3, #0
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 8000bfc:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	if (pPID->En>=1)
 8000c00:	dd79      	ble.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x18e>
	{
		output = (pPID->preout+pPID->a0*pPID->error + pPID->a1*pPID->error_1lag + pPID->a2*pPID->error_2lag+pPID->aw*pPID->error_AnWi)/(1+pPID->omega*pPID->_Ts);
 8000c02:	ed9a 7b1a 	vldr	d7, [sl, #104]	; 0x68
 8000c06:	e9da 231c 	ldrd	r2, r3, [sl, #112]	; 0x70
 8000c0a:	e9da 0128 	ldrd	r0, r1, [sl, #160]	; 0xa0
 8000c0e:	ed8d 7b00 	vstr	d7, [sp]
 8000c12:	f7ff fcbd 	bl	8000590 <__aeabi_dmul>
 8000c16:	e9da 2326 	ldrd	r2, r3, [sl, #152]	; 0x98
 8000c1a:	4606      	mov	r6, r0
 8000c1c:	460f      	mov	r7, r1
 8000c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000c22:	f7ff fcb5 	bl	8000590 <__aeabi_dmul>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	f7ff faf9 	bl	8000224 <__adddf3>
 8000c32:	e9da 2320 	ldrd	r2, r3, [sl, #128]	; 0x80
 8000c36:	f7ff faf5 	bl	8000224 <__adddf3>
 8000c3a:	e9da 2316 	ldrd	r2, r3, [sl, #88]	; 0x58
 8000c3e:	4606      	mov	r6, r0
 8000c40:	460f      	mov	r7, r1
 8000c42:	e9da 012a 	ldrd	r0, r1, [sl, #168]	; 0xa8
 8000c46:	f7ff fca3 	bl	8000590 <__aeabi_dmul>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	4630      	mov	r0, r6
 8000c50:	4639      	mov	r1, r7
 8000c52:	f7ff fae7 	bl	8000224 <__adddf3>
 8000c56:	e9da 2324 	ldrd	r2, r3, [sl, #144]	; 0x90
 8000c5a:	4606      	mov	r6, r0
 8000c5c:	460f      	mov	r7, r1
 8000c5e:	4620      	mov	r0, r4
 8000c60:	4629      	mov	r1, r5
 8000c62:	f7ff fc95 	bl	8000590 <__aeabi_dmul>
 8000c66:	4602      	mov	r2, r0
 8000c68:	460b      	mov	r3, r1
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4639      	mov	r1, r7
 8000c6e:	f7ff fad9 	bl	8000224 <__adddf3>
 8000c72:	e9da 2300 	ldrd	r2, r3, [sl]
 8000c76:	4606      	mov	r6, r0
 8000c78:	460f      	mov	r7, r1
 8000c7a:	e9da 0112 	ldrd	r0, r1, [sl, #72]	; 0x48
 8000c7e:	f7ff fc87 	bl	8000590 <__aeabi_dmul>
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f7ff facd 	bl	8000224 <__adddf3>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4630      	mov	r0, r6
 8000c90:	4639      	mov	r1, r7
 8000c92:	f7ff fda7 	bl	80007e4 <__aeabi_ddiv>
 8000c96:	4606      	mov	r6, r0
 8000c98:	460f      	mov	r7, r1
//			{
//			   output = 3*pPID->_min;
//			}
	pPID->preout = output;
	    // Restrict to max/min
	if( output > pPID->_max )
 8000c9a:	e9da 8908 	ldrd	r8, r9, [sl, #32]
	pPID->preout = output;
 8000c9e:	e9ca 6720 	strd	r6, r7, [sl, #128]	; 0x80
	if( output > pPID->_max )
 8000ca2:	4642      	mov	r2, r8
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4639      	mov	r1, r7
 8000caa:	f7ff ff01 	bl	8000ab0 <__aeabi_dcmpgt>
 8000cae:	b940      	cbnz	r0, 8000cc2 <HAL_TIM_PeriodElapsedCallback+0x15a>
	{
	   outputsat = pPID->_max;
	}
	else if( output < pPID->_min )
 8000cb0:	e9da 890a 	ldrd	r8, r9, [sl, #40]	; 0x28
 8000cb4:	4632      	mov	r2, r6
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4640      	mov	r0, r8
 8000cba:	4649      	mov	r1, r9
 8000cbc:	f7ff feee 	bl	8000a9c <__aeabi_dcmpge>
 8000cc0:	b320      	cbz	r0, 8000d0c <HAL_TIM_PeriodElapsedCallback+0x1a4>
	}
	else
	{
	   outputsat = output;
	}
	pPID->error_AnWi              =   outputsat-output;
 8000cc2:	4632      	mov	r2, r6
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4640      	mov	r0, r8
 8000cc8:	4649      	mov	r1, r9
 8000cca:	f7ff faa9 	bl	8000220 <__aeabi_dsub>
	    // Save error to previous error
	pPID->error_2lag = pPID->error_1lag;
 8000cce:	ed9d 7b00 	vldr	d7, [sp]
	pPID->error_AnWi              =   outputsat-output;
 8000cd2:	e9ca 0116 	strd	r0, r1, [sl, #88]	; 0x58
	pPID->error_2lag = pPID->error_1lag;
 8000cd6:	ed8a 7b1c 	vstr	d7, [sl, #112]	; 0x70
	pPID->error_1lag = pPID->error;
 8000cda:	e9ca 451a 	strd	r4, r5, [sl, #104]	; 0x68
//   tty3 =Kd/pPID->_Ts;
	pPID->outvalue= outputsat;
 8000cde:	e9ca 892e 	strd	r8, r9, [sl, #184]	; 0xb8
}
 8000ce2:	b002      	add	sp, #8
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				PIDInput =ADCvalue;
 8000ce8:	f7ff feec 	bl	8000ac4 <__aeabi_d2f>
 8000cec:	f7ff fbf8 	bl	80004e0 <__aeabi_f2d>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	e775      	b.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x7a>
		pPID->error             =        0;
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	4614      	mov	r4, r2
 8000cfc:	461d      	mov	r5, r3
 8000cfe:	e9ca 2318 	strd	r2, r3, [sl, #96]	; 0x60
 8000d02:	e9cd 4500 	strd	r4, r5, [sp]
		output = 0;
 8000d06:	4616      	mov	r6, r2
 8000d08:	461f      	mov	r7, r3
 8000d0a:	e7c6      	b.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x132>
 8000d0c:	46b0      	mov	r8, r6
 8000d0e:	46b9      	mov	r9, r7
 8000d10:	e7d7      	b.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x15a>
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	94d8c831 	.word	0x94d8c831
 8000d1c:	3f4a6819 	.word	0x3f4a6819
 8000d20:	48000400 	.word	0x48000400
 8000d24:	20000004 	.word	0x20000004
 8000d28:	200002b0 	.word	0x200002b0
 8000d2c:	20000120 	.word	0x20000120
 8000d30:	20000034 	.word	0x20000034
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000110 	.word	0x20000110
 8000d3c:	3ff00000 	.word	0x3ff00000

08000d40 <SystemClock_Config>:
{
 8000d40:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	2100      	movs	r1, #0
{
 8000d44:	b0a9      	sub	sp, #164	; 0xa4
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d46:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d48:	2238      	movs	r2, #56	; 0x38
 8000d4a:	a805      	add	r0, sp, #20
 8000d4c:	f002 fc0a 	bl	8003564 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	4621      	mov	r1, r4
 8000d52:	2254      	movs	r2, #84	; 0x54
 8000d54:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d56:	e9cd 4400 	strd	r4, r4, [sp]
 8000d5a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000d5e:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d60:	f002 fc00 	bl	8003564 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d64:	4620      	mov	r0, r4
 8000d66:	f001 fae5 	bl	8002334 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d6a:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6c:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6e:	f44f 7580 	mov.w	r5, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d72:	2140      	movs	r1, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d74:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d78:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d7c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	e9cd 5108 	strd	r5, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d84:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d8a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f001 fb50 	bl	8002430 <HAL_RCC_OscConfig>
 8000d90:	b108      	cbz	r0, 8000d96 <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d92:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d96:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d98:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9a:	2503      	movs	r5, #3
 8000d9c:	240f      	movs	r4, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	2200      	movs	r2, #0
 8000da2:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	e9cd 4500 	strd	r4, r5, [sp]
 8000daa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dae:	f001 fdc3 	bl	8002938 <HAL_RCC_ClockConfig>
 8000db2:	b108      	cbz	r0, 8000db8 <SystemClock_Config+0x78>
 8000db4:	b672      	cpsid	i
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000db8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dbc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000dc2:	9213      	str	r2, [sp, #76]	; 0x4c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dc4:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc6:	f001 ff03 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	b108      	cbz	r0, 8000dd0 <SystemClock_Config+0x90>
 8000dcc:	b672      	cpsid	i
  while (1)
 8000dce:	e7fe      	b.n	8000dce <SystemClock_Config+0x8e>
}
 8000dd0:	b029      	add	sp, #164	; 0xa4
 8000dd2:	bd30      	pop	{r4, r5, pc}
 8000dd4:	0000      	movs	r0, r0
	...

08000dd8 <PID_vInit>:
{                                          ///< Zeiger auf Reglerstruktur
 8000dd8:	b4f0      	push	{r4, r5, r6, r7}
	pPID-> _Kp				= 		0.2;
 8000dda:	a330      	add	r3, pc, #192	; (adr r3, 8000e9c <PID_vInit+0xc4>)
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 8000de0:	a530      	add	r5, pc, #192	; (adr r5, 8000ea4 <PID_vInit+0xcc>)
 8000de2:	e9d5 4500 	ldrd	r4, r5, [r5]
	pPID-> _Kp				= 		0.2;
 8000de6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 8000dea:	e9c0 4500 	strd	r4, r5, [r0]
	pPID-> _Kd				= 		0.5;
 8000dee:	4f26      	ldr	r7, [pc, #152]	; (8000e88 <PID_vInit+0xb0>)
	pPID-> _max				= 		3;
 8000df0:	4d26      	ldr	r5, [pc, #152]	; (8000e8c <PID_vInit+0xb4>)
	pPID-> _min				= 		-3;
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <PID_vInit+0xb8>)
	pPID-> _Kd				= 		0.5;
 8000df4:	2600      	movs	r6, #0
	pPID-> _max				= 		3;
 8000df6:	2400      	movs	r4, #0
	pPID-> _min				= 		-3;
 8000df8:	2200      	movs	r2, #0
	pPID-> _Kd				= 		0.5;
 8000dfa:	e9c0 6706 	strd	r6, r7, [r0, #24]
	pPID-> _max				= 		3;
 8000dfe:	e9c0 4508 	strd	r4, r5, [r0, #32]
	pPID-> _fc				= 		10;
 8000e02:	4f24      	ldr	r7, [pc, #144]	; (8000e94 <PID_vInit+0xbc>)
	pPID->_kt               =        -1;
 8000e04:	4d24      	ldr	r5, [pc, #144]	; (8000e98 <PID_vInit+0xc0>)
	pPID-> _min				= 		-3;
 8000e06:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	pPID->a0 				= 		pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts+pPID->_Ki*V2MV*pPID->_Ts;
 8000e0a:	a319      	add	r3, pc, #100	; (adr r3, 8000e70 <PID_vInit+0x98>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
	pPID-> _fc				= 		10;
 8000e10:	2600      	movs	r6, #0
	pPID->_kt               =        -1;
 8000e12:	2400      	movs	r4, #0
	pPID-> _fc				= 		10;
 8000e14:	e9c0 6710 	strd	r6, r7, [r0, #64]	; 0x40
	pPID->_kt               =        -1;
 8000e18:	e9c0 451e 	strd	r4, r5, [r0, #120]	; 0x78
	pPID->a1 				= 		-(pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts*2.0);
 8000e1c:	a716      	add	r7, pc, #88	; (adr r7, 8000e78 <PID_vInit+0xa0>)
 8000e1e:	e9d7 6700 	ldrd	r6, r7, [r7]
	pPID->a2 				=		pPID->_Kd/V2MUV/pPID->_Ts;
 8000e22:	a517      	add	r5, pc, #92	; (adr r5, 8000e80 <PID_vInit+0xa8>)
 8000e24:	e9d5 4500 	ldrd	r4, r5, [r5]
	pPID->a0 				= 		pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts+pPID->_Ki*V2MV*pPID->_Ts;
 8000e28:	e9c0 2324 	strd	r2, r3, [r0, #144]	; 0x90
	pPID-> _Ki				= 		0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	2200      	movs	r2, #0
 8000e30:	e9c0 2304 	strd	r2, r3, [r0, #16]
	pPID-> _Kaw				= 		0.0;
 8000e34:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    pPID-> _PIDHold			= 		0.0;
 8000e38:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	pPID->error             =        0;
 8000e3c:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	pPID->error_1lag        =        0;
 8000e40:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	pPID->error_2lag        =        0;
 8000e44:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
	pPID->error_AnWi        =        0;
 8000e48:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	pPID->preout            =        0;
 8000e4c:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
	pPID->ref               =       0.0;
 8000e50:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
	pPID->aw				=		0.0;
 8000e54:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
	pPID->omega 			=		0;
 8000e58:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
	pPID-> _EnKc			= 		1;
 8000e5c:	2301      	movs	r3, #1
	pPID->a1 				= 		-(pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts*2.0);
 8000e5e:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
	pPID->a2 				=		pPID->_Kd/V2MUV/pPID->_Ts;
 8000e62:	e9c0 4528 	strd	r4, r5, [r0, #160]	; 0xa0
	pPID-> _EnKc			= 		1;
 8000e66:	6383      	str	r3, [r0, #56]	; 0x38
};
 8000e68:	bcf0      	pop	{r4, r5, r6, r7}
	pPID->En                =        1.0;
 8000e6a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
};
 8000e6e:	4770      	bx	lr
 8000e70:	33333333 	.word	0x33333333
 8000e74:	3fd33333 	.word	0x3fd33333
 8000e78:	9999999a 	.word	0x9999999a
 8000e7c:	bfd99999 	.word	0xbfd99999
 8000e80:	99999999 	.word	0x99999999
 8000e84:	3fb99999 	.word	0x3fb99999
 8000e88:	3fe00000 	.word	0x3fe00000
 8000e8c:	40080000 	.word	0x40080000
 8000e90:	c0080000 	.word	0xc0080000
 8000e94:	40240000 	.word	0x40240000
 8000e98:	bff00000 	.word	0xbff00000
 8000e9c:	9999999a 	.word	0x9999999a
 8000ea0:	3fc99999 	.word	0x3fc99999
 8000ea4:	88e368f1 	.word	0x88e368f1
 8000ea8:	3ed4f8b5 	.word	0x3ed4f8b5
 8000eac:	00000000 	.word	0x00000000

08000eb0 <main>:
{
 8000eb0:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	2400      	movs	r4, #0
{
 8000eb4:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8000eb6:	f000 fa43 	bl	8001340 <HAL_Init>
  SystemClock_Config();
 8000eba:	f7ff ff41 	bl	8000d40 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000ec2:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b7a      	ldr	r3, [pc, #488]	; (80010b0 <main+0x200>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ecc:	4879      	ldr	r0, [pc, #484]	; (80010b4 <main+0x204>)
  hadc1.Instance = ADC1;
 8000ece:	4d7a      	ldr	r5, [pc, #488]	; (80010b8 <main+0x208>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	f042 0201 	orr.w	r2, r2, #1
 8000ed4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ed8:	f002 0201 	and.w	r2, r2, #1
 8000edc:	9201      	str	r2, [sp, #4]
 8000ede:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ee2:	f042 0202 	orr.w	r2, r2, #2
 8000ee6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ef0:	4622      	mov	r2, r4
 8000ef2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ef6:	f001 fa0d 	bl	8002314 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000efa:	2202      	movs	r2, #2
 8000efc:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	a906      	add	r1, sp, #24
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f04:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f001 f90f 	bl	800212c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	2301      	movs	r3, #1
 8000f12:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	4867      	ldr	r0, [pc, #412]	; (80010b4 <main+0x204>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	2200      	movs	r2, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f001 f903 	bl	800212c <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	4621      	mov	r1, r4
 8000f28:	2220      	movs	r2, #32
 8000f2a:	a806      	add	r0, sp, #24
  ADC_MultiModeTypeDef multimode = {0};
 8000f2c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000f30:	9405      	str	r4, [sp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	f002 fb17 	bl	8003564 <memset>
  hadc1.Instance = ADC1;
 8000f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3e:	2104      	movs	r1, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Instance = ADC1;
 8000f44:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f46:	6068      	str	r0, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f48:	2301      	movs	r3, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f4a:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f50:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f54:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f58:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f5c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f60:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f62:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f66:	61a9      	str	r1, [r5, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f68:	83aa      	strh	r2, [r5, #28]
  hadc1.Init.NbrOfConversion = 1;
 8000f6a:	622b      	str	r3, [r5, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f6c:	f000 fa10 	bl	8001390 <HAL_ADC_Init>
 8000f70:	b108      	cbz	r0, 8000f76 <main+0xc6>
 8000f72:	b672      	cpsid	i
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <main+0xc4>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f76:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f78:	a903      	add	r1, sp, #12
 8000f7a:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f7c:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f7e:	f000 fe85 	bl	8001c8c <HAL_ADCEx_MultiModeConfigChannel>
 8000f82:	b108      	cbz	r0, 8000f88 <main+0xd8>
 8000f84:	b672      	cpsid	i
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <main+0xd6>
  sConfig.Channel = ADC_CHANNEL_1;
 8000f88:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <main+0x20c>)
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000f90:	2200      	movs	r2, #0
 8000f92:	237f      	movs	r3, #127	; 0x7f
 8000f94:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	a906      	add	r1, sp, #24
  sConfig.Channel = ADC_CHANNEL_1;
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	f000 fb1c 	bl	80015e0 <HAL_ADC_ConfigChannel>
 8000fa8:	b108      	cbz	r0, 8000fae <main+0xfe>
 8000faa:	b672      	cpsid	i
  while (1)
 8000fac:	e7fe      	b.n	8000fac <main+0xfc>
  htim2.Instance = TIM2;
 8000fae:	4c44      	ldr	r4, [pc, #272]	; (80010c0 <main+0x210>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb0:	9006      	str	r0, [sp, #24]
 8000fb2:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb6:	e9cd 0003 	strd	r0, r0, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	e9c4 0001 	strd	r0, r0, [r4, #4]
  htim2.Instance = TIM2;
 8000fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	9009      	str	r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	9005      	str	r0, [sp, #20]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	61a0      	str	r0, [r4, #24]
  htim2.Init.Period = 4.294967295E9;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fce:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8000fd0:	6022      	str	r2, [r4, #0]
  htim2.Init.Period = 4.294967295E9;
 8000fd2:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd4:	f001 ff84 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000fd8:	b108      	cbz	r0, 8000fde <main+0x12e>
 8000fda:	b672      	cpsid	i
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x12c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe2:	a906      	add	r1, sp, #24
 8000fe4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe6:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe8:	f002 f854 	bl	8003094 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b108      	cbz	r0, 8000ff4 <main+0x144>
 8000ff0:	b672      	cpsid	i
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <main+0x142>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff4:	a903      	add	r1, sp, #12
 8000ff6:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff8:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffc:	f002 fa1c 	bl	8003438 <HAL_TIMEx_MasterConfigSynchronization>
 8001000:	4601      	mov	r1, r0
 8001002:	b108      	cbz	r0, 8001008 <main+0x158>
 8001004:	b672      	cpsid	i
  while (1)
 8001006:	e7fe      	b.n	8001006 <main+0x156>
  hdac1.Instance = DAC1;
 8001008:	4e2e      	ldr	r6, [pc, #184]	; (80010c4 <main+0x214>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800100a:	2230      	movs	r2, #48	; 0x30
 800100c:	a806      	add	r0, sp, #24
 800100e:	f002 faa9 	bl	8003564 <memset>
  hdac1.Instance = DAC1;
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <main+0x218>)
 8001014:	6033      	str	r3, [r6, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001016:	4630      	mov	r0, r6
 8001018:	f000 ff44 	bl	8001ea4 <HAL_DAC_Init>
 800101c:	4602      	mov	r2, r0
 800101e:	b108      	cbz	r0, 8001024 <main+0x174>
 8001020:	b672      	cpsid	i
  while (1)
 8001022:	e7fe      	b.n	8001022 <main+0x172>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001024:	f04f 0800 	mov.w	r8, #0
 8001028:	f04f 0900 	mov.w	r9, #0
 800102c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001030:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001034:	2302      	movs	r3, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001036:	a906      	add	r1, sp, #24
 8001038:	4630      	mov	r0, r6
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800103a:	f04f 0801 	mov.w	r8, #1
 800103e:	f04f 0900 	mov.w	r9, #0
 8001042:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001046:	f8ad 201c 	strh.w	r2, [sp, #28]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800104a:	9306      	str	r3, [sp, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800104c:	f000 ff8c 	bl	8001f68 <HAL_DAC_ConfigChannel>
 8001050:	4607      	mov	r7, r0
 8001052:	b108      	cbz	r0, 8001058 <main+0x1a8>
 8001054:	b672      	cpsid	i
  while (1)
 8001056:	e7fe      	b.n	8001056 <main+0x1a6>
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 8001058:	6822      	ldr	r2, [r4, #0]
  Tim2ARR=170e6 / CTRLFREQUENCY-1;
 800105a:	f8df c078 	ldr.w	ip, [pc, #120]	; 80010d4 <main+0x224>
    paramFreq = CTRLFREQUENCY;
 800105e:	491b      	ldr	r1, [pc, #108]	; (80010cc <main+0x21c>)
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 8001060:	6290      	str	r0, [r2, #40]	; 0x28
    paramFreq = CTRLFREQUENCY;
 8001062:	f20f 0944 	addw	r9, pc, #68	; 0x44
 8001066:	e9d9 8900 	ldrd	r8, r9, [r9]
  Tim2ARR=170e6 / CTRLFREQUENCY-1;
 800106a:	f240 3351 	movw	r3, #849	; 0x351
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 800106e:	62d3      	str	r3, [r2, #44]	; 0x2c
    HAL_TIM_Base_Start_IT(&htim2);
 8001070:	4620      	mov	r0, r4
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 8001072:	60e3      	str	r3, [r4, #12]
  Tim2ARR=170e6 / CTRLFREQUENCY-1;
 8001074:	f8cc 3000 	str.w	r3, [ip]
    paramFreq = CTRLFREQUENCY;
 8001078:	e9c1 8900 	strd	r8, r9, [r1]
    HAL_TIM_Base_Start_IT(&htim2);
 800107c:	f001 ffc8 	bl	8003010 <HAL_TIM_Base_Start_IT>
    HAL_ADC_Start(&hadc1);
 8001080:	4628      	mov	r0, r5
 8001082:	f000 fd7f 	bl	8001b84 <HAL_ADC_Start>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001086:	4639      	mov	r1, r7
 8001088:	4630      	mov	r0, r6
 800108a:	f000 ff21 	bl	8001ed0 <HAL_DAC_Start>
    PID_vInit(pPID1);
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <main+0x220>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f7ff fea1 	bl	8000dd8 <PID_vInit>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)3000);
 8001096:	2200      	movs	r2, #0
 8001098:	4611      	mov	r1, r2
 800109a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800109e:	4630      	mov	r0, r6
 80010a0:	f000 ff4a 	bl	8001f38 <HAL_DAC_SetValue>
  while (1)
 80010a4:	e7f7      	b.n	8001096 <main+0x1e6>
 80010a6:	bf00      	nop
 80010a8:	00000000 	.word	0x00000000
 80010ac:	41086a00 	.word	0x41086a00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000400 	.word	0x48000400
 80010b8:	20000120 	.word	0x20000120
 80010bc:	04300002 	.word	0x04300002
 80010c0:	20000260 	.word	0x20000260
 80010c4:	2000003c 	.word	0x2000003c
 80010c8:	50000800 	.word	0x50000800
 80010cc:	20000250 	.word	0x20000250
 80010d0:	20000004 	.word	0x20000004
 80010d4:	20000258 	.word	0x20000258

080010d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_MspInit+0x2c>)
 80010da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	661a      	str	r2, [r3, #96]	; 0x60
 80010e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80010e4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	f002 0201 	and.w	r2, r2, #1
 80010ea:	9200      	str	r2, [sp, #0]
 80010ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010f4:	659a      	str	r2, [r3, #88]	; 0x58
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001100:	b002      	add	sp, #8
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001108:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800110a:	6802      	ldr	r2, [r0, #0]
{
 800110c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8001110:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001118:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800111c:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 800111e:	d001      	beq.n	8001124 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001120:	b008      	add	sp, #32
 8001122:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001124:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8001128:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001130:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001132:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001136:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001138:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800113a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800113e:	9100      	str	r1, [sp, #0]
 8001140:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001144:	f041 0101 	orr.w	r1, r1, #1
 8001148:	64d1      	str	r1, [r2, #76]	; 0x4c
 800114a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	f002 0201 	and.w	r2, r2, #1
 8001152:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001154:	2303      	movs	r3, #3
 8001156:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800115a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f000 ffe4 	bl	800212c <HAL_GPIO_Init>
}
 8001164:	b008      	add	sp, #32
 8001166:	bd10      	pop	{r4, pc}

08001168 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001168:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 800116a:	6801      	ldr	r1, [r0, #0]
 800116c:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <HAL_DAC_MspInit+0x60>)
{
 800116e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8001172:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001178:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800117c:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 800117e:	d001      	beq.n	8001184 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001180:	b008      	add	sp, #32
 8001182:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001184:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8001188:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001190:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001192:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001196:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001198:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800119a:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
 800119e:	9100      	str	r1, [sp, #0]
 80011a0:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80011a4:	f041 0101 	orr.w	r1, r1, #1
 80011a8:	64d1      	str	r1, [r2, #76]	; 0x4c
 80011aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	f002 0201 	and.w	r2, r2, #1
 80011b2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b4:	2303      	movs	r3, #3
 80011b6:	2210      	movs	r2, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f000 ffb4 	bl	800212c <HAL_GPIO_Init>
}
 80011c4:	b008      	add	sp, #32
 80011c6:	bd10      	pop	{r4, pc}
 80011c8:	50000800 	.word	0x50000800

080011cc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80011cc:	6803      	ldr	r3, [r0, #0]
 80011ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d2:	d000      	beq.n	80011d6 <HAL_TIM_Base_MspInit+0xa>
 80011d4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 80011da:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	659a      	str	r2, [r3, #88]	; 0x58
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80011e6:	b083      	sub	sp, #12
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011f0:	4611      	mov	r1, r2
 80011f2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011f6:	f000 fe0f 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011fa:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fc:	b003      	add	sp, #12
 80011fe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001202:	f000 be41 	b.w	8001e88 <HAL_NVIC_EnableIRQ>
 8001206:	bf00      	nop

08001208 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <HAL_InitTick+0x80>)
{
 800120a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 800120c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  uwTimclock = HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800120e:	4c1f      	ldr	r4, [pc, #124]	; (800128c <HAL_InitTick+0x84>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001214:	661a      	str	r2, [r3, #96]	; 0x60
 8001216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8001218:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 800121a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800121e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001220:	9302      	str	r3, [sp, #8]
{
 8001222:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001224:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001226:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001228:	f001 fcb0 	bl	8002b8c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800122c:	f001 fc9c 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001230:	4917      	ldr	r1, [pc, #92]	; (8001290 <HAL_InitTick+0x88>)
  htim1.Instance = TIM1;
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_InitTick+0x8c>)
 8001234:	6022      	str	r2, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001236:	fba1 2300 	umull	r2, r3, r1, r0
 800123a:	0c9b      	lsrs	r3, r3, #18
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800123c:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800123e:	3b01      	subs	r3, #1
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001240:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim1);
 8001244:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001246:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800124a:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	60a2      	str	r2, [r4, #8]
  status = HAL_TIM_Base_Init(&htim1);
 800124e:	f001 fe47 	bl	8002ee0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001252:	4605      	mov	r5, r0
 8001254:	b110      	cbz	r0, 800125c <HAL_InitTick+0x54>
      }
    }
  }
 /* Return function status */
  return status;
}
 8001256:	4628      	mov	r0, r5
 8001258:	b008      	add	sp, #32
 800125a:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 800125c:	4620      	mov	r0, r4
 800125e:	f001 fed7 	bl	8003010 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001262:	4605      	mov	r5, r0
 8001264:	2800      	cmp	r0, #0
 8001266:	d1f6      	bne.n	8001256 <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001268:	2019      	movs	r0, #25
 800126a:	f000 fe0d 	bl	8001e88 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	2e0f      	cmp	r6, #15
 8001270:	d901      	bls.n	8001276 <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 8001272:	2501      	movs	r5, #1
 8001274:	e7ef      	b.n	8001256 <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001276:	462a      	mov	r2, r5
 8001278:	4631      	mov	r1, r6
 800127a:	2019      	movs	r0, #25
 800127c:	f000 fdcc 	bl	8001e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_InitTick+0x90>)
 8001282:	601e      	str	r6, [r3, #0]
 8001284:	e7e7      	b.n	8001256 <HAL_InitTick+0x4e>
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	200002c0 	.word	0x200002c0
 8001290:	431bde83 	.word	0x431bde83
 8001294:	40012c00 	.word	0x40012c00
 8001298:	20000010 	.word	0x20000010

0800129c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler>
 800129e:	bf00      	nop

080012a0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <HardFault_Handler>
 80012a2:	bf00      	nop

080012a4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler>
 80012a6:	bf00      	nop

080012a8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <BusFault_Handler>
 80012aa:	bf00      	nop

080012ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler>
 80012ae:	bf00      	nop

080012b0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <DebugMon_Handler>:
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <PendSV_Handler>:
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <SysTick_Handler>:
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c0:	4801      	ldr	r0, [pc, #4]	; (80012c8 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80012c2:	f001 bfbf 	b.w	8003244 <HAL_TIM_IRQHandler>
 80012c6:	bf00      	nop
 80012c8:	200002c0 	.word	0x200002c0

080012cc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012cc:	4801      	ldr	r0, [pc, #4]	; (80012d4 <TIM2_IRQHandler+0x8>)
 80012ce:	f001 bfb9 	b.w	8003244 <HAL_TIM_IRQHandler>
 80012d2:	bf00      	nop
 80012d4:	20000260 	.word	0x20000260

080012d8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <SystemInit+0x10>)
 80012da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopForever+0x6>)
  ldr r1, =_edata
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <LoopForever+0xe>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001308:	4c0b      	ldr	r4, [pc, #44]	; (8001338 <LoopForever+0x16>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001316:	f7ff ffdf 	bl	80012d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f002 f8ff 	bl	800351c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800131e:	f7ff fdc7 	bl	8000eb0 <main>

08001322 <LoopForever>:

LoopForever:
    b LoopForever
 8001322:	e7fe      	b.n	8001322 <LoopForever>
  ldr   r0, =_estack
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001330:	080035ac 	.word	0x080035ac
  ldr r2, =_sbss
 8001334:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001338:	20000310 	.word	0x20000310

0800133c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_2_IRQHandler>
	...

08001340 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001342:	2003      	movs	r0, #3
 8001344:	f000 fd54 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001348:	200f      	movs	r0, #15
 800134a:	f7ff ff5d 	bl	8001208 <HAL_InitTick>
 800134e:	b110      	cbz	r0, 8001356 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8001350:	2401      	movs	r4, #1
  }

  /* Return function status */
  return status;

}
 8001352:	4620      	mov	r0, r4
 8001354:	bd10      	pop	{r4, pc}
 8001356:	4604      	mov	r4, r0
    HAL_MspInit();
 8001358:	f7ff febe 	bl	80010d8 <HAL_MspInit>
}
 800135c:	4620      	mov	r0, r4
 800135e:	bd10      	pop	{r4, pc}

08001360 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001360:	4b01      	ldr	r3, [pc, #4]	; (8001368 <HAL_GetTick+0x8>)
 8001362:	6818      	ldr	r0, [r3, #0]
}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	2000030c 	.word	0x2000030c

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b538      	push	{r3, r4, r5, lr}
 800136e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff fff6 	bl	8001360 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001374:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001376:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001378:	d002      	beq.n	8001380 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <HAL_Delay+0x20>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	1b43      	subs	r3, r0, r5
 8001386:	42a3      	cmp	r3, r4
 8001388:	d3fa      	bcc.n	8001380 <HAL_Delay+0x14>
  {
  }
}
 800138a:	bd38      	pop	{r3, r4, r5, pc}
 800138c:	2000000c 	.word	0x2000000c

08001390 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001394:	2300      	movs	r3, #0
 8001396:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 80d6 	beq.w	800154a <HAL_ADC_Init+0x1ba>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800139e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80013a0:	4604      	mov	r4, r0
 80013a2:	2d00      	cmp	r5, #0
 80013a4:	f000 809f 	beq.w	80014e6 <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013a8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013aa:	6893      	ldr	r3, [r2, #8]
 80013ac:	0099      	lsls	r1, r3, #2
 80013ae:	d505      	bpl.n	80013bc <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013b0:	6893      	ldr	r3, [r2, #8]
 80013b2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ba:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013bc:	6893      	ldr	r3, [r2, #8]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	d419      	bmi.n	80013f6 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c2:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <HAL_ADC_Init+0x230>)
 80013c4:	487f      	ldr	r0, [pc, #508]	; (80015c4 <HAL_ADC_Init+0x234>)
 80013c6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80013c8:	6891      	ldr	r1, [r2, #8]
 80013ca:	099b      	lsrs	r3, r3, #6
 80013cc:	fba0 0303 	umull	r0, r3, r0, r3
 80013d0:	099b      	lsrs	r3, r3, #6
 80013d2:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80013d6:	3301      	adds	r3, #1
 80013d8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80013e2:	6091      	str	r1, [r2, #8]
 80013e4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	b12b      	cbz	r3, 80013f6 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80013ea:	9b01      	ldr	r3, [sp, #4]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80013f0:	9b01      	ldr	r3, [sp, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f9      	bne.n	80013ea <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013f6:	6893      	ldr	r3, [r2, #8]
 80013f8:	00de      	lsls	r6, r3, #3
 80013fa:	d466      	bmi.n	80014ca <HAL_ADC_Init+0x13a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001404:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800140c:	6893      	ldr	r3, [r2, #8]
 800140e:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8001412:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001416:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001418:	d15e      	bne.n	80014d8 <HAL_ADC_Init+0x148>
 800141a:	06dd      	lsls	r5, r3, #27
 800141c:	d45c      	bmi.n	80014d8 <HAL_ADC_Init+0x148>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001420:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800142a:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800142c:	07d9      	lsls	r1, r3, #31
 800142e:	d419      	bmi.n	8001464 <HAL_ADC_Init+0xd4>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001430:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001434:	f000 80a1 	beq.w	800157a <HAL_ADC_Init+0x1ea>
 8001438:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_ADC_Init+0x238>)
 800143a:	429a      	cmp	r2, r3
 800143c:	f000 80a6 	beq.w	800158c <HAL_ADC_Init+0x1fc>
 8001440:	4d62      	ldr	r5, [pc, #392]	; (80015cc <HAL_ADC_Init+0x23c>)
 8001442:	4963      	ldr	r1, [pc, #396]	; (80015d0 <HAL_ADC_Init+0x240>)
 8001444:	68ad      	ldr	r5, [r5, #8]
 8001446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	6889      	ldr	r1, [r1, #8]
 800144e:	432b      	orrs	r3, r5
 8001450:	430b      	orrs	r3, r1
 8001452:	07db      	lsls	r3, r3, #31
 8001454:	d406      	bmi.n	8001464 <HAL_ADC_Init+0xd4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001456:	495f      	ldr	r1, [pc, #380]	; (80015d4 <HAL_ADC_Init+0x244>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001458:	688b      	ldr	r3, [r1, #8]
 800145a:	6865      	ldr	r5, [r4, #4]
 800145c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001460:	432b      	orrs	r3, r5
 8001462:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8001464:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8001468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800146a:	432b      	orrs	r3, r5
 800146c:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800146e:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001470:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8001474:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001478:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800147a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800147e:	d05f      	beq.n	8001540 <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001480:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001482:	b121      	cbz	r1, 800148e <HAL_ADC_Init+0xfe>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001484:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001486:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800148a:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800148c:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800148e:	68d6      	ldr	r6, [r2, #12]
 8001490:	4951      	ldr	r1, [pc, #324]	; (80015d8 <HAL_ADC_Init+0x248>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001492:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001494:	4031      	ands	r1, r6
 8001496:	430b      	orrs	r3, r1
 8001498:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800149a:	6913      	ldr	r3, [r2, #16]
 800149c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014a0:	432b      	orrs	r3, r5
 80014a2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014a4:	6893      	ldr	r3, [r2, #8]
 80014a6:	075e      	lsls	r6, r3, #29
 80014a8:	d523      	bpl.n	80014f2 <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014aa:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014ac:	6963      	ldr	r3, [r4, #20]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d04e      	beq.n	8001550 <HAL_ADC_Init+0x1c0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014b4:	f023 030f 	bic.w	r3, r3, #15
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014bc:	f023 0303 	bic.w	r3, r3, #3
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80014c6:	b002      	add	sp, #8
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ca:	6893      	ldr	r3, [r2, #8]
 80014cc:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d0:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014d6:	d0a0      	beq.n	800141a <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80014da:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80014e2:	b002      	add	sp, #8
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80014e6:	f7ff fe0f 	bl	8001108 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80014ea:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80014ec:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80014f0:	e75a      	b.n	80013a8 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014f2:	6893      	ldr	r3, [r2, #8]
 80014f4:	071d      	lsls	r5, r3, #28
 80014f6:	d4d9      	bmi.n	80014ac <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014f8:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014fe:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8001500:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001502:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001506:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001508:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800150c:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001510:	430b      	orrs	r3, r1
 8001512:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001514:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8001516:	bb1d      	cbnz	r5, 8001560 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800151e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001522:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800152a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800152e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001532:	2b01      	cmp	r3, #1
 8001534:	d033      	beq.n	800159e <HAL_ADC_Init+0x20e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001536:	6913      	ldr	r3, [r2, #16]
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6113      	str	r3, [r2, #16]
 800153e:	e7b5      	b.n	80014ac <HAL_ADC_Init+0x11c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001540:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001542:	3901      	subs	r1, #1
 8001544:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001548:	e79a      	b.n	8001480 <HAL_ADC_Init+0xf0>
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
}
 800154c:	b002      	add	sp, #8
 800154e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001550:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001552:	6a23      	ldr	r3, [r4, #32]
 8001554:	f021 010f 	bic.w	r1, r1, #15
 8001558:	3b01      	subs	r3, #1
 800155a:	430b      	orrs	r3, r1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	e7ac      	b.n	80014ba <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001566:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800156a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800156e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001572:	432b      	orrs	r3, r5
 8001574:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001578:	e7d9      	b.n	800152e <HAL_ADC_Init+0x19e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800157a:	4913      	ldr	r1, [pc, #76]	; (80015c8 <HAL_ADC_Init+0x238>)
 800157c:	6893      	ldr	r3, [r2, #8]
 800157e:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001580:	430b      	orrs	r3, r1
 8001582:	07d9      	lsls	r1, r3, #31
 8001584:	f53f af6e 	bmi.w	8001464 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001588:	4914      	ldr	r1, [pc, #80]	; (80015dc <HAL_ADC_Init+0x24c>)
 800158a:	e765      	b.n	8001458 <HAL_ADC_Init+0xc8>
 800158c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001594:	430b      	orrs	r3, r1
 8001596:	07db      	lsls	r3, r3, #31
 8001598:	f53f af64 	bmi.w	8001464 <HAL_ADC_Init+0xd4>
 800159c:	e7f4      	b.n	8001588 <HAL_ADC_Init+0x1f8>
        MODIFY_REG(hadc->Instance->CFGR2,
 800159e:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 80015a2:	6911      	ldr	r1, [r2, #16]
 80015a4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80015a6:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80015aa:	f021 0104 	bic.w	r1, r1, #4
 80015ae:	4333      	orrs	r3, r6
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80015b4:	432b      	orrs	r3, r5
 80015b6:	430b      	orrs	r3, r1
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6113      	str	r3, [r2, #16]
 80015be:	e775      	b.n	80014ac <HAL_ADC_Init+0x11c>
 80015c0:	20000008 	.word	0x20000008
 80015c4:	053e2d63 	.word	0x053e2d63
 80015c8:	50000100 	.word	0x50000100
 80015cc:	50000400 	.word	0x50000400
 80015d0:	50000600 	.word	0x50000600
 80015d4:	50000700 	.word	0x50000700
 80015d8:	fff04007 	.word	0xfff04007
 80015dc:	50000300 	.word	0x50000300

080015e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e2:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80015e6:	b083      	sub	sp, #12
 80015e8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80015ea:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80015f2:	f000 8150 	beq.w	8001896 <HAL_ADC_ConfigChannel+0x2b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015f6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015fe:	6894      	ldr	r4, [r2, #8]
 8001600:	0766      	lsls	r6, r4, #29
 8001602:	d450      	bmi.n	80016a6 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(*preg,
 8001604:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001608:	09a6      	lsrs	r6, r4, #6
 800160a:	f102 0530 	add.w	r5, r2, #48	; 0x30
 800160e:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8001612:	f004 041f 	and.w	r4, r4, #31
 8001616:	5977      	ldr	r7, [r6, r5]
 8001618:	f04f 0c1f 	mov.w	ip, #31
 800161c:	fa0c fc04 	lsl.w	ip, ip, r4
 8001620:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001624:	ea27 070c 	bic.w	r7, r7, ip
 8001628:	40a0      	lsls	r0, r4
 800162a:	4338      	orrs	r0, r7
 800162c:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800162e:	6890      	ldr	r0, [r2, #8]
 8001630:	0745      	lsls	r5, r0, #29
 8001632:	f140 80a5 	bpl.w	8001780 <HAL_ADC_ConfigChannel+0x1a0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001636:	6890      	ldr	r0, [r2, #8]
 8001638:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800163a:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800163c:	07e4      	lsls	r4, r4, #31
 800163e:	d53b      	bpl.n	80016b8 <HAL_ADC_ConfigChannel+0xd8>
 8001640:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001642:	49c2      	ldr	r1, [pc, #776]	; (800194c <HAL_ADC_ConfigChannel+0x36c>)
 8001644:	420c      	tst	r4, r1
 8001646:	d02c      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001648:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800164c:	f000 8121 	beq.w	8001892 <HAL_ADC_ConfigChannel+0x2b2>
 8001650:	4dbf      	ldr	r5, [pc, #764]	; (8001950 <HAL_ADC_ConfigChannel+0x370>)
 8001652:	49c0      	ldr	r1, [pc, #768]	; (8001954 <HAL_ADC_ConfigChannel+0x374>)
 8001654:	48c0      	ldr	r0, [pc, #768]	; (8001958 <HAL_ADC_ConfigChannel+0x378>)
 8001656:	42aa      	cmp	r2, r5
 8001658:	bf18      	it	ne
 800165a:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800165c:	6888      	ldr	r0, [r1, #8]

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800165e:	49bf      	ldr	r1, [pc, #764]	; (800195c <HAL_ADC_ConfigChannel+0x37c>)
 8001660:	428c      	cmp	r4, r1
 8001662:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8001666:	f000 8119 	beq.w	800189c <HAL_ADC_ConfigChannel+0x2bc>
 800166a:	49bd      	ldr	r1, [pc, #756]	; (8001960 <HAL_ADC_ConfigChannel+0x380>)
 800166c:	428c      	cmp	r4, r1
 800166e:	f000 8115 	beq.w	800189c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001672:	49bc      	ldr	r1, [pc, #752]	; (8001964 <HAL_ADC_ConfigChannel+0x384>)
 8001674:	428c      	cmp	r4, r1
 8001676:	f040 814d 	bne.w	8001914 <HAL_ADC_ConfigChannel+0x334>
 800167a:	01c0      	lsls	r0, r0, #7
 800167c:	d411      	bmi.n	80016a2 <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800167e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001682:	f000 822c 	beq.w	8001ade <HAL_ADC_ConfigChannel+0x4fe>
 8001686:	4cb2      	ldr	r4, [pc, #712]	; (8001950 <HAL_ADC_ConfigChannel+0x370>)
 8001688:	49b2      	ldr	r1, [pc, #712]	; (8001954 <HAL_ADC_ConfigChannel+0x374>)
 800168a:	48b3      	ldr	r0, [pc, #716]	; (8001958 <HAL_ADC_ConfigChannel+0x378>)
 800168c:	42a2      	cmp	r2, r4
 800168e:	bf0c      	ite	eq
 8001690:	460a      	moveq	r2, r1
 8001692:	4602      	movne	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001694:	6891      	ldr	r1, [r2, #8]
 8001696:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800169a:	430d      	orrs	r5, r1
 800169c:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 80016a0:	6095      	str	r5, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a2:	2000      	movs	r0, #0
}
 80016a4:	e003      	b.n	80016ae <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016a8:	f042 0220 	orr.w	r2, r2, #32
 80016ac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80016b4:	b003      	add	sp, #12
 80016b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80016b8:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80016ba:	4cab      	ldr	r4, [pc, #684]	; (8001968 <HAL_ADC_ConfigChannel+0x388>)
 80016bc:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016c0:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 800197c <HAL_ADC_ConfigChannel+0x39c>
 80016c4:	f006 0718 	and.w	r7, r6, #24
 80016c8:	40fc      	lsrs	r4, r7
 80016ca:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80016ce:	4004      	ands	r4, r0
 80016d0:	ea25 0507 	bic.w	r5, r5, r7
 80016d4:	432c      	orrs	r4, r5
 80016d6:	4566      	cmp	r6, ip
 80016d8:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80016dc:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016de:	d1b0      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016e0:	2f00      	cmp	r7, #0
 80016e2:	f000 8104 	beq.w	80018ee <HAL_ADC_ConfigChannel+0x30e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016ea:	2c00      	cmp	r4, #0
 80016ec:	f000 819c 	beq.w	8001a28 <HAL_ADC_ConfigChannel+0x448>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80016f0:	fab4 f484 	clz	r4, r4
 80016f4:	3401      	adds	r4, #1
 80016f6:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016fa:	2c09      	cmp	r4, #9
 80016fc:	f240 8194 	bls.w	8001a28 <HAL_ADC_ConfigChannel+0x448>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001704:	2d00      	cmp	r5, #0
 8001706:	f000 81f0 	beq.w	8001aea <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 800170a:	fab5 f585 	clz	r5, r5
 800170e:	3501      	adds	r5, #1
 8001710:	06ad      	lsls	r5, r5, #26
 8001712:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800171a:	2c00      	cmp	r4, #0
 800171c:	f000 81e3 	beq.w	8001ae6 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8001720:	fab4 f484 	clz	r4, r4
 8001724:	3401      	adds	r4, #1
 8001726:	f004 041f 	and.w	r4, r4, #31
 800172a:	2601      	movs	r6, #1
 800172c:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001730:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001736:	2800      	cmp	r0, #0
 8001738:	f000 81d3 	beq.w	8001ae2 <HAL_ADC_ConfigChannel+0x502>
  return __builtin_clz(value);
 800173c:	fab0 f480 	clz	r4, r0
 8001740:	3401      	adds	r4, #1
 8001742:	f004 041f 	and.w	r4, r4, #31
 8001746:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800174a:	f1a4 001e 	sub.w	r0, r4, #30
 800174e:	0500      	lsls	r0, r0, #20
 8001750:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001754:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001756:	0dc7      	lsrs	r7, r0, #23
 8001758:	f007 0704 	and.w	r7, r7, #4
 800175c:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8001760:	688e      	ldr	r6, [r1, #8]
 8001762:	597c      	ldr	r4, [r7, r5]
 8001764:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001768:	f04f 0c07 	mov.w	ip, #7
 800176c:	fa0c fc00 	lsl.w	ip, ip, r0
 8001770:	ea24 040c 	bic.w	r4, r4, ip
 8001774:	fa06 f000 	lsl.w	r0, r6, r0
 8001778:	4320      	orrs	r0, r4
 800177a:	5178      	str	r0, [r7, r5]
 800177c:	680c      	ldr	r4, [r1, #0]
}
 800177e:	e760      	b.n	8001642 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001780:	6890      	ldr	r0, [r2, #8]
 8001782:	f010 0008 	ands.w	r0, r0, #8
 8001786:	f040 8082 	bne.w	800188e <HAL_ADC_ConfigChannel+0x2ae>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800178a:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800178c:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800178e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001792:	f000 80f7 	beq.w	8001984 <HAL_ADC_ConfigChannel+0x3a4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001796:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 800179a:	f00c 0c04 	and.w	ip, ip, #4
 800179e:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80017a2:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80017a6:	f85c 5007 	ldr.w	r5, [ip, r7]
 80017aa:	f04f 0e07 	mov.w	lr, #7
 80017ae:	fa0e fe06 	lsl.w	lr, lr, r6
 80017b2:	40b4      	lsls	r4, r6
 80017b4:	ea25 050e 	bic.w	r5, r5, lr
 80017b8:	432c      	orrs	r4, r5
 80017ba:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017be:	6954      	ldr	r4, [r2, #20]
 80017c0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80017c4:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017c6:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017ca:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017cc:	f1bc 0f04 	cmp.w	ip, #4
 80017d0:	d02e      	beq.n	8001830 <HAL_ADC_ConfigChannel+0x250>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d2:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 80017d6:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001980 <HAL_ADC_ConfigChannel+0x3a0>
 80017da:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 80017de:	680f      	ldr	r7, [r1, #0]
 80017e0:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017e4:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80017e8:	694d      	ldr	r5, [r1, #20]
 80017ea:	0076      	lsls	r6, r6, #1
 80017ec:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80017f0:	40b5      	lsls	r5, r6
 80017f2:	ea47 070e 	orr.w	r7, r7, lr
 80017f6:	433d      	orrs	r5, r7
 80017f8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80017fc:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001800:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8001802:	698e      	ldr	r6, [r1, #24]
 8001804:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8001808:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800180c:	4335      	orrs	r5, r6
 800180e:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001812:	690e      	ldr	r6, [r1, #16]
 8001814:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8001816:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 800181a:	2f01      	cmp	r7, #1
 800181c:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8001820:	bf08      	it	eq
 8001822:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8001826:	4328      	orrs	r0, r5
 8001828:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 800182c:	6808      	ldr	r0, [r1, #0]
}
 800182e:	e704      	b.n	800163a <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001830:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001832:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001834:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001836:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800183a:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800183e:	2d00      	cmp	r5, #0
 8001840:	f040 80b4 	bne.w	80019ac <HAL_ADC_ConfigChannel+0x3cc>
 8001844:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001848:	42ac      	cmp	r4, r5
 800184a:	f000 8111 	beq.w	8001a70 <HAL_ADC_ConfigChannel+0x490>
 800184e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001850:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001852:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001856:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800185a:	f102 0764 	add.w	r7, r2, #100	; 0x64
 800185e:	42ae      	cmp	r6, r5
 8001860:	f000 812b 	beq.w	8001aba <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001864:	68a6      	ldr	r6, [r4, #8]
 8001866:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001868:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800186c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001870:	42ae      	cmp	r6, r5
 8001872:	f000 8111 	beq.w	8001a98 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001876:	68e6      	ldr	r6, [r4, #12]
 8001878:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800187a:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800187c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001880:	42b5      	cmp	r5, r6
 8001882:	f47f aeda 	bne.w	800163a <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8001886:	6820      	ldr	r0, [r4, #0]
 8001888:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800188c:	6020      	str	r0, [r4, #0]
 800188e:	6808      	ldr	r0, [r1, #0]
}
 8001890:	e6d3      	b.n	800163a <HAL_ADC_ConfigChannel+0x5a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001892:	4930      	ldr	r1, [pc, #192]	; (8001954 <HAL_ADC_ConfigChannel+0x374>)
 8001894:	e6e2      	b.n	800165c <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8001896:	2002      	movs	r0, #2
}
 8001898:	b003      	add	sp, #12
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800189c:	0201      	lsls	r1, r0, #8
 800189e:	f53f af00 	bmi.w	80016a2 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018a2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80018a6:	d033      	beq.n	8001910 <HAL_ADC_ConfigChannel+0x330>
 80018a8:	4930      	ldr	r1, [pc, #192]	; (800196c <HAL_ADC_ConfigChannel+0x38c>)
 80018aa:	428a      	cmp	r2, r1
 80018ac:	f47f aef9 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018b0:	4829      	ldr	r0, [pc, #164]	; (8001958 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b2:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <HAL_ADC_ConfigChannel+0x390>)
 80018b4:	4c2f      	ldr	r4, [pc, #188]	; (8001974 <HAL_ADC_ConfigChannel+0x394>)
 80018b6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018b8:	6881      	ldr	r1, [r0, #8]
 80018ba:	0992      	lsrs	r2, r2, #6
 80018bc:	fba4 4202 	umull	r4, r2, r4, r2
 80018c0:	0992      	lsrs	r2, r2, #6
 80018c2:	3201      	adds	r2, #1
 80018c4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80018c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018cc:	430d      	orrs	r5, r1
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 80018d4:	6085      	str	r5, [r0, #8]
 80018d6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80018d8:	9a01      	ldr	r2, [sp, #4]
 80018da:	2a00      	cmp	r2, #0
 80018dc:	f43f aee1 	beq.w	80016a2 <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 80018e0:	9a01      	ldr	r2, [sp, #4]
 80018e2:	3a01      	subs	r2, #1
 80018e4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80018e6:	9a01      	ldr	r2, [sp, #4]
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d1f9      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x300>
 80018ec:	e6d9      	b.n	80016a2 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018ee:	0e80      	lsrs	r0, r0, #26
 80018f0:	1c44      	adds	r4, r0, #1
 80018f2:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018f6:	2e09      	cmp	r6, #9
 80018f8:	f200 8088 	bhi.w	8001a0c <HAL_ADC_ConfigChannel+0x42c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018fc:	06a5      	lsls	r5, r4, #26
 80018fe:	2401      	movs	r4, #1
 8001900:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001904:	40b4      	lsls	r4, r6
 8001906:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800190a:	4325      	orrs	r5, r4
 800190c:	0500      	lsls	r0, r0, #20
 800190e:	e721      	b.n	8001754 <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001910:	4810      	ldr	r0, [pc, #64]	; (8001954 <HAL_ADC_ConfigChannel+0x374>)
 8001912:	e7ce      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x2d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001914:	4918      	ldr	r1, [pc, #96]	; (8001978 <HAL_ADC_ConfigChannel+0x398>)
 8001916:	428c      	cmp	r4, r1
 8001918:	f47f aec3 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800191c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001920:	f47f aebf 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001924:	490a      	ldr	r1, [pc, #40]	; (8001950 <HAL_ADC_ConfigChannel+0x370>)
 8001926:	428a      	cmp	r2, r1
 8001928:	f43f aebb 	beq.w	80016a2 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800192c:	4c0a      	ldr	r4, [pc, #40]	; (8001958 <HAL_ADC_ConfigChannel+0x378>)
 800192e:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8001932:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001936:	bf18      	it	ne
 8001938:	4621      	movne	r1, r4
 800193a:	688a      	ldr	r2, [r1, #8]
 800193c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001940:	432a      	orrs	r2, r5
 8001942:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001946:	608a      	str	r2, [r1, #8]
}
 8001948:	e6b1      	b.n	80016ae <HAL_ADC_ConfigChannel+0xce>
 800194a:	bf00      	nop
 800194c:	80080000 	.word	0x80080000
 8001950:	50000100 	.word	0x50000100
 8001954:	50000300 	.word	0x50000300
 8001958:	50000700 	.word	0x50000700
 800195c:	c3210000 	.word	0xc3210000
 8001960:	90c00010 	.word	0x90c00010
 8001964:	c7520000 	.word	0xc7520000
 8001968:	0007ffff 	.word	0x0007ffff
 800196c:	50000600 	.word	0x50000600
 8001970:	20000008 	.word	0x20000008
 8001974:	053e2d63 	.word	0x053e2d63
 8001978:	cb840000 	.word	0xcb840000
 800197c:	407f0000 	.word	0x407f0000
 8001980:	03fff000 	.word	0x03fff000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001984:	0df5      	lsrs	r5, r6, #23
 8001986:	f102 0414 	add.w	r4, r2, #20
 800198a:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800198e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8001992:	592f      	ldr	r7, [r5, r4]
 8001994:	f04f 0c07 	mov.w	ip, #7
 8001998:	fa0c f606 	lsl.w	r6, ip, r6
 800199c:	ea27 0606 	bic.w	r6, r7, r6
 80019a0:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019a2:	6954      	ldr	r4, [r2, #20]
 80019a4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80019a8:	6154      	str	r4, [r2, #20]
}
 80019aa:	e70c      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x1e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80019b0:	b11d      	cbz	r5, 80019ba <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 80019b2:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019b6:	42ac      	cmp	r4, r5
 80019b8:	d05a      	beq.n	8001a70 <HAL_ADC_ConfigChannel+0x490>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019ba:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80019bc:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019be:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019c2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80019c6:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80019ce:	b11d      	cbz	r5, 80019d8 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80019d0:	fab5 f585 	clz	r5, r5
 80019d4:	42ae      	cmp	r6, r5
 80019d6:	d070      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019d8:	68a5      	ldr	r5, [r4, #8]
 80019da:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019dc:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019e0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80019e8:	b11d      	cbz	r5, 80019f2 <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 80019ea:	fab5 f585 	clz	r5, r5
 80019ee:	42ae      	cmp	r6, r5
 80019f0:	d052      	beq.n	8001a98 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f2:	68e5      	ldr	r5, [r4, #12]
 80019f4:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f6:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019f8:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001a00:	2d00      	cmp	r5, #0
 8001a02:	f43f ae1a 	beq.w	800163a <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8001a06:	fab5 f585 	clz	r5, r5
 8001a0a:	e739      	b.n	8001880 <HAL_ADC_ConfigChannel+0x2a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a0c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001a10:	06a5      	lsls	r5, r4, #26
 8001a12:	381e      	subs	r0, #30
 8001a14:	2401      	movs	r4, #1
 8001a16:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001a1a:	fa04 f606 	lsl.w	r6, r4, r6
 8001a1e:	0500      	lsls	r0, r0, #20
 8001a20:	4335      	orrs	r5, r6
 8001a22:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8001a26:	e695      	b.n	8001754 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	d064      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001a30:	fab5 f585 	clz	r5, r5
 8001a34:	3501      	adds	r5, #1
 8001a36:	06ad      	lsls	r5, r5, #26
 8001a38:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001a40:	2c00      	cmp	r4, #0
 8001a42:	d058      	beq.n	8001af6 <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 8001a44:	fab4 f484 	clz	r4, r4
 8001a48:	3401      	adds	r4, #1
 8001a4a:	f004 041f 	and.w	r4, r4, #31
 8001a4e:	2601      	movs	r6, #1
 8001a50:	fa06 f404 	lsl.w	r4, r6, r4
 8001a54:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d048      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 8001a5e:	fab0 f480 	clz	r4, r0
 8001a62:	3401      	adds	r4, #1
 8001a64:	f004 041f 	and.w	r4, r4, #31
 8001a68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001a6c:	0520      	lsls	r0, r4, #20
 8001a6e:	e671      	b.n	8001754 <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 8001a70:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001a72:	4614      	mov	r4, r2
 8001a74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001a78:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a7c:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a7e:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8001a80:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001a82:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a86:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8a:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a8e:	2d00      	cmp	r5, #0
 8001a90:	d19b      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x3ea>
 8001a92:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001a96:	e6e2      	b.n	800185e <HAL_ADC_ConfigChannel+0x27e>
  MODIFY_REG(*preg,
 8001a98:	6838      	ldr	r0, [r7, #0]
 8001a9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001a9e:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001aa0:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001aa2:	68e5      	ldr	r5, [r4, #12]
 8001aa4:	68e6      	ldr	r6, [r4, #12]
 8001aa6:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aaa:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aae:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ab0:	2d00      	cmp	r5, #0
 8001ab2:	d1a3      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x41c>
 8001ab4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001ab8:	e6e2      	b.n	8001880 <HAL_ADC_ConfigChannel+0x2a0>
  MODIFY_REG(*preg,
 8001aba:	6838      	ldr	r0, [r7, #0]
 8001abc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001ac0:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ac2:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ac4:	68a5      	ldr	r5, [r4, #8]
 8001ac6:	68a6      	ldr	r6, [r4, #8]
 8001ac8:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001acc:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad0:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ad4:	2d00      	cmp	r5, #0
 8001ad6:	d185      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x404>
 8001ad8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001adc:	e6c8      	b.n	8001870 <HAL_ADC_ConfigChannel+0x290>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_ADC_ConfigChannel+0x520>)
 8001ae0:	e5d8      	b.n	8001694 <HAL_ADC_ConfigChannel+0xb4>
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <HAL_ADC_ConfigChannel+0x524>)
 8001ae4:	e636      	b.n	8001754 <HAL_ADC_ConfigChannel+0x174>
 8001ae6:	2402      	movs	r4, #2
 8001ae8:	e622      	b.n	8001730 <HAL_ADC_ConfigChannel+0x150>
 8001aea:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001aee:	e612      	b.n	8001716 <HAL_ADC_ConfigChannel+0x136>
 8001af0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001af4:	e62e      	b.n	8001754 <HAL_ADC_ConfigChannel+0x174>
 8001af6:	2402      	movs	r4, #2
 8001af8:	e7ac      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x474>
 8001afa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001afe:	e79d      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x45c>
 8001b00:	50000300 	.word	0x50000300
 8001b04:	fe500000 	.word	0xfe500000

08001b08 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b08:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	07d1      	lsls	r1, r2, #31
 8001b0e:	d501      	bpl.n	8001b14 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b10:	2000      	movs	r0, #0
}
 8001b12:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001b14:	6899      	ldr	r1, [r3, #8]
 8001b16:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <ADC_Enable+0x74>)
 8001b18:	4211      	tst	r1, r2
{
 8001b1a:	b570      	push	{r4, r5, r6, lr}
 8001b1c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001b1e:	d122      	bne.n	8001b66 <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4d17      	ldr	r5, [pc, #92]	; (8001b80 <ADC_Enable+0x78>)
 8001b24:	402a      	ands	r2, r5
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fc18 	bl	8001360 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b30:	6833      	ldr	r3, [r6, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	07d2      	lsls	r2, r2, #31
    tickstart = HAL_GetTick();
 8001b36:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b38:	d413      	bmi.n	8001b62 <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b3a:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b3c:	07d0      	lsls	r0, r2, #31
 8001b3e:	d404      	bmi.n	8001b4a <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	402a      	ands	r2, r5
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b4a:	f7ff fc09 	bl	8001360 <HAL_GetTick>
 8001b4e:	1b03      	subs	r3, r0, r4
 8001b50:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b52:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b54:	d902      	bls.n	8001b5c <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	07d1      	lsls	r1, r2, #31
 8001b5a:	d504      	bpl.n	8001b66 <ADC_Enable+0x5e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	07d2      	lsls	r2, r2, #31
 8001b60:	d5eb      	bpl.n	8001b3a <ADC_Enable+0x32>
  return HAL_OK;
 8001b62:	2000      	movs	r0, #0
}
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b66:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6633      	str	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8001b76:	2001      	movs	r0, #1
}
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	bf00      	nop
 8001b7c:	8000003f 	.word	0x8000003f
 8001b80:	7fffffc0 	.word	0x7fffffc0

08001b84 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b84:	6803      	ldr	r3, [r0, #0]
 8001b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8001b8a:	b570      	push	{r4, r5, r6, lr}
 8001b8c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b8e:	d04d      	beq.n	8001c2c <HAL_ADC_Start+0xa8>
 8001b90:	483a      	ldr	r0, [pc, #232]	; (8001c7c <HAL_ADC_Start+0xf8>)
 8001b92:	4a3b      	ldr	r2, [pc, #236]	; (8001c80 <HAL_ADC_Start+0xfc>)
 8001b94:	493b      	ldr	r1, [pc, #236]	; (8001c84 <HAL_ADC_Start+0x100>)
 8001b96:	4283      	cmp	r3, r0
 8001b98:	bf18      	it	ne
 8001b9a:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b9c:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b9e:	689d      	ldr	r5, [r3, #8]
 8001ba0:	f015 0504 	ands.w	r5, r5, #4
 8001ba4:	d140      	bne.n	8001c28 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8001ba6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d03c      	beq.n	8001c28 <HAL_ADC_Start+0xa4>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7ff ffa7 	bl	8001b08 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	d138      	bne.n	8001c30 <HAL_ADC_Start+0xac>
      ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	492e      	ldr	r1, [pc, #184]	; (8001c7c <HAL_ADC_Start+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bd0:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bd2:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bd8:	d045      	beq.n	8001c66 <HAL_ADC_Start+0xe2>
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_ADC_Start+0x104>)
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d047      	beq.n	8001c70 <HAL_ADC_Start+0xec>
 8001be0:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001be4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001be8:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001bec:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bf0:	bf1c      	itt	ne
 8001bf2:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8001bf4:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001bf8:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bfa:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 8001bfc:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bfe:	428a      	cmp	r2, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c00:	6015      	str	r5, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001c02:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c06:	d01c      	beq.n	8001c42 <HAL_ADC_Start+0xbe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c08:	2e09      	cmp	r6, #9
 8001c0a:	d914      	bls.n	8001c36 <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c12:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c14:	68cb      	ldr	r3, [r1, #12]
 8001c16:	019b      	lsls	r3, r3, #6
 8001c18:	d505      	bpl.n	8001c26 <HAL_ADC_Start+0xa2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c24:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8001c26:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8001c28:	2002      	movs	r0, #2
}
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_ADC_Start+0xfc>)
 8001c2e:	e7b5      	b.n	8001b9c <HAL_ADC_Start+0x18>
      __HAL_UNLOCK(hadc);
 8001c30:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8001c34:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c36:	f240 2321 	movw	r3, #545	; 0x221
 8001c3a:	fa23 f606 	lsr.w	r6, r3, r6
 8001c3e:	07f5      	lsls	r5, r6, #31
 8001c40:	d5e4      	bpl.n	8001c0c <HAL_ADC_Start+0x88>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c42:	68d3      	ldr	r3, [r2, #12]
 8001c44:	0199      	lsls	r1, r3, #6
 8001c46:	d505      	bpl.n	8001c54 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c52:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8001c54:	6893      	ldr	r3, [r2, #8]
 8001c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6093      	str	r3, [r2, #8]
}
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c66:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c6a:	2e00      	cmp	r6, #0
 8001c6c:	d1bd      	bne.n	8001bea <HAL_ADC_Start+0x66>
 8001c6e:	e7b8      	b.n	8001be2 <HAL_ADC_Start+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c70:	f501 7140 	add.w	r1, r1, #768	; 0x300
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c74:	2e00      	cmp	r6, #0
 8001c76:	d1b8      	bne.n	8001bea <HAL_ADC_Start+0x66>
 8001c78:	e7b3      	b.n	8001be2 <HAL_ADC_Start+0x5e>
 8001c7a:	bf00      	nop
 8001c7c:	50000100 	.word	0x50000100
 8001c80:	50000300 	.word	0x50000300
 8001c84:	50000700 	.word	0x50000700
 8001c88:	50000500 	.word	0x50000500

08001c8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001c8c:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c92:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8001c94:	2b01      	cmp	r3, #1
{
 8001c96:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8001c98:	d04d      	beq.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0xaa>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001c9a:	6802      	ldr	r2, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001c9c:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8001c9e:	2301      	movs	r3, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ca0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001ca4:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8001ca6:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001caa:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001cac:	d00c      	beq.n	8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8001cae:	4d4a      	ldr	r5, [pc, #296]	; (8001dd8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001cb0:	42aa      	cmp	r2, r5
 8001cb2:	d03e      	beq.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0xa6>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cb6:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cba:	f042 0220 	orr.w	r2, r2, #32
 8001cbe:	65c2      	str	r2, [r0, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	b01c      	add	sp, #112	; 0x70
 8001cc4:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	075b      	lsls	r3, r3, #29
 8001cce:	d50c      	bpl.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8001cd0:	6893      	ldr	r3, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001cd4:	f043 0320 	orr.w	r3, r3, #32
 8001cd8:	65c3      	str	r3, [r0, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	b01c      	add	sp, #112	; 0x70
 8001ce6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce8:	4770      	bx	lr
 8001cea:	6893      	ldr	r3, [r2, #8]
 8001cec:	075c      	lsls	r4, r3, #29
 8001cee:	d4f0      	bmi.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001cf0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001cf4:	d024      	beq.n	8001d40 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d021      	beq.n	8001d40 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cfc:	2e00      	cmp	r6, #0
 8001cfe:	d153      	bne.n	8001da8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d00:	4a37      	ldr	r2, [pc, #220]	; (8001de0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d02:	4c35      	ldr	r4, [pc, #212]	; (8001dd8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001d04:	6893      	ldr	r3, [r2, #8]
 8001d06:	4d37      	ldr	r5, [pc, #220]	; (8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001d08:	4937      	ldr	r1, [pc, #220]	; (8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d0a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d0e:	6093      	str	r3, [r2, #8]
 8001d10:	68a4      	ldr	r4, [r4, #8]
 8001d12:	68ab      	ldr	r3, [r5, #8]
 8001d14:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d16:	4323      	orrs	r3, r4
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	b37b      	cbz	r3, 8001d82 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d22:	6893      	ldr	r3, [r2, #8]
 8001d24:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d28:	f023 030f 	bic.w	r3, r3, #15
 8001d2c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e7d4      	b.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8001d32:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001d34:	e7c9      	b.n	8001cca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8001d36:	2302      	movs	r3, #2
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	b01c      	add	sp, #112	; 0x70
 8001d3c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3e:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d40:	b30e      	cbz	r6, 8001d86 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001d42:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8001d44:	684d      	ldr	r5, [r1, #4]
 8001d46:	6893      	ldr	r3, [r2, #8]
 8001d48:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8001d4c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d50:	432b      	orrs	r3, r5
 8001d52:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8001d56:	6093      	str	r3, [r2, #8]
 8001d58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d5e:	6894      	ldr	r4, [r2, #8]
 8001d60:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d62:	4323      	orrs	r3, r4
 8001d64:	43db      	mvns	r3, r3
 8001d66:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	b143      	cbz	r3, 8001d82 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        MODIFY_REG(tmpADC_Common->CCR,
 8001d70:	6894      	ldr	r4, [r2, #8]
 8001d72:	688b      	ldr	r3, [r1, #8]
 8001d74:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8001d78:	431e      	orrs	r6, r3
 8001d7a:	f021 010f 	bic.w	r1, r1, #15
 8001d7e:	430e      	orrs	r6, r1
 8001d80:	6096      	str	r6, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e7aa      	b.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8001d88:	6893      	ldr	r3, [r2, #8]
 8001d8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d8e:	6093      	str	r3, [r2, #8]
 8001d90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d96:	6891      	ldr	r1, [r2, #8]
 8001d98:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	e7bb      	b.n	8001d20 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001daa:	684d      	ldr	r5, [r1, #4]
 8001dac:	6893      	ldr	r3, [r2, #8]
 8001dae:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8001db2:	4f0c      	ldr	r7, [pc, #48]	; (8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001db4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001db8:	432b      	orrs	r3, r5
 8001dba:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8001dbe:	4d06      	ldr	r5, [pc, #24]	; (8001dd8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001dc0:	6093      	str	r3, [r2, #8]
 8001dc2:	4c09      	ldr	r4, [pc, #36]	; (8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001dc4:	68ad      	ldr	r5, [r5, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	68a4      	ldr	r4, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dca:	432b      	orrs	r3, r5
 8001dcc:	4323      	orrs	r3, r4
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	e7cb      	b.n	8001d6e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8001dd6:	bf00      	nop
 8001dd8:	50000400 	.word	0x50000400
 8001ddc:	50000100 	.word	0x50000100
 8001de0:	50000700 	.word	0x50000700
 8001de4:	50000500 	.word	0x50000500
 8001de8:	50000600 	.word	0x50000600
 8001dec:	50000300 	.word	0x50000300

08001df0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4908      	ldr	r1, [pc, #32]	; (8001e14 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8001df2:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df6:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001dfc:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfe:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8001e10:	60cb      	str	r3, [r1, #12]
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_NVIC_SetPriority+0x68>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e22:	f1c3 0507 	rsb	r5, r3, #7
 8001e26:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e28:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	bf28      	it	cs
 8001e2e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e30:	2c06      	cmp	r4, #6
 8001e32:	d919      	bls.n	8001e68 <HAL_NVIC_SetPriority+0x50>
 8001e34:	3b03      	subs	r3, #3
 8001e36:	f04f 34ff 	mov.w	r4, #4294967295
 8001e3a:	409c      	lsls	r4, r3
 8001e3c:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 34ff 	mov.w	r4, #4294967295
 8001e44:	40ac      	lsls	r4, r5
 8001e46:	ea21 0104 	bic.w	r1, r1, r4
 8001e4a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001e52:	db0c      	blt.n	8001e6e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e58:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001e5c:	0109      	lsls	r1, r1, #4
 8001e5e:	b2c9      	uxtb	r1, r1
 8001e60:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e64:	bc30      	pop	{r4, r5}
 8001e66:	4770      	bx	lr
 8001e68:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	e7e8      	b.n	8001e40 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_NVIC_SetPriority+0x6c>)
 8001e70:	f000 000f 	and.w	r0, r0, #15
 8001e74:	0109      	lsls	r1, r1, #4
 8001e76:	4403      	add	r3, r0
 8001e78:	b2c9      	uxtb	r1, r1
 8001e7a:	7619      	strb	r1, [r3, #24]
 8001e7c:	bc30      	pop	{r4, r5}
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00
 8001e84:	e000ecfc 	.word	0xe000ecfc

08001e88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	db07      	blt.n	8001e9c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_NVIC_EnableIRQ+0x18>)
 8001e8e:	f000 011f 	and.w	r1, r0, #31
 8001e92:	2301      	movs	r3, #1
 8001e94:	0940      	lsrs	r0, r0, #5
 8001e96:	408b      	lsls	r3, r1
 8001e98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8001ea4:	b188      	cbz	r0, 8001eca <HAL_DAC_Init+0x26>
{
 8001ea6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ea8:	7903      	ldrb	r3, [r0, #4]
 8001eaa:	4604      	mov	r4, r0
 8001eac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eb0:	b13b      	cbz	r3, 8001ec2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001eb2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eb4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001eb6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eb8:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001eba:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001ebc:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001ebe:	4618      	mov	r0, r3
}
 8001ec0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001ec2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001ec4:	f7ff f950 	bl	8001168 <HAL_DAC_MspInit>
 8001ec8:	e7f3      	b.n	8001eb2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8001eca:	2001      	movs	r0, #1
}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop

08001ed0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ed2:	7943      	ldrb	r3, [r0, #5]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d02d      	beq.n	8001f34 <HAL_DAC_Start+0x64>
 8001ed8:	4604      	mov	r4, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eda:	2602      	movs	r6, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001edc:	6822      	ldr	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ede:	7126      	strb	r6, [r4, #4]
  __HAL_LOCK(hdac);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ee4:	460d      	mov	r5, r1
 8001ee6:	f005 0710 	and.w	r7, r5, #16
 8001eea:	6811      	ldr	r1, [r2, #0]
 8001eec:	fa00 f307 	lsl.w	r3, r0, r7
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8001ef4:	f7ff fa3a 	bl	800136c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	6813      	ldr	r3, [r2, #0]
  if (Channel == DAC_CHANNEL_1)
 8001efc:	b965      	cbnz	r5, 8001f18 <HAL_DAC_Start+0x48>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001efe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001f02:	42b3      	cmp	r3, r6
 8001f04:	d103      	bne.n	8001f0e <HAL_DAC_Start+0x3e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f06:	6853      	ldr	r3, [r2, #4]
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f0e:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f10:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001f12:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001f14:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8001f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f18:	40be      	lsls	r6, r7
 8001f1a:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 8001f1e:	42b3      	cmp	r3, r6
 8001f20:	d1f5      	bne.n	8001f0e <HAL_DAC_Start+0x3e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f22:	6853      	ldr	r3, [r2, #4]
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdac);
 8001f2a:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001f30:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 8001f32:	e7f0      	b.n	8001f16 <HAL_DAC_Start+0x46>
  __HAL_LOCK(hdac);
 8001f34:	2002      	movs	r0, #2
}
 8001f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f38 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001f38:	b410      	push	{r4}
 8001f3a:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001f3c:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0UL;
 8001f3e:	2400      	movs	r4, #0
 8001f40:	9401      	str	r4, [sp, #4]
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001f42:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8001f44:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8001f46:	b951      	cbnz	r1, 8001f5e <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001f48:	9901      	ldr	r1, [sp, #4]
 8001f4a:	3108      	adds	r1, #8
 8001f4c:	440a      	add	r2, r1
 8001f4e:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001f50:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8001f52:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8001f54:	6013      	str	r3, [r2, #0]
}
 8001f56:	b003      	add	sp, #12
 8001f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f5c:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001f5e:	9901      	ldr	r1, [sp, #4]
 8001f60:	3114      	adds	r1, #20
 8001f62:	440a      	add	r2, r1
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	e7f3      	b.n	8001f50 <HAL_DAC_SetValue+0x18>

08001f68 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f6c:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001f6e:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	f000 80c5 	beq.w	8002100 <HAL_DAC_ConfigChannel+0x198>
 8001f76:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f78:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8001f7a:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f7c:	2f04      	cmp	r7, #4
 8001f7e:	4606      	mov	r6, r0
 8001f80:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8001f82:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f84:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f86:	d077      	beq.n	8002078 <HAL_DAC_ConfigChannel+0x110>
 8001f88:	6803      	ldr	r3, [r0, #0]
 8001f8a:	f004 0410 	and.w	r4, r4, #16
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001f8e:	69ea      	ldr	r2, [r5, #28]
 8001f90:	2a01      	cmp	r2, #1
 8001f92:	d108      	bne.n	8001fa6 <HAL_DAC_ConfigChannel+0x3e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001f94:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f96:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001f98:	201f      	movs	r0, #31
 8001f9a:	40a0      	lsls	r0, r4
 8001f9c:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fa0:	40a2      	lsls	r2, r4
 8001fa2:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001fa6:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 8001fa8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001faa:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001fac:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001fae:	fa02 fc04 	lsl.w	ip, r2, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001fb2:	696a      	ldr	r2, [r5, #20]
 8001fb4:	d05e      	beq.n	8002074 <HAL_DAC_ConfigChannel+0x10c>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001fb6:	2902      	cmp	r1, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001fb8:	bf16      	itet	ne
 8001fba:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 8001fbe:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001fc0:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001fc2:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001fc4:	792a      	ldrb	r2, [r5, #4]
 8001fc6:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001fcc:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001fd0:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001fd4:	fa08 f804 	lsl.w	r8, r8, r4
 8001fd8:	ea42 020c 	orr.w	r2, r2, ip
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001fdc:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001fe0:	ea20 0202 	bic.w	r2, r0, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001fe4:	7969      	ldrb	r1, [r5, #5]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001fe6:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001fea:	ea08 0802 	and.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001fee:	682a      	ldr	r2, [r5, #0]
 8001ff0:	bf08      	it	eq
 8001ff2:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001ff6:	2901      	cmp	r1, #1
 8001ff8:	bf08      	it	eq
 8001ffa:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001ffe:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002000:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002004:	d073      	beq.n	80020ee <HAL_DAC_ConfigChannel+0x186>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002006:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800200a:	40a7      	lsls	r7, r4
 800200c:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002010:	63df      	str	r7, [r3, #60]	; 0x3c
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002012:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 800201c:	40a5      	lsls	r5, r4
 800201e:	ea20 0005 	bic.w	r0, r0, r5
 8002022:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8002024:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002026:	f640 75fe 	movw	r5, #4094	; 0xffe
 800202a:	40a5      	lsls	r5, r4
 800202c:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002030:	fa01 f004 	lsl.w	r0, r1, r4
 8002034:	4328      	orrs	r0, r5
  hdac->Instance->CR = tmpreg1;
 8002036:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	25c0      	movs	r5, #192	; 0xc0
 800203c:	40a5      	lsls	r5, r4
 800203e:	ea20 0005 	bic.w	r0, r0, r5
 8002042:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002044:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002046:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002048:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800204c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002050:	f640 750f 	movw	r5, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002054:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002056:	fa05 f104 	lsl.w	r1, r5, r4
 800205a:	fa02 f404 	lsl.w	r4, r2, r4
 800205e:	ea20 0201 	bic.w	r2, r0, r1
 8002062:	4314      	orrs	r4, r2
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002064:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002066:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002068:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 800206a:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800206c:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 800206e:	7172      	strb	r2, [r6, #5]
}
 8002070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8002074:	2100      	movs	r1, #0
 8002076:	e7a4      	b.n	8001fc2 <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 8002078:	f7ff f972 	bl	8001360 <HAL_GetTick>
 800207c:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800207e:	b12c      	cbz	r4, 800208c <HAL_DAC_ConfigChannel+0x124>
 8002080:	e014      	b.n	80020ac <HAL_DAC_ConfigChannel+0x144>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002082:	f7ff f96d 	bl	8001360 <HAL_GetTick>
 8002086:	1bc3      	subs	r3, r0, r7
 8002088:	2b01      	cmp	r3, #1
 800208a:	d83c      	bhi.n	8002106 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800208c:	6833      	ldr	r3, [r6, #0]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	d4f6      	bmi.n	8002082 <HAL_DAC_ConfigChannel+0x11a>
      HAL_Delay(1);
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff f969 	bl	800136c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800209a:	6833      	ldr	r3, [r6, #0]
 800209c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
 80020a0:	e00e      	b.n	80020c0 <HAL_DAC_ConfigChannel+0x158>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80020a2:	f7ff f95d 	bl	8001360 <HAL_GetTick>
 80020a6:	1bc3      	subs	r3, r0, r7
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d82c      	bhi.n	8002106 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80020ac:	6833      	ldr	r3, [r6, #0]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	dbf6      	blt.n	80020a2 <HAL_DAC_ConfigChannel+0x13a>
      HAL_Delay(1U);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff f959 	bl	800136c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80020ba:	6833      	ldr	r3, [r6, #0]
 80020bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80020c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020c2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80020c4:	68af      	ldr	r7, [r5, #8]
 80020c6:	f004 0410 	and.w	r4, r4, #16
 80020ca:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80020ce:	40a0      	lsls	r0, r4
 80020d0:	ea22 0200 	bic.w	r2, r2, r0
 80020d4:	40a1      	lsls	r1, r4
 80020d6:	430a      	orrs	r2, r1
 80020d8:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80020da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020dc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80020de:	20ff      	movs	r0, #255	; 0xff
 80020e0:	40a0      	lsls	r0, r4
 80020e2:	ea22 0200 	bic.w	r2, r2, r0
 80020e6:	40a1      	lsls	r1, r4
 80020e8:	430a      	orrs	r2, r1
 80020ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80020ec:	e74f      	b.n	8001f8e <HAL_DAC_ConfigChannel+0x26>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80020ee:	f000 fd35 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_DAC_ConfigChannel+0x1bc>)
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d90e      	bls.n	8002116 <HAL_DAC_ConfigChannel+0x1ae>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80020f8:	6833      	ldr	r3, [r6, #0]
 80020fa:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80020fe:	e784      	b.n	800200a <HAL_DAC_ConfigChannel+0xa2>
  __HAL_LOCK(hdac);
 8002100:	2002      	movs	r0, #2
}
 8002102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002106:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002108:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 8002110:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002112:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 8002114:	e7ac      	b.n	8002070 <HAL_DAC_ConfigChannel+0x108>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_DAC_ConfigChannel+0x1c0>)
 8002118:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800211a:	bf88      	it	hi
 800211c:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
 8002120:	6833      	ldr	r3, [r6, #0]
 8002122:	e772      	b.n	800200a <HAL_DAC_ConfigChannel+0xa2>
 8002124:	09896800 	.word	0x09896800
 8002128:	04c4b400 	.word	0x04c4b400

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002130:	680e      	ldr	r6, [r1, #0]
{
 8002132:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002134:	2e00      	cmp	r6, #0
 8002136:	f000 808b 	beq.w	8002250 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800213a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8002310 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 800213e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002140:	2201      	movs	r2, #1
 8002142:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8002146:	ea14 0c06 	ands.w	ip, r4, r6
 800214a:	d07c      	beq.n	8002246 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214c:	684d      	ldr	r5, [r1, #4]
 800214e:	f025 0a10 	bic.w	sl, r5, #16
 8002152:	f10a 32ff 	add.w	r2, sl, #4294967295
 8002156:	2a01      	cmp	r2, #1
 8002158:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800215c:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002160:	d979      	bls.n	8002256 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 8002162:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002166:	fa02 f208 	lsl.w	r2, r2, r8
 800216a:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216e:	fa04 f408 	lsl.w	r4, r4, r8
 8002172:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8002174:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002176:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8002178:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217a:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800217e:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002180:	fa02 f208 	lsl.w	r2, r2, r8
 8002184:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002186:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8002188:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218a:	d55c      	bpl.n	8002246 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218c:	4c5a      	ldr	r4, [pc, #360]	; (80022f8 <HAL_GPIO_Init+0x1cc>)
 800218e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	6622      	str	r2, [r4, #96]	; 0x60
 8002196:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002198:	f023 0403 	bic.w	r4, r3, #3
 800219c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80021a0:	f002 0201 	and.w	r2, r2, #1
 80021a4:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80021a8:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021aa:	f003 0203 	and.w	r2, r3, #3
 80021ae:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80021b4:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021bc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021c0:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021c4:	d018      	beq.n	80021f8 <HAL_GPIO_Init+0xcc>
 80021c6:	4a4d      	ldr	r2, [pc, #308]	; (80022fc <HAL_GPIO_Init+0x1d0>)
 80021c8:	4290      	cmp	r0, r2
 80021ca:	f000 8084 	beq.w	80022d6 <HAL_GPIO_Init+0x1aa>
 80021ce:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <HAL_GPIO_Init+0x1d4>)
 80021d0:	4290      	cmp	r0, r2
 80021d2:	f000 8085 	beq.w	80022e0 <HAL_GPIO_Init+0x1b4>
 80021d6:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_GPIO_Init+0x1d8>)
 80021d8:	4290      	cmp	r0, r2
 80021da:	d076      	beq.n	80022ca <HAL_GPIO_Init+0x19e>
 80021dc:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <HAL_GPIO_Init+0x1dc>)
 80021de:	4290      	cmp	r0, r2
 80021e0:	f000 8084 	beq.w	80022ec <HAL_GPIO_Init+0x1c0>
 80021e4:	4a49      	ldr	r2, [pc, #292]	; (800230c <HAL_GPIO_Init+0x1e0>)
 80021e6:	4290      	cmp	r0, r2
 80021e8:	bf0c      	ite	eq
 80021ea:	f04f 0805 	moveq.w	r8, #5
 80021ee:	f04f 0806 	movne.w	r8, #6
 80021f2:	fa08 f209 	lsl.w	r2, r8, r9
 80021f6:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 80021fa:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80021fe:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002202:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8002204:	bf54      	ite	pl
 8002206:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8002208:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 800220c:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8002210:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002214:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8002216:	bf54      	ite	pl
 8002218:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800221a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 800221e:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002222:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002226:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8002228:	bf54      	ite	pl
 800222a:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800222c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8002230:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8002234:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002238:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 800223a:	bf54      	ite	pl
 800223c:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800223e:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 8002242:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8002246:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002248:	fa36 f203 	lsrs.w	r2, r6, r3
 800224c:	f47f af78 	bne.w	8002140 <HAL_GPIO_Init+0x14>
  }
}
 8002250:	b003      	add	sp, #12
 8002252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002256:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002258:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225c:	fa02 f208 	lsl.w	r2, r2, r8
 8002260:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002264:	68cf      	ldr	r7, [r1, #12]
 8002266:	fa07 f708 	lsl.w	r7, r7, r8
 800226a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 800226e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002270:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002272:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002276:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800227a:	465c      	mov	r4, fp
 800227c:	409c      	lsls	r4, r3
 800227e:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8002280:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002282:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002284:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002288:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002290:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002294:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8002298:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229a:	f47f af6d 	bne.w	8002178 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800229e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80022a2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022a6:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80022aa:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	f04f 0a0f 	mov.w	sl, #15
 80022b4:	fa0a fb02 	lsl.w	fp, sl, r2
 80022b8:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022bc:	690c      	ldr	r4, [r1, #16]
 80022be:	4094      	lsls	r4, r2
 80022c0:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80022c4:	f8c9 4020 	str.w	r4, [r9, #32]
 80022c8:	e756      	b.n	8002178 <HAL_GPIO_Init+0x4c>
 80022ca:	f04f 0803 	mov.w	r8, #3
 80022ce:	fa08 f209 	lsl.w	r2, r8, r9
 80022d2:	4317      	orrs	r7, r2
 80022d4:	e790      	b.n	80021f8 <HAL_GPIO_Init+0xcc>
 80022d6:	2201      	movs	r2, #1
 80022d8:	fa02 f209 	lsl.w	r2, r2, r9
 80022dc:	4317      	orrs	r7, r2
 80022de:	e78b      	b.n	80021f8 <HAL_GPIO_Init+0xcc>
 80022e0:	f04f 0802 	mov.w	r8, #2
 80022e4:	fa08 f209 	lsl.w	r2, r8, r9
 80022e8:	4317      	orrs	r7, r2
 80022ea:	e785      	b.n	80021f8 <HAL_GPIO_Init+0xcc>
 80022ec:	f04f 0804 	mov.w	r8, #4
 80022f0:	fa08 f209 	lsl.w	r2, r8, r9
 80022f4:	4317      	orrs	r7, r2
 80022f6:	e77f      	b.n	80021f8 <HAL_GPIO_Init+0xcc>
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000400 	.word	0x48000400
 8002300:	48000800 	.word	0x48000800
 8002304:	48000c00 	.word	0x48000c00
 8002308:	48001000 	.word	0x48001000
 800230c:	48001400 	.word	0x48001400
 8002310:	40010400 	.word	0x40010400

08002314 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002314:	b10a      	cbz	r2, 800231a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002316:	6181      	str	r1, [r0, #24]
 8002318:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800231a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop

08002320 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002320:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002322:	ea01 0203 	and.w	r2, r1, r3
 8002326:	ea21 0103 	bic.w	r1, r1, r3
 800232a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800232e:	6181      	str	r1, [r0, #24]
}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop

08002334 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002334:	4a3b      	ldr	r2, [pc, #236]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8002336:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002338:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800233a:	b968      	cbnz	r0, 8002358 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800233c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d014      	beq.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002346:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800234a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800234e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8002352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002356:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002358:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800235c:	d02f      	beq.n	80023be <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800235e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002366:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002368:	2000      	movs	r0, #0
}
 800236a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800236e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002370:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002374:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002376:	482d      	ldr	r0, [pc, #180]	; (800242c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002378:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800237c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8002386:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800238a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800238c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800238e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002390:	2332      	movs	r3, #50	; 0x32
 8002392:	fb03 f304 	mul.w	r3, r3, r4
 8002396:	fba0 0303 	umull	r0, r3, r0, r3
 800239a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800239e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a2:	d506      	bpl.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80023a4:	e000      	b.n	80023a8 <HAL_PWREx_ControlVoltageScaling+0x74>
 80023a6:	b123      	cbz	r3, 80023b2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80023a8:	6951      	ldr	r1, [r2, #20]
 80023aa:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80023ac:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b0:	d4f9      	bmi.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	055c      	lsls	r4, r3, #21
 80023b8:	d5d6      	bpl.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 80023ba:	2003      	movs	r0, #3
 80023bc:	e7c9      	b.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c6:	d009      	beq.n	80023dc <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 80023cc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80023d4:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80023da:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023dc:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80023e2:	4812      	ldr	r0, [pc, #72]	; (800242c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80023e8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ec:	6811      	ldr	r1, [r2, #0]
 80023ee:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80023f2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80023f6:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023f8:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fa:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023fc:	2332      	movs	r3, #50	; 0x32
 80023fe:	fb03 f304 	mul.w	r3, r3, r4
 8002402:	fba0 0303 	umull	r0, r3, r0, r3
 8002406:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002408:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800240a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800240e:	d5d0      	bpl.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002410:	e001      	b.n	8002416 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0cd      	beq.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002416:	6951      	ldr	r1, [r2, #20]
 8002418:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800241a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800241e:	d5c8      	bpl.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002420:	e7f7      	b.n	8002412 <HAL_PWREx_ControlVoltageScaling+0xde>
 8002422:	bf00      	nop
 8002424:	40007000 	.word	0x40007000
 8002428:	20000008 	.word	0x20000008
 800242c:	431bde83 	.word	0x431bde83

08002430 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002430:	2800      	cmp	r0, #0
 8002432:	f000 81c3 	beq.w	80027bc <HAL_RCC_OscConfig+0x38c>
{
 8002436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	6803      	ldr	r3, [r0, #0]
 800243c:	07d9      	lsls	r1, r3, #31
{
 800243e:	b082      	sub	sp, #8
 8002440:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	d52d      	bpl.n	80024a0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002444:	49b5      	ldr	r1, [pc, #724]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 8002446:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800244e:	2a0c      	cmp	r2, #12
 8002450:	f000 810a 	beq.w	8002668 <HAL_RCC_OscConfig+0x238>
 8002454:	2a08      	cmp	r2, #8
 8002456:	f000 810c 	beq.w	8002672 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245a:	6863      	ldr	r3, [r4, #4]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	f000 8133 	beq.w	80026ca <HAL_RCC_OscConfig+0x29a>
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	f000 819b 	beq.w	80027a2 <HAL_RCC_OscConfig+0x372>
 800246c:	4dab      	ldr	r5, [pc, #684]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 800246e:	682a      	ldr	r2, [r5, #0]
 8002470:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002474:	602a      	str	r2, [r5, #0]
 8002476:	682a      	ldr	r2, [r5, #0]
 8002478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800247c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 8128 	bne.w	80026d4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe ff6c 	bl	8001360 <HAL_GetTick>
 8002488:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248a:	e005      	b.n	8002498 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe ff68 	bl	8001360 <HAL_GetTick>
 8002490:	1b80      	subs	r0, r0, r6
 8002492:	2864      	cmp	r0, #100	; 0x64
 8002494:	f200 813b 	bhi.w	800270e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	039f      	lsls	r7, r3, #14
 800249c:	d4f6      	bmi.n	800248c <HAL_RCC_OscConfig+0x5c>
 800249e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a0:	079e      	lsls	r6, r3, #30
 80024a2:	d528      	bpl.n	80024f6 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a4:	4a9d      	ldr	r2, [pc, #628]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 80024a6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	f000 80ec 	beq.w	800268c <HAL_RCC_OscConfig+0x25c>
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	f000 80ee 	beq.w	8002696 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ba:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	4d97      	ldr	r5, [pc, #604]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8116 	beq.w	80026f0 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe ff48 	bl	8001360 <HAL_GetTick>
 80024d0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d2:	e005      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe ff44 	bl	8001360 <HAL_GetTick>
 80024d8:	1b80      	subs	r0, r0, r6
 80024da:	2802      	cmp	r0, #2
 80024dc:	f200 8117 	bhi.w	800270e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e0:	682b      	ldr	r3, [r5, #0]
 80024e2:	0558      	lsls	r0, r3, #21
 80024e4:	d5f6      	bpl.n	80024d4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	686b      	ldr	r3, [r5, #4]
 80024e8:	6922      	ldr	r2, [r4, #16]
 80024ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80024ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024f2:	606b      	str	r3, [r5, #4]
 80024f4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f6:	071a      	lsls	r2, r3, #28
 80024f8:	d519      	bpl.n	800252e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fa:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fc:	4d87      	ldr	r5, [pc, #540]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 809e 	beq.w	8002640 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8002504:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe ff26 	bl	8001360 <HAL_GetTick>
 8002514:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002516:	e005      	b.n	8002524 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe ff22 	bl	8001360 <HAL_GetTick>
 800251c:	1b80      	subs	r0, r0, r6
 800251e:	2802      	cmp	r0, #2
 8002520:	f200 80f5 	bhi.w	800270e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002524:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002528:	079f      	lsls	r7, r3, #30
 800252a:	d5f5      	bpl.n	8002518 <HAL_RCC_OscConfig+0xe8>
 800252c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252e:	0759      	lsls	r1, r3, #29
 8002530:	d541      	bpl.n	80025b6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002532:	4b7a      	ldr	r3, [pc, #488]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 8002534:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002536:	00d2      	lsls	r2, r2, #3
 8002538:	f100 80ed 	bmi.w	8002716 <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800253e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002542:	659a      	str	r2, [r3, #88]	; 0x58
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800254e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002550:	4e73      	ldr	r6, [pc, #460]	; (8002720 <HAL_RCC_OscConfig+0x2f0>)
 8002552:	6833      	ldr	r3, [r6, #0]
 8002554:	05df      	lsls	r7, r3, #23
 8002556:	f140 8113 	bpl.w	8002780 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255a:	68a3      	ldr	r3, [r4, #8]
 800255c:	2b01      	cmp	r3, #1
 800255e:	f000 80e3 	beq.w	8002728 <HAL_RCC_OscConfig+0x2f8>
 8002562:	2b05      	cmp	r3, #5
 8002564:	f000 8169 	beq.w	800283a <HAL_RCC_OscConfig+0x40a>
 8002568:	4e6c      	ldr	r6, [pc, #432]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 800256a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8002576:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 80d7 	bne.w	8002736 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe feea 	bl	8001360 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002590:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002592:	e005      	b.n	80025a0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fee4 	bl	8001360 <HAL_GetTick>
 8002598:	1bc0      	subs	r0, r0, r7
 800259a:	4540      	cmp	r0, r8
 800259c:	f200 80b7 	bhi.w	800270e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80025a4:	079a      	lsls	r2, r3, #30
 80025a6:	d4f5      	bmi.n	8002594 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a8:	b125      	cbz	r5, 80025b4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4a5c      	ldr	r2, [pc, #368]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 80025ac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	6593      	str	r3, [r2, #88]	; 0x58
 80025b4:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025b6:	069b      	lsls	r3, r3, #26
 80025b8:	d518      	bpl.n	80025ec <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025ba:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025bc:	4d57      	ldr	r5, [pc, #348]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80ca 	beq.w	8002758 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80025c4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe fec6 	bl	8001360 <HAL_GetTick>
 80025d4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025d6:	e005      	b.n	80025e4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d8:	f7fe fec2 	bl	8001360 <HAL_GetTick>
 80025dc:	1b80      	subs	r0, r0, r6
 80025de:	2802      	cmp	r0, #2
 80025e0:	f200 8095 	bhi.w	800270e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80025e8:	079f      	lsls	r7, r3, #30
 80025ea:	d5f5      	bpl.n	80025d8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ec:	69e0      	ldr	r0, [r4, #28]
 80025ee:	b318      	cbz	r0, 8002638 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f0:	4d4a      	ldr	r5, [pc, #296]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 80025f2:	68ab      	ldr	r3, [r5, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	f000 812c 	beq.w	8002856 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002600:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002606:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002608:	f000 80da 	beq.w	80027c0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800260c:	68eb      	ldr	r3, [r5, #12]
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002614:	68eb      	ldr	r3, [r5, #12]
 8002616:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fe9e 	bl	8001360 <HAL_GetTick>
 8002624:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002626:	e004      	b.n	8002632 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fe9a 	bl	8001360 <HAL_GetTick>
 800262c:	1b00      	subs	r0, r0, r4
 800262e:	2802      	cmp	r0, #2
 8002630:	d86d      	bhi.n	800270e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002632:	682b      	ldr	r3, [r5, #0]
 8002634:	019b      	lsls	r3, r3, #6
 8002636:	d4f7      	bmi.n	8002628 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8002638:	2000      	movs	r0, #0
}
 800263a:	b002      	add	sp, #8
 800263c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002640:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800264c:	f7fe fe88 	bl	8001360 <HAL_GetTick>
 8002650:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002652:	e004      	b.n	800265e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe fe84 	bl	8001360 <HAL_GetTick>
 8002658:	1b80      	subs	r0, r0, r6
 800265a:	2802      	cmp	r0, #2
 800265c:	d857      	bhi.n	800270e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800265e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002662:	0798      	lsls	r0, r3, #30
 8002664:	d4f6      	bmi.n	8002654 <HAL_RCC_OscConfig+0x224>
 8002666:	e761      	b.n	800252c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002668:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800266c:	2903      	cmp	r1, #3
 800266e:	f47f aef4 	bne.w	800245a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002672:	4a2a      	ldr	r2, [pc, #168]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	0392      	lsls	r2, r2, #14
 8002678:	f57f af12 	bpl.w	80024a0 <HAL_RCC_OscConfig+0x70>
 800267c:	6862      	ldr	r2, [r4, #4]
 800267e:	2a00      	cmp	r2, #0
 8002680:	f47f af0e 	bne.w	80024a0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8002684:	2001      	movs	r0, #1
}
 8002686:	b002      	add	sp, #8
 8002688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002690:	2a02      	cmp	r2, #2
 8002692:	f47f af12 	bne.w	80024ba <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	055d      	lsls	r5, r3, #21
 800269c:	d502      	bpl.n	80026a4 <HAL_RCC_OscConfig+0x274>
 800269e:	68e3      	ldr	r3, [r4, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 80026a6:	6920      	ldr	r0, [r4, #16]
 80026a8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026aa:	491e      	ldr	r1, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80026b0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80026b4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026b6:	6808      	ldr	r0, [r1, #0]
 80026b8:	f7fe fda6 	bl	8001208 <HAL_InitTick>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d1e1      	bne.n	8002684 <HAL_RCC_OscConfig+0x254>
 80026c0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c2:	071a      	lsls	r2, r3, #28
 80026c4:	f57f af33 	bpl.w	800252e <HAL_RCC_OscConfig+0xfe>
 80026c8:	e717      	b.n	80024fa <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026d4:	f7fe fe44 	bl	8001360 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d8:	4e10      	ldr	r6, [pc, #64]	; (800271c <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 80026da:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026dc:	e004      	b.n	80026e8 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026de:	f7fe fe3f 	bl	8001360 <HAL_GetTick>
 80026e2:	1b40      	subs	r0, r0, r5
 80026e4:	2864      	cmp	r0, #100	; 0x64
 80026e6:	d812      	bhi.n	800270e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e8:	6833      	ldr	r3, [r6, #0]
 80026ea:	039b      	lsls	r3, r3, #14
 80026ec:	d5f7      	bpl.n	80026de <HAL_RCC_OscConfig+0x2ae>
 80026ee:	e6d6      	b.n	800249e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026f8:	f7fe fe32 	bl	8001360 <HAL_GetTick>
 80026fc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fe:	682b      	ldr	r3, [r5, #0]
 8002700:	0559      	lsls	r1, r3, #21
 8002702:	d5dd      	bpl.n	80026c0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002704:	f7fe fe2c 	bl	8001360 <HAL_GetTick>
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	2802      	cmp	r0, #2
 800270c:	d9f7      	bls.n	80026fe <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 800270e:	2003      	movs	r0, #3
}
 8002710:	b002      	add	sp, #8
 8002712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2500      	movs	r5, #0
 8002718:	e71a      	b.n	8002550 <HAL_RCC_OscConfig+0x120>
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
 8002724:	20000010 	.word	0x20000010
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	4a65      	ldr	r2, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x490>)
 800272a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002736:	f7fe fe13 	bl	8001360 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273a:	4f61      	ldr	r7, [pc, #388]	; (80028c0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 800273c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002742:	e004      	b.n	800274e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe fe0c 	bl	8001360 <HAL_GetTick>
 8002748:	1b80      	subs	r0, r0, r6
 800274a:	4540      	cmp	r0, r8
 800274c:	d8df      	bhi.n	800270e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002752:	0799      	lsls	r1, r3, #30
 8002754:	d5f6      	bpl.n	8002744 <HAL_RCC_OscConfig+0x314>
 8002756:	e727      	b.n	80025a8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8002758:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002764:	f7fe fdfc 	bl	8001360 <HAL_GetTick>
 8002768:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800276a:	e004      	b.n	8002776 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800276c:	f7fe fdf8 	bl	8001360 <HAL_GetTick>
 8002770:	1b80      	subs	r0, r0, r6
 8002772:	2802      	cmp	r0, #2
 8002774:	d8cb      	bhi.n	800270e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002776:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800277a:	0798      	lsls	r0, r3, #30
 800277c:	d4f6      	bmi.n	800276c <HAL_RCC_OscConfig+0x33c>
 800277e:	e735      	b.n	80025ec <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002780:	6833      	ldr	r3, [r6, #0]
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002788:	f7fe fdea 	bl	8001360 <HAL_GetTick>
 800278c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278e:	6833      	ldr	r3, [r6, #0]
 8002790:	05d8      	lsls	r0, r3, #23
 8002792:	f53f aee2 	bmi.w	800255a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7fe fde3 	bl	8001360 <HAL_GetTick>
 800279a:	1bc0      	subs	r0, r0, r7
 800279c:	2802      	cmp	r0, #2
 800279e:	d9f6      	bls.n	800278e <HAL_RCC_OscConfig+0x35e>
 80027a0:	e7b5      	b.n	800270e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027a6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027b8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ba:	e78b      	b.n	80026d4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80027bc:	2001      	movs	r0, #1
}
 80027be:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80027c0:	f7fe fdce 	bl	8001360 <HAL_GetTick>
 80027c4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c6:	e004      	b.n	80027d2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe fdca 	bl	8001360 <HAL_GetTick>
 80027cc:	1b80      	subs	r0, r0, r6
 80027ce:	2802      	cmp	r0, #2
 80027d0:	d89d      	bhi.n	800270e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d2:	682b      	ldr	r3, [r5, #0]
 80027d4:	0199      	lsls	r1, r3, #6
 80027d6:	d4f7      	bmi.n	80027c8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d8:	68e9      	ldr	r1, [r5, #12]
 80027da:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <HAL_RCC_OscConfig+0x494>)
 80027dc:	6a22      	ldr	r2, [r4, #32]
 80027de:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80027e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80027e4:	400b      	ands	r3, r1
 80027e6:	4313      	orrs	r3, r2
 80027e8:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80027ec:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80027f0:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80027f4:	3801      	subs	r0, #1
 80027f6:	0849      	lsrs	r1, r1, #1
 80027f8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80027fc:	3901      	subs	r1, #1
 80027fe:	0852      	lsrs	r2, r2, #1
 8002800:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002804:	3a01      	subs	r2, #1
 8002806:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800280a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800280c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	4e2c      	ldr	r6, [pc, #176]	; (80028c0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8002810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002814:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002816:	68eb      	ldr	r3, [r5, #12]
 8002818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800281e:	f7fe fd9f 	bl	8001360 <HAL_GetTick>
 8002822:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002824:	e005      	b.n	8002832 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fd9b 	bl	8001360 <HAL_GetTick>
 800282a:	1b00      	subs	r0, r0, r4
 800282c:	2802      	cmp	r0, #2
 800282e:	f63f af6e 	bhi.w	800270e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	6833      	ldr	r3, [r6, #0]
 8002834:	019a      	lsls	r2, r3, #6
 8002836:	d5f6      	bpl.n	8002826 <HAL_RCC_OscConfig+0x3f6>
 8002838:	e6fe      	b.n	8002638 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCC_OscConfig+0x490>)
 800283c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002840:	f042 0204 	orr.w	r2, r2, #4
 8002844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002848:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002854:	e76f      	b.n	8002736 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002856:	2801      	cmp	r0, #1
 8002858:	f43f aeef 	beq.w	800263a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 800285c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285e:	6a22      	ldr	r2, [r4, #32]
 8002860:	f003 0103 	and.w	r1, r3, #3
 8002864:	4291      	cmp	r1, r2
 8002866:	f47f af0d 	bne.w	8002684 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800286a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800286c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002870:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002876:	f47f af05 	bne.w	8002684 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800287a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800287c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002880:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002884:	f47f aefe 	bne.w	8002684 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002888:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800288a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800288e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002892:	f47f aef7 	bne.w	8002684 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002896:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002898:	0852      	lsrs	r2, r2, #1
 800289a:	3a01      	subs	r2, #1
 800289c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028a0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80028a4:	f47f aeee 	bne.w	8002684 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80028aa:	0852      	lsrs	r2, r2, #1
 80028ac:	3a01      	subs	r2, #1
 80028ae:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80028b6:	bf14      	ite	ne
 80028b8:	2001      	movne	r0, #1
 80028ba:	2000      	moveq	r0, #0
 80028bc:	e6bd      	b.n	800263a <HAL_RCC_OscConfig+0x20a>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	019f800c 	.word	0x019f800c

080028c8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_RCC_GetSysClockFreq+0x64>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	f002 020c 	and.w	r2, r2, #12
 80028d0:	2a04      	cmp	r2, #4
 80028d2:	d027      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	f002 020c 	and.w	r2, r2, #12
 80028da:	2a08      	cmp	r2, #8
 80028dc:	d024      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	f002 020c 	and.w	r2, r2, #12
 80028e4:	2a0c      	cmp	r2, #12
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80028e8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80028ea:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ec:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028ee:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f0:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028f2:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f6:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 80028fa:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028fc:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002900:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002904:	bf0c      	ite	eq
 8002906:	480a      	ldreq	r0, [pc, #40]	; (8002930 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002908:	480a      	ldrne	r0, [pc, #40]	; (8002934 <HAL_RCC_GetSysClockFreq+0x6c>)
 800290a:	fbb0 f0f2 	udiv	r0, r0, r2
 800290e:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_GetSysClockFreq+0x64>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800291e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002922:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002924:	4803      	ldr	r0, [pc, #12]	; (8002934 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002926:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8002928:	4801      	ldr	r0, [pc, #4]	; (8002930 <HAL_RCC_GetSysClockFreq+0x68>)
 800292a:	4770      	bx	lr
 800292c:	40021000 	.word	0x40021000
 8002930:	007a1200 	.word	0x007a1200
 8002934:	00f42400 	.word	0x00f42400

08002938 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002938:	2800      	cmp	r0, #0
 800293a:	f000 80ef 	beq.w	8002b1c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293e:	4a7f      	ldr	r2, [pc, #508]	; (8002b3c <HAL_RCC_ClockConfig+0x204>)
{
 8002940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	6813      	ldr	r3, [r2, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	428b      	cmp	r3, r1
 800294c:	460d      	mov	r5, r1
 800294e:	4604      	mov	r4, r0
 8002950:	d20c      	bcs.n	800296c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	6813      	ldr	r3, [r2, #0]
 8002954:	f023 030f 	bic.w	r3, r3, #15
 8002958:	430b      	orrs	r3, r1
 800295a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	428b      	cmp	r3, r1
 8002964:	d002      	beq.n	800296c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002966:	2001      	movs	r0, #1
}
 8002968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	07de      	lsls	r6, r3, #31
 8002970:	d563      	bpl.n	8002a3a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	6862      	ldr	r2, [r4, #4]
 8002974:	2a03      	cmp	r2, #3
 8002976:	f000 809a 	beq.w	8002aae <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297a:	4b71      	ldr	r3, [pc, #452]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002980:	f000 8091 	beq.w	8002aa6 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	d5ee      	bpl.n	8002966 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002988:	f7ff ff9e 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800298c:	4b6d      	ldr	r3, [pc, #436]	; (8002b44 <HAL_RCC_ClockConfig+0x20c>)
 800298e:	4298      	cmp	r0, r3
 8002990:	f200 80c6 	bhi.w	8002b20 <HAL_RCC_ClockConfig+0x1e8>
 8002994:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002996:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4e69      	ldr	r6, [pc, #420]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 800299c:	68b3      	ldr	r3, [r6, #8]
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	431a      	orrs	r2, r3
 80029a4:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80029a6:	f7fe fcdb 	bl	8001360 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80029ae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b0:	e004      	b.n	80029bc <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b2:	f7fe fcd5 	bl	8001360 <HAL_GetTick>
 80029b6:	1bc0      	subs	r0, r0, r7
 80029b8:	4540      	cmp	r0, r8
 80029ba:	d871      	bhi.n	8002aa0 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029bc:	68b3      	ldr	r3, [r6, #8]
 80029be:	6862      	ldr	r2, [r4, #4]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029c8:	d1f3      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	079f      	lsls	r7, r3, #30
 80029ce:	d436      	bmi.n	8002a3e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80029d0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80029d4:	d103      	bne.n	80029de <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029d6:	68b3      	ldr	r3, [r6, #8]
 80029d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029dc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029de:	4e57      	ldr	r6, [pc, #348]	; (8002b3c <HAL_RCC_ClockConfig+0x204>)
 80029e0:	6833      	ldr	r3, [r6, #0]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	42ab      	cmp	r3, r5
 80029e8:	d846      	bhi.n	8002a78 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	075a      	lsls	r2, r3, #29
 80029ee:	d506      	bpl.n	80029fe <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f0:	4953      	ldr	r1, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 80029f2:	68e0      	ldr	r0, [r4, #12]
 80029f4:	688a      	ldr	r2, [r1, #8]
 80029f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029fa:	4302      	orrs	r2, r0
 80029fc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	071b      	lsls	r3, r3, #28
 8002a00:	d507      	bpl.n	8002a12 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a02:	4a4f      	ldr	r2, [pc, #316]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 8002a04:	6921      	ldr	r1, [r4, #16]
 8002a06:	6893      	ldr	r3, [r2, #8]
 8002a08:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a0c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a10:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a12:	f7ff ff59 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8002a16:	4a4a      	ldr	r2, [pc, #296]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 8002a18:	4c4b      	ldr	r4, [pc, #300]	; (8002b48 <HAL_RCC_ClockConfig+0x210>)
 8002a1a:	6892      	ldr	r2, [r2, #8]
 8002a1c:	494b      	ldr	r1, [pc, #300]	; (8002b4c <HAL_RCC_ClockConfig+0x214>)
 8002a1e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002a22:	4603      	mov	r3, r0
 8002a24:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8002a26:	484a      	ldr	r0, [pc, #296]	; (8002b50 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	40d3      	lsrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8002a30:	6800      	ldr	r0, [r0, #0]
}
 8002a32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8002a36:	f7fe bbe7 	b.w	8001208 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3a:	0798      	lsls	r0, r3, #30
 8002a3c:	d5cf      	bpl.n	80029de <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3e:	0758      	lsls	r0, r3, #29
 8002a40:	d504      	bpl.n	8002a4c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a42:	493f      	ldr	r1, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 8002a44:	688a      	ldr	r2, [r1, #8]
 8002a46:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002a4a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	0719      	lsls	r1, r3, #28
 8002a4e:	d506      	bpl.n	8002a5e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a50:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 8002a52:	6893      	ldr	r3, [r2, #8]
 8002a54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a58:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a5c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5e:	4a38      	ldr	r2, [pc, #224]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 8002a60:	68a1      	ldr	r1, [r4, #8]
 8002a62:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4e35      	ldr	r6, [pc, #212]	; (8002b3c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6e:	6833      	ldr	r3, [r6, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	42ab      	cmp	r3, r5
 8002a76:	d9b8      	bls.n	80029ea <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a78:	6833      	ldr	r3, [r6, #0]
 8002a7a:	f023 030f 	bic.w	r3, r3, #15
 8002a7e:	432b      	orrs	r3, r5
 8002a80:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002a82:	f7fe fc6d 	bl	8001360 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a86:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a8a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8c:	6833      	ldr	r3, [r6, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	42ab      	cmp	r3, r5
 8002a94:	d0a9      	beq.n	80029ea <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a96:	f7fe fc63 	bl	8001360 <HAL_GetTick>
 8002a9a:	1bc0      	subs	r0, r0, r7
 8002a9c:	4540      	cmp	r0, r8
 8002a9e:	d9f5      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8002aa0:	2003      	movs	r0, #3
}
 8002aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa6:	039a      	lsls	r2, r3, #14
 8002aa8:	f53f af6e 	bmi.w	8002988 <HAL_RCC_ClockConfig+0x50>
 8002aac:	e75b      	b.n	8002966 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aae:	4824      	ldr	r0, [pc, #144]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 8002ab0:	6801      	ldr	r1, [r0, #0]
 8002ab2:	0189      	lsls	r1, r1, #6
 8002ab4:	f57f af57 	bpl.w	8002966 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ab8:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aba:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002abc:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002abe:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac2:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 8002ac6:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac8:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002acc:	bf0c      	ite	eq
 8002ace:	4921      	ldreq	r1, [pc, #132]	; (8002b54 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ad0:	4921      	ldrne	r1, [pc, #132]	; (8002b58 <HAL_RCC_ClockConfig+0x220>)
 8002ad2:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ad6:	4e1a      	ldr	r6, [pc, #104]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 8002ad8:	4f1a      	ldr	r7, [pc, #104]	; (8002b44 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ada:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002ade:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae2:	68f0      	ldr	r0, [r6, #12]
 8002ae4:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8002ae8:	3001      	adds	r0, #1
 8002aea:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8002aec:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8002af0:	42b9      	cmp	r1, r7
 8002af2:	d920      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002af4:	68b1      	ldr	r1, [r6, #8]
 8002af6:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x1d0>
 8002afc:	f013 0902 	ands.w	r9, r3, #2
 8002b00:	f43f af4b 	beq.w	800299a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b04:	68a3      	ldr	r3, [r4, #8]
 8002b06:	b9b3      	cbnz	r3, 8002b36 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b08:	490d      	ldr	r1, [pc, #52]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 8002b0a:	688b      	ldr	r3, [r1, #8]
 8002b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b16:	f04f 0980 	mov.w	r9, #128	; 0x80
 8002b1a:	e73e      	b.n	800299a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8002b1c:	2001      	movs	r0, #1
}
 8002b1e:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b20:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <HAL_RCC_ClockConfig+0x208>)
 8002b22:	6893      	ldr	r3, [r2, #8]
 8002b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b2e:	6862      	ldr	r2, [r4, #4]
 8002b30:	f04f 0980 	mov.w	r9, #128	; 0x80
 8002b34:	e731      	b.n	800299a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b36:	f04f 0900 	mov.w	r9, #0
 8002b3a:	e72e      	b.n	800299a <HAL_RCC_ClockConfig+0x62>
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	04c4b400 	.word	0x04c4b400
 8002b48:	0800358c 	.word	0x0800358c
 8002b4c:	20000008 	.word	0x20000008
 8002b50:	20000010 	.word	0x20000010
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	00f42400 	.word	0x00f42400

08002b5c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8002b5c:	4b01      	ldr	r3, [pc, #4]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000008 	.word	0x20000008

08002b68 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b6a:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002b6e:	4906      	ldr	r1, [pc, #24]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b70:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002b74:	6808      	ldr	r0, [r1, #0]
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
}
 8002b7c:	40d8      	lsrs	r0, r3
 8002b7e:	4770      	bx	lr
 8002b80:	40021000 	.word	0x40021000
 8002b84:	0800359c 	.word	0x0800359c
 8002b88:	20000008 	.word	0x20000008

08002b8c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b8e:	220f      	movs	r2, #15
 8002b90:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	f002 0203 	and.w	r2, r2, #3
 8002b98:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002ba0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002ba8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	08db      	lsrs	r3, r3, #3
{
 8002bae:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bb4:	4c05      	ldr	r4, [pc, #20]	; (8002bcc <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002bb6:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bb8:	6823      	ldr	r3, [r4, #0]
}
 8002bba:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	600b      	str	r3, [r1, #0]
}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd4:	6803      	ldr	r3, [r0, #0]
{
 8002bd6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd8:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8002bdc:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bde:	d056      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be0:	4bb6      	ldr	r3, [pc, #728]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002be2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002be4:	00d5      	lsls	r5, r2, #3
 8002be6:	f140 813e 	bpl.w	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8002bea:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bec:	4db4      	ldr	r5, [pc, #720]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bf6:	f7fe fbb3 	bl	8001360 <HAL_GetTick>
 8002bfa:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bfc:	e005      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7fe fbaf 	bl	8001360 <HAL_GetTick>
 8002c02:	1b83      	subs	r3, r0, r6
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	f200 8139 	bhi.w	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c0a:	682b      	ldr	r3, [r5, #0]
 8002c0c:	05d8      	lsls	r0, r3, #23
 8002c0e:	d5f6      	bpl.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c10:	4daa      	ldr	r5, [pc, #680]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c12:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c16:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c1a:	d027      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002c1c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d025      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c22:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c26:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c32:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c36:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c3e:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c40:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002c44:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c48:	f140 8148 	bpl.w	8002edc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fb88 	bl	8001360 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c54:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c56:	e005      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe fb82 	bl	8001360 <HAL_GetTick>
 8002c5c:	1b80      	subs	r0, r0, r6
 8002c5e:	4540      	cmp	r0, r8
 8002c60:	f200 810c 	bhi.w	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c64:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002c68:	079b      	lsls	r3, r3, #30
 8002c6a:	d5f5      	bpl.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8002c6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6e:	4993      	ldr	r1, [pc, #588]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c7e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c80:	b127      	cbz	r7, 8002c8c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4a8e      	ldr	r2, [pc, #568]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c84:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c8c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c8e:	07dd      	lsls	r5, r3, #31
 8002c90:	d508      	bpl.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c92:	498a      	ldr	r1, [pc, #552]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c94:	6865      	ldr	r5, [r4, #4]
 8002c96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c9a:	f022 0203 	bic.w	r2, r2, #3
 8002c9e:	432a      	orrs	r2, r5
 8002ca0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca4:	0799      	lsls	r1, r3, #30
 8002ca6:	d508      	bpl.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ca8:	4984      	ldr	r1, [pc, #528]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002caa:	68a5      	ldr	r5, [r4, #8]
 8002cac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cb0:	f022 020c 	bic.w	r2, r2, #12
 8002cb4:	432a      	orrs	r2, r5
 8002cb6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cba:	075a      	lsls	r2, r3, #29
 8002cbc:	d508      	bpl.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cbe:	497f      	ldr	r1, [pc, #508]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cc0:	68e5      	ldr	r5, [r4, #12]
 8002cc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cc6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002cca:	432a      	orrs	r2, r5
 8002ccc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cd0:	071f      	lsls	r7, r3, #28
 8002cd2:	d508      	bpl.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd4:	4979      	ldr	r1, [pc, #484]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cd6:	6925      	ldr	r5, [r4, #16]
 8002cd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cdc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ce0:	432a      	orrs	r2, r5
 8002ce2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ce6:	06de      	lsls	r6, r3, #27
 8002ce8:	d508      	bpl.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cea:	4974      	ldr	r1, [pc, #464]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cec:	6965      	ldr	r5, [r4, #20]
 8002cee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cf2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002cf6:	432a      	orrs	r2, r5
 8002cf8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cfc:	069d      	lsls	r5, r3, #26
 8002cfe:	d508      	bpl.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d00:	496e      	ldr	r1, [pc, #440]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d02:	69a5      	ldr	r5, [r4, #24]
 8002d04:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d0c:	432a      	orrs	r2, r5
 8002d0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d12:	0659      	lsls	r1, r3, #25
 8002d14:	d508      	bpl.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d16:	4969      	ldr	r1, [pc, #420]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d18:	69e5      	ldr	r5, [r4, #28]
 8002d1a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d22:	432a      	orrs	r2, r5
 8002d24:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d28:	061a      	lsls	r2, r3, #24
 8002d2a:	d508      	bpl.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d2c:	4963      	ldr	r1, [pc, #396]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d2e:	6a25      	ldr	r5, [r4, #32]
 8002d30:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d34:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002d38:	432a      	orrs	r2, r5
 8002d3a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d3e:	05df      	lsls	r7, r3, #23
 8002d40:	d508      	bpl.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d42:	495e      	ldr	r1, [pc, #376]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d44:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002d46:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d4a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002d4e:	432a      	orrs	r2, r5
 8002d50:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d54:	039e      	lsls	r6, r3, #14
 8002d56:	d508      	bpl.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d58:	4958      	ldr	r1, [pc, #352]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d5a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002d5c:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8002d60:	f022 0203 	bic.w	r2, r2, #3
 8002d64:	432a      	orrs	r2, r5
 8002d66:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d6a:	059d      	lsls	r5, r3, #22
 8002d6c:	d508      	bpl.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6e:	4953      	ldr	r1, [pc, #332]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d70:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002d72:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d76:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002d7a:	432a      	orrs	r2, r5
 8002d7c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d80:	0559      	lsls	r1, r3, #21
 8002d82:	d50b      	bpl.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d84:	494d      	ldr	r1, [pc, #308]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d86:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002d88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d8c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002d90:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d92:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d96:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d9a:	d071      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d9c:	051a      	lsls	r2, r3, #20
 8002d9e:	d50b      	bpl.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002da0:	4946      	ldr	r1, [pc, #280]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002da2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002da4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002da8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002dac:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dae:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002db2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002db6:	d068      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002db8:	04df      	lsls	r7, r3, #19
 8002dba:	d50b      	bpl.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dbc:	493f      	ldr	r1, [pc, #252]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002dbe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002dc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dc8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dca:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dd2:	d05f      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dd4:	049e      	lsls	r6, r3, #18
 8002dd6:	d50b      	bpl.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dd8:	4938      	ldr	r1, [pc, #224]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002dda:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002ddc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002de0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002de4:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002de6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dee:	d056      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002df0:	045d      	lsls	r5, r3, #17
 8002df2:	d50b      	bpl.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df4:	4931      	ldr	r1, [pc, #196]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002df6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002df8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dfc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002e00:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e02:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e0a:	d04d      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e0c:	0419      	lsls	r1, r3, #16
 8002e0e:	d50b      	bpl.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e10:	492a      	ldr	r1, [pc, #168]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e12:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002e14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e1c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e1e:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e22:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e26:	d044      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e28:	03da      	lsls	r2, r3, #15
 8002e2a:	d50b      	bpl.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e2c:	4923      	ldr	r1, [pc, #140]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e2e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002e30:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e34:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002e38:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e3a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e42:	d03f      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e44:	035b      	lsls	r3, r3, #13
 8002e46:	d50b      	bpl.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002e4a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002e4c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002e50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e54:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e56:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e5e:	d036      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8002e60:	b002      	add	sp, #8
 8002e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e6c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e78:	2701      	movs	r7, #1
 8002e7a:	e6b7      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	e6ff      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e80:	68ca      	ldr	r2, [r1, #12]
 8002e82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e86:	60ca      	str	r2, [r1, #12]
 8002e88:	e788      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e8a:	68ca      	ldr	r2, [r1, #12]
 8002e8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e90:	60ca      	str	r2, [r1, #12]
 8002e92:	e791      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e94:	68ca      	ldr	r2, [r1, #12]
 8002e96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e9a:	60ca      	str	r2, [r1, #12]
 8002e9c:	e79a      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9e:	68ca      	ldr	r2, [r1, #12]
 8002ea0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ea4:	60ca      	str	r2, [r1, #12]
 8002ea6:	e7a3      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	68ca      	ldr	r2, [r1, #12]
 8002eaa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002eae:	60ca      	str	r2, [r1, #12]
 8002eb0:	e7ac      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002eb2:	68ca      	ldr	r2, [r1, #12]
 8002eb4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002eb8:	60ca      	str	r2, [r1, #12]
 8002eba:	e7b5      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ec4:	68ca      	ldr	r2, [r1, #12]
 8002ec6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002eca:	60ca      	str	r2, [r1, #12]
 8002ecc:	e7ba      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ece:	68d3      	ldr	r3, [r2, #12]
 8002ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed4:	60d3      	str	r3, [r2, #12]
}
 8002ed6:	b002      	add	sp, #8
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002edc:	4613      	mov	r3, r2
 8002ede:	e6c6      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x9e>

08002ee0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	f000 8089 	beq.w	8002ff8 <HAL_TIM_Base_Init+0x118>
{
 8002ee6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002eec:	4604      	mov	r4, r0
 8002eee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d078      	beq.n	8002fe8 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef6:	6821      	ldr	r1, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef8:	4a43      	ldr	r2, [pc, #268]	; (8003008 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002efa:	2302      	movs	r3, #2
 8002efc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f00:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8002f02:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	d05c      	beq.n	8002fc0 <HAL_TIM_Base_Init+0xe0>
 8002f06:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8002f0a:	d02c      	beq.n	8002f66 <HAL_TIM_Base_Init+0x86>
 8002f0c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002f10:	4291      	cmp	r1, r2
 8002f12:	d028      	beq.n	8002f66 <HAL_TIM_Base_Init+0x86>
 8002f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f18:	4291      	cmp	r1, r2
 8002f1a:	d024      	beq.n	8002f66 <HAL_TIM_Base_Init+0x86>
 8002f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f20:	4291      	cmp	r1, r2
 8002f22:	d020      	beq.n	8002f66 <HAL_TIM_Base_Init+0x86>
 8002f24:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002f28:	4291      	cmp	r1, r2
 8002f2a:	d049      	beq.n	8002fc0 <HAL_TIM_Base_Init+0xe0>
 8002f2c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002f30:	4291      	cmp	r1, r2
 8002f32:	d063      	beq.n	8002ffc <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f34:	4a35      	ldr	r2, [pc, #212]	; (800300c <HAL_TIM_Base_Init+0x12c>)
 8002f36:	4291      	cmp	r1, r2
 8002f38:	d05b      	beq.n	8002ff2 <HAL_TIM_Base_Init+0x112>
 8002f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f3e:	4291      	cmp	r1, r2
 8002f40:	d057      	beq.n	8002ff2 <HAL_TIM_Base_Init+0x112>
 8002f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f46:	4291      	cmp	r1, r2
 8002f48:	d053      	beq.n	8002ff2 <HAL_TIM_Base_Init+0x112>
 8002f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4e:	4291      	cmp	r1, r2
 8002f50:	d04f      	beq.n	8002ff2 <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f52:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f54:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f56:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f5c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002f5e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f60:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f62:	628a      	str	r2, [r1, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f64:	e010      	b.n	8002f88 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8002f66:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f68:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f6a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f70:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f76:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f78:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7e:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8002f80:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002f82:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f86:	628a      	str	r2, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002f94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002f98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002fac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fb0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002fb4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002fbc:	2000      	movs	r0, #0
}
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8002fc0:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc4:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fca:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002fd8:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fda:	68e3      	ldr	r3, [r4, #12]
 8002fdc:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fde:	6863      	ldr	r3, [r4, #4]
 8002fe0:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe2:	6963      	ldr	r3, [r4, #20]
 8002fe4:	630b      	str	r3, [r1, #48]	; 0x30
 8002fe6:	e7cf      	b.n	8002f88 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8002fe8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002fec:	f7fe f8ee 	bl	80011cc <HAL_TIM_Base_MspInit>
 8002ff0:	e781      	b.n	8002ef6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff4:	69a2      	ldr	r2, [r4, #24]
 8002ff6:	e7e9      	b.n	8002fcc <HAL_TIM_Base_Init+0xec>
    return HAL_ERROR;
 8002ff8:	2001      	movs	r0, #1
}
 8002ffa:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002ffc:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003002:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003004:	e796      	b.n	8002f34 <HAL_TIM_Base_Init+0x54>
 8003006:	bf00      	nop
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40014000 	.word	0x40014000

08003010 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003010:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003014:	2b01      	cmp	r3, #1
 8003016:	d132      	bne.n	800307e <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003018:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301a:	491b      	ldr	r1, [pc, #108]	; (8003088 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	2202      	movs	r2, #2
 800301e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003022:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003024:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302c:	d019      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x52>
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003032:	d016      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x52>
 8003034:	4a15      	ldr	r2, [pc, #84]	; (800308c <HAL_TIM_Base_Start_IT+0x7c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x52>
 800303a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800303e:	4293      	cmp	r3, r2
 8003040:	d00f      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x52>
 8003042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003046:	4293      	cmp	r3, r2
 8003048:	d00b      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x52>
 800304a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x52>
 8003052:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003056:	4293      	cmp	r3, r2
 8003058:	d003      	beq.n	8003062 <HAL_TIM_Base_Start_IT+0x52>
 800305a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800305e:	4293      	cmp	r3, r2
 8003060:	d107      	bne.n	8003072 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <HAL_TIM_Base_Start_IT+0x80>)
 8003066:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003068:	2a06      	cmp	r2, #6
 800306a:	d00a      	beq.n	8003082 <HAL_TIM_Base_Start_IT+0x72>
 800306c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003070:	d007      	beq.n	8003082 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800307a:	2000      	movs	r0, #0
 800307c:	4770      	bx	lr
    return HAL_ERROR;
 800307e:	2001      	movs	r0, #1
 8003080:	4770      	bx	lr
  return HAL_OK;
 8003082:	2000      	movs	r0, #0
}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40000400 	.word	0x40000400
 8003090:	00010007 	.word	0x00010007

08003094 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003094:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	f000 808c 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x122>
{
 800309e:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80030a2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80030a6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80030aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80030ae:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80030b0:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b2:	4c5c      	ldr	r4, [pc, #368]	; (8003224 <HAL_TIM_ConfigClockSource+0x190>)
  switch (sClockSourceConfig->ClockSource)
 80030b4:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b6:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80030ba:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80030bc:	d07d      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x126>
 80030be:	d921      	bls.n	8003104 <HAL_TIM_ConfigClockSource+0x70>
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	d067      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x102>
 80030c6:	d94a      	bls.n	800315e <HAL_TIM_ConfigClockSource+0xca>
 80030c8:	4957      	ldr	r1, [pc, #348]	; (8003228 <HAL_TIM_ConfigClockSource+0x194>)
 80030ca:	428b      	cmp	r3, r1
 80030cc:	d008      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0x4c>
 80030ce:	d93e      	bls.n	800314e <HAL_TIM_ConfigClockSource+0xba>
 80030d0:	4956      	ldr	r1, [pc, #344]	; (800322c <HAL_TIM_ConfigClockSource+0x198>)
 80030d2:	428b      	cmp	r3, r1
 80030d4:	d004      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0x4c>
 80030d6:	3910      	subs	r1, #16
 80030d8:	f023 0420 	bic.w	r4, r3, #32
 80030dc:	428c      	cmp	r4, r1
 80030de:	d108      	bne.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030e0:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030e2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80030e6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ea:	430b      	orrs	r3, r1
 80030ec:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f0:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 80030f2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	2201      	movs	r2, #1
 80030f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80030fe:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8003100:	4618      	mov	r0, r3
}
 8003102:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d073      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x15c>
 8003108:	d91b      	bls.n	8003142 <HAL_TIM_ConfigClockSource+0xae>
 800310a:	2b50      	cmp	r3, #80	; 0x50
 800310c:	d1f1      	bne.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 800310e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003110:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003112:	684c      	ldr	r4, [r1, #4]
 8003114:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	f026 0601 	bic.w	r6, r6, #1
 800311a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311c:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003126:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800312a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800312c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800312e:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003130:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003132:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800313a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800313e:	6093      	str	r3, [r2, #8]
}
 8003140:	e7d7      	b.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8003142:	2b20      	cmp	r3, #32
 8003144:	d0cc      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0x4c>
 8003146:	d91c      	bls.n	8003182 <HAL_TIM_ConfigClockSource+0xee>
 8003148:	2b30      	cmp	r3, #48	; 0x30
 800314a:	d1d2      	bne.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
 800314c:	e7c8      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x4c>
 800314e:	3920      	subs	r1, #32
 8003150:	428b      	cmp	r3, r1
 8003152:	d0c5      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0x4c>
 8003154:	d919      	bls.n	800318a <HAL_TIM_ConfigClockSource+0xf6>
 8003156:	4936      	ldr	r1, [pc, #216]	; (8003230 <HAL_TIM_ConfigClockSource+0x19c>)
 8003158:	428b      	cmp	r3, r1
 800315a:	d0c1      	beq.n	80030e0 <HAL_TIM_ConfigClockSource+0x4c>
 800315c:	e7c9      	b.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
 800315e:	2b70      	cmp	r3, #112	; 0x70
 8003160:	d1c7      	bne.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003162:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003166:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003168:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800316a:	432b      	orrs	r3, r5
 800316c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003170:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003174:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003176:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003178:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800317a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800317e:	6093      	str	r3, [r2, #8]
      break;
 8003180:	e7b7      	b.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8003182:	f033 0110 	bics.w	r1, r3, #16
 8003186:	d1b4      	bne.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
 8003188:	e7aa      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x4c>
 800318a:	f023 0110 	bic.w	r1, r3, #16
 800318e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003192:	d1ae      	bne.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
 8003194:	e7a4      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x4c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003196:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800319a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800319c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319e:	432b      	orrs	r3, r5
 80031a0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031a8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80031aa:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ac:	6893      	ldr	r3, [r2, #8]
 80031ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b2:	6093      	str	r3, [r2, #8]
      break;
 80031b4:	e79d      	b.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 80031b6:	2002      	movs	r0, #2
}
 80031b8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ba:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031bc:	684d      	ldr	r5, [r1, #4]
 80031be:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c0:	f024 0410 	bic.w	r4, r4, #16
 80031c4:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c6:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 80031c8:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ca:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80031d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80031da:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80031dc:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80031de:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80031e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80031e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80031ec:	6093      	str	r3, [r2, #8]
}
 80031ee:	e780      	b.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 80031f0:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f2:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f4:	684c      	ldr	r4, [r1, #4]
 80031f6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f8:	f026 0601 	bic.w	r6, r6, #1
 80031fc:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fe:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003200:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003208:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800320c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800320e:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003210:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003212:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003214:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800321c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003220:	6093      	str	r3, [r2, #8]
}
 8003222:	e766      	b.n	80030f2 <HAL_TIM_ConfigClockSource+0x5e>
 8003224:	ffce0088 	.word	0xffce0088
 8003228:	00100040 	.word	0x00100040
 800322c:	00100060 	.word	0x00100060
 8003230:	00100030 	.word	0x00100030

08003234 <HAL_TIM_OC_DelayElapsedCallback>:
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop

08003238 <HAL_TIM_IC_CaptureCallback>:
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <HAL_TIM_PWM_PulseFinishedCallback>:
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <HAL_TIM_TriggerCallback>:
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop

08003244 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003244:	6803      	ldr	r3, [r0, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	0791      	lsls	r1, r2, #30
{
 800324a:	b510      	push	{r4, lr}
 800324c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800324e:	d503      	bpl.n	8003258 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	0792      	lsls	r2, r2, #30
 8003254:	f100 808a 	bmi.w	800336c <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	0752      	lsls	r2, r2, #29
 800325c:	d502      	bpl.n	8003264 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	0750      	lsls	r0, r2, #29
 8003262:	d470      	bmi.n	8003346 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	0711      	lsls	r1, r2, #28
 8003268:	d502      	bpl.n	8003270 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	0712      	lsls	r2, r2, #28
 800326e:	d458      	bmi.n	8003322 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	06d1      	lsls	r1, r2, #27
 8003274:	d502      	bpl.n	800327c <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	06d2      	lsls	r2, r2, #27
 800327a:	d43e      	bmi.n	80032fa <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	07d0      	lsls	r0, r2, #31
 8003280:	d503      	bpl.n	800328a <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	07d1      	lsls	r1, r2, #31
 8003286:	f100 808a 	bmi.w	800339e <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	0612      	lsls	r2, r2, #24
 800328e:	d503      	bpl.n	8003298 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	0610      	lsls	r0, r2, #24
 8003294:	f100 808b 	bmi.w	80033ae <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	05d1      	lsls	r1, r2, #23
 800329c:	d503      	bpl.n	80032a6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	0612      	lsls	r2, r2, #24
 80032a2:	f100 808c 	bmi.w	80033be <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	0650      	lsls	r0, r2, #25
 80032aa:	d503      	bpl.n	80032b4 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	0651      	lsls	r1, r2, #25
 80032b0:	f100 808d 	bmi.w	80033ce <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	0692      	lsls	r2, r2, #26
 80032b8:	d503      	bpl.n	80032c2 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	0690      	lsls	r0, r2, #26
 80032be:	f100 808e 	bmi.w	80033de <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	02d1      	lsls	r1, r2, #11
 80032c6:	d503      	bpl.n	80032d0 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	02d2      	lsls	r2, r2, #11
 80032cc:	f100 808f 	bmi.w	80033ee <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	0290      	lsls	r0, r2, #10
 80032d4:	d503      	bpl.n	80032de <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	0291      	lsls	r1, r2, #10
 80032da:	f100 8090 	bmi.w	80033fe <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	0252      	lsls	r2, r2, #9
 80032e2:	d503      	bpl.n	80032ec <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	0250      	lsls	r0, r2, #9
 80032e8:	f100 8091 	bmi.w	800340e <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	0211      	lsls	r1, r2, #8
 80032f0:	d502      	bpl.n	80032f8 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	0212      	lsls	r2, r2, #8
 80032f6:	d44a      	bmi.n	800338e <HAL_TIM_IRQHandler+0x14a>
}
 80032f8:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032fa:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032fe:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003300:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003302:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800330c:	f040 8090 	bne.w	8003430 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003310:	f7ff ff90 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff ff91 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	2200      	movs	r2, #0
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	7722      	strb	r2, [r4, #28]
 8003320:	e7ac      	b.n	800327c <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003322:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003326:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003328:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003330:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003332:	d17a      	bne.n	800342a <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003334:	f7ff ff7e 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff ff7f 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	2200      	movs	r2, #0
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	7722      	strb	r2, [r4, #28]
 8003344:	e794      	b.n	8003270 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003346:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800334a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800334c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800334e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003358:	d164      	bne.n	8003424 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	f7ff ff6b 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335e:	4620      	mov	r0, r4
 8003360:	f7ff ff6c 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003364:	2200      	movs	r2, #0
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	7722      	strb	r2, [r4, #28]
 800336a:	e77b      	b.n	8003264 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003370:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003372:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003374:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	0799      	lsls	r1, r3, #30
 800337a:	d150      	bne.n	800341e <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337c:	f7ff ff5a 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	4620      	mov	r0, r4
 8003382:	f7ff ff5b 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	2200      	movs	r2, #0
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	7722      	strb	r2, [r4, #28]
 800338c:	e764      	b.n	8003258 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800338e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003392:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003394:	611a      	str	r2, [r3, #16]
}
 8003396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 800339a:	f000 b8bd 	b.w	8003518 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800339e:	f06f 0201 	mvn.w	r2, #1
 80033a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7fd fbdf 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	e76d      	b.n	800328a <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80033b4:	4620      	mov	r0, r4
 80033b6:	f000 f8a5 	bl	8003504 <HAL_TIMEx_BreakCallback>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	e76c      	b.n	8003298 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80033c4:	4620      	mov	r0, r4
 80033c6:	f000 f89f 	bl	8003508 <HAL_TIMEx_Break2Callback>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	e76b      	b.n	80032a6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80033d4:	4620      	mov	r0, r4
 80033d6:	f7ff ff33 	bl	8003240 <HAL_TIM_TriggerCallback>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	e76a      	b.n	80032b4 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033de:	f06f 0220 	mvn.w	r2, #32
 80033e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80033e4:	4620      	mov	r0, r4
 80033e6:	f000 f88b 	bl	8003500 <HAL_TIMEx_CommutCallback>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	e769      	b.n	80032c2 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80033ee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80033f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 80033f4:	4620      	mov	r0, r4
 80033f6:	f000 f889 	bl	800350c <HAL_TIMEx_EncoderIndexCallback>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	e768      	b.n	80032d0 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80033fe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003402:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003404:	4620      	mov	r0, r4
 8003406:	f000 f883 	bl	8003510 <HAL_TIMEx_DirectionChangeCallback>
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	e767      	b.n	80032de <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800340e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003412:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8003414:	4620      	mov	r0, r4
 8003416:	f000 f87d 	bl	8003514 <HAL_TIMEx_IndexErrorCallback>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	e766      	b.n	80032ec <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 800341e:	f7ff ff0b 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8003422:	e7b0      	b.n	8003386 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8003424:	f7ff ff08 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8003428:	e79c      	b.n	8003364 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	f7ff ff05 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 800342e:	e786      	b.n	800333e <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8003430:	f7ff ff02 	bl	8003238 <HAL_TIM_IC_CaptureCallback>
 8003434:	e771      	b.n	800331a <HAL_TIM_IRQHandler+0xd6>
 8003436:	bf00      	nop

08003438 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003438:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d058      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
{
 8003440:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003442:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003444:	4c2c      	ldr	r4, [pc, #176]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003446:	2302      	movs	r3, #2
 8003448:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800344c:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 800344e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003450:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003452:	d042      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003454:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003458:	42a2      	cmp	r2, r4
 800345a:	d032      	beq.n	80034c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 800345c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003460:	42a2      	cmp	r2, r4
 8003462:	d02e      	beq.n	80034c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003464:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003466:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800346e:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003470:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003472:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003476:	d016      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003478:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800347a:	429a      	cmp	r2, r3
 800347c:	d013      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800347e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003482:	429a      	cmp	r2, r3
 8003484:	d00f      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800348a:	429a      	cmp	r2, r3
 800348c:	d00b      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800348e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003492:	429a      	cmp	r2, r3
 8003494:	d007      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003496:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800349a:	429a      	cmp	r2, r3
 800349c:	d003      	beq.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800349e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d104      	bne.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a6:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034a8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ac:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ae:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80034b0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80034b2:	2201      	movs	r2, #1
 80034b4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80034b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80034bc:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80034be:	4618      	mov	r0, r3
}
 80034c0:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c2:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034ca:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80034cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80034d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d4:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80034d6:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	e7cb      	b.n	8003472 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034da:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034e2:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ec:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80034ee:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f0:	e7d9      	b.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 80034f2:	2002      	movs	r0, #2
}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40000400 	.word	0x40000400

08003500 <HAL_TIMEx_CommutCallback>:
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop

08003504 <HAL_TIMEx_BreakCallback>:
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop

08003508 <HAL_TIMEx_Break2Callback>:
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop

0800350c <HAL_TIMEx_EncoderIndexCallback>:
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <HAL_TIMEx_DirectionChangeCallback>:
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop

08003514 <HAL_TIMEx_IndexErrorCallback>:
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop

08003518 <HAL_TIMEx_TransitionErrorCallback>:
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop

0800351c <__libc_init_array>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	4d0d      	ldr	r5, [pc, #52]	; (8003554 <__libc_init_array+0x38>)
 8003520:	4c0d      	ldr	r4, [pc, #52]	; (8003558 <__libc_init_array+0x3c>)
 8003522:	1b64      	subs	r4, r4, r5
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	2600      	movs	r6, #0
 8003528:	42a6      	cmp	r6, r4
 800352a:	d109      	bne.n	8003540 <__libc_init_array+0x24>
 800352c:	4d0b      	ldr	r5, [pc, #44]	; (800355c <__libc_init_array+0x40>)
 800352e:	4c0c      	ldr	r4, [pc, #48]	; (8003560 <__libc_init_array+0x44>)
 8003530:	f000 f820 	bl	8003574 <_init>
 8003534:	1b64      	subs	r4, r4, r5
 8003536:	10a4      	asrs	r4, r4, #2
 8003538:	2600      	movs	r6, #0
 800353a:	42a6      	cmp	r6, r4
 800353c:	d105      	bne.n	800354a <__libc_init_array+0x2e>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	f855 3b04 	ldr.w	r3, [r5], #4
 8003544:	4798      	blx	r3
 8003546:	3601      	adds	r6, #1
 8003548:	e7ee      	b.n	8003528 <__libc_init_array+0xc>
 800354a:	f855 3b04 	ldr.w	r3, [r5], #4
 800354e:	4798      	blx	r3
 8003550:	3601      	adds	r6, #1
 8003552:	e7f2      	b.n	800353a <__libc_init_array+0x1e>
 8003554:	080035a4 	.word	0x080035a4
 8003558:	080035a4 	.word	0x080035a4
 800355c:	080035a4 	.word	0x080035a4
 8003560:	080035a8 	.word	0x080035a8

08003564 <memset>:
 8003564:	4402      	add	r2, r0
 8003566:	4603      	mov	r3, r0
 8003568:	4293      	cmp	r3, r2
 800356a:	d100      	bne.n	800356e <memset+0xa>
 800356c:	4770      	bx	lr
 800356e:	f803 1b01 	strb.w	r1, [r3], #1
 8003572:	e7f9      	b.n	8003568 <memset+0x4>

08003574 <_init>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr

08003580 <_fini>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr
